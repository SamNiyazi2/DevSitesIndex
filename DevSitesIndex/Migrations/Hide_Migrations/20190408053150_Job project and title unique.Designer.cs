// <auto-generated />
using DevSitesIndex.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DevSitesIndex.Migrations
{
    [DbContext(typeof(DevSitesIndexContext))]
    [Migration("20190408053150_Job project and title unique")]
    partial class Jobprojectandtitleunique
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DemoSites")
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DevSitesIndex.Entities.CodeReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeBlock")
                        .IsRequired();

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("SourceAddress");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CodeReferences");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateAdded");

                    b.HasKey("CompanyID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.DevSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanBeLaunched");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<byte>("ForDemo_v02");

                    b.Property<string>("SiteTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SiteUrl")
                        .HasMaxLength(500);

                    b.Property<int>("SoftwareCodeID");

                    b.Property<string>("SolutionName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Solution_Details");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareCodeID");

                    b.ToTable("DevSites");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("DisciplineShort")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineShort")
                        .IsUnique()
                        .HasName("Discipline_DisciplineShort_Unique");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ProjectID");

                    b.HasKey("JobID");

                    b.HasIndex("ProjectID", "JobTitle")
                        .IsUnique()
                        .HasName("Job_ProjectID_Title_Unique");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyID");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ProjectID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.ReferenceSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("SiteTitle")
                        .IsRequired();

                    b.Property<string>("SiteURL")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SiteTitle")
                        .IsUnique()
                        .HasName("ReferenceSites_SiteTitle");

                    b.HasIndex("SiteURL")
                        .IsUnique()
                        .HasName("ReferenceSites_SiteURL");

                    b.ToTable("ReferenceSites");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.SoftwareCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SoftwareTitle");

                    b.HasKey("ID");

                    b.ToTable("SoftwareCode");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.TimeLog", b =>
                {
                    b.Property<int>("TimeLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("DisciplineID");

                    b.Property<int>("JobId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("TotalSeconds");

                    b.Property<string>("WorkDetail");

                    b.HasKey("TimeLogId");

                    b.HasIndex("DisciplineID");

                    b.HasIndex("JobId");

                    b.ToTable("TimeLog");
                });

            modelBuilder.Entity("DevSitesIndex.Entities.DevSite", b =>
                {
                    b.HasOne("DevSitesIndex.Entities.SoftwareCode", "SoftwareCode")
                        .WithMany()
                        .HasForeignKey("SoftwareCodeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DevSitesIndex.Entities.Job", b =>
                {
                    b.HasOne("DevSitesIndex.Entities.Project", "project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DevSitesIndex.Entities.Project", b =>
                {
                    b.HasOne("DevSitesIndex.Entities.Company", "company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DevSitesIndex.Entities.TimeLog", b =>
                {
                    b.HasOne("DevSitesIndex.Entities.Discipline", "discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DevSitesIndex.Entities.Job", "job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
