@page
@model DevSitesIndex.Pages.Projects.IndexModel

@{
    ViewData["Title"] = "Projects - Index";
}


<h2>@ViewData["Title"]</h2>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            @{await Html.RenderPartialAsync("HeaderWithSortLinks", Model.headerWithSortLinks);}
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Project)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProjectTitle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.company.CompanyName)
                </td>
                <td class="indexNowrapCol">
                    @Html.DisplayFor(modelItem => item.DateAdded)
                </td>
                <td class="indexNowrapCol">
                    @Html.DisplayFor(modelItem => item.DateModified)
                </td>
                <td class="indexNowrapCol">
                    <a asp-page="./Edit" asp-route-id="@item.ProjectID">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.ProjectID">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.ProjectID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>


@*@{
    var prevDisabled = !Model.Project.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Project.HasNextPage ? "disabled" : "";
}*@

@*<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Project.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   asp-route-desc="@Model.CurrentDesc"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Project.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   asp-route-desc="@Model.CurrentDesc"
   class="btn btn-default @nextDisabled">
    Next
</a>*@
@{await Html.RenderPartialAsync("TablePager", Model.tablePager);}
