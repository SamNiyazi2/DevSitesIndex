!function(e){var t={};function o(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}([function(e,t){e.exports=angular},function(e,t){function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(t){return"function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?e.exports=i=function(e){return o(e)}:e.exports=i=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":o(e)},i(t)}e.exports=i},function(e,t,o){e.exports=o(3)},function(e,t,o){"use strict";o.r(t);var i,n,r,l,s,c=o(0),a=(i=function(){function e(){}return e.getInstance=function(t,o){return void 0===o&&(o=null),e.getInstance_Original(t,o)},e.getInstance_Original=function(t,o){void 0===o&&(o=null);var i=null,n=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(n.length>0)n.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+n.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),i=n[0];else switch(t){case"timesheetApp":i={name:t,instance:c.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(i);break;case"demoSites_Index_Timesheet":i={name:t,instance:c.module("demoSites_Index_Timesheet",o)},e.ssn_devsite_angular_module.push(i);break;case"demoSites_Index":i={name:t,instance:c.module("demoSites_Index",o)},e.ssn_devsite_angular_module.push(i);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return i.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),i.getInstance(e,t)}}),d={doSetup:function(e){a.getInstance(e).factory("dataService",["$http","$q",function(e,t){var o=[];return{devSites:ko.observable(o),getDevSites:function(){var i=t.defer();return e.get("/api/demositesapi").then((function(e){c.copy(e.data,o),i.resolve()}),(function(){i.reject()})),i.promise},addDevSite:function(o){var i=t.defer();return e.post("/api/demositesapi",o).then((function(e){i.resolve(e.data)}),(function(){i.reject()})),i.promise},updateDevSite:function(o){var i=t.defer();return e.post("/api/demositesapi",o).then((function(e){i.resolve(e.data)}),(function(){i.reject()})),i.promise},insertTimeLog:function(o){var i=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){i.resolve(e.data)}),(function(e){i.reject(e)})),i.promise},getTimelog:function(o){var i=t.defer();return e.get("/api/timelogapi/get_custom/"+o).then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get timelog [20190829-1819]"})})),i.promise},updateTimeLog:function(o){var i=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){i.resolve(e.data)}),(function(e){i.reject(e)})),i.promise},getJobs:function(o){var i=t.defer(),n=0==o.job_statuses_selected.length?"nothing-201909221117":o.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+o.currentPageNo+"/"+o.recordsPerPage+"/"+o.columnName+"/"+o.desc+"/"+n).then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get jobs [20190917-0057]"})})),i.promise},getJob_Statuses:function(){var o=t.defer();return e.get("/api/job_statusAPI/").then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),o.promise},getJob:function(o){console.log("DataServices - 20190930-1907 - getJob ["+o+"]");var i=t.defer();return e.get("/api/jobapi/get_custom/"+o).then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get job [20190930-1908]"})})),i.promise}}}])}},u=((n=a.getInstance("timesheetApp")).controller("timesheetController",["$scope","$uibModal",function(e,t){e.timesheetForm_ClockOut=function(e){t.open({templateUrl:"/js/timesheet/templates/TimeLogEdit.html",controller:"TimesheetClockOutController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return e}}})},e.timesheetForm_ClockContinue=function(o){t.open({templateUrl:"/js/timesheet/templates//timesheetTemplate.html?v="+e.versionForHTMLRefresh,controller:"TimesheetContinueController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return o}}})},e.showCreateTimesheetForm=function(e){console.log(""),console.log(""),console.log("TimesheetApp - 20190930-1840 - showCreateTimesheetForm"),console.log("jobID ["+e+"]"),isNaN(e)&&(e=0),t.open({templateUrl:"/js/timesheet/templates/timesheetTemplate.html",controller:"TimesheetController",backdrop:!1,resolve:{jobId:function(){return e}}})}}]),function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetController",["$scope","$uibModalInstance","$http","$q","dataService","jobId",function(e,t,o,i,n,r){console.log("TimesheetController - 20190930-1836 - Controller top - Look for bottom!!"),console.log(r),n.getJob(r).then((function(t){console.log("TimeshetController - getJobSuccess  -  20190930-2106-A  "),console.log(t),e.editableTimeLog.job={},e.editableTimeLog.job.jobTitle=t.jobTitle,e.editableTimeLog.job.project={},e.editableTimeLog.job.project.projectTitle=t.project.projectTitle}),(function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-B "),console.log(e)})).catch((function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-C "),console.log(e)})),e.disciplineSelected={id:0,title:""},e.pageTitle="Clock-in";var l=new Date;l.setMilliseconds(0),e.timeLog={timeLogId:0,id:0,startTime:l,workDetail:"",disciplineId:"2",jobId:r},e.editableTimeLog=c.copy(e.timeLog),console.log("TimesheetController - 20190930-1836 - Controller bottom"),console.log("jobId ["+r+"]"),e.submitForm=function(){e.editableTimeLog;var o=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(o=0===e.editableTimeLog.id?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&o.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){console.log("TimesheetController - 20190921-0640 - promise > error"),console.log(e)})),t.close(),toastr.info("Clocked-in")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=i.defer();return o({method:"GET",url:"/api/DisciplineAPI"}).then((function(o){var i=[];console.log("angular - forEach - 20190920-0720-o"),c.forEach(o.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&i.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(i)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp_TimesheetController:e}}()),m=o(1),p=o.n(m),f=(r=function(){$("pre").each((function(e){$(this).hide();var t="",o=$(this).attr("title"),i="";void 0!==o?(t=" title='"+o+"' ",i=": "+o):o="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+i+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,o){var i=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=i})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),o=$(this),i=$(this).attr("title"),n="";void 0===i?i="":n=": "+i,t.is(":visible")?(o.text("Show code"+n),t.fadeOut()):(t.fadeIn(),o.text("Hide code"+n))}}))},l=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/,$((function(){!function(){$("[cmd-name]").on("click",(function(t){var o=$(this).attr("cmd-name"),i=$(this).attr("popup-name"),n=$(this).attr("jQueryObjectName"),r=$(this).attr("jQueryObjectName2");if("open-popup"===o&&($(i).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===o&&$(n).hide(),"showObject"===o&&$(n).show(),"smooth-scroll"===o&&document.querySelector(n).scrollIntoView({behavior:"smooth"}),"set-default-time"===o){var l=new Date,s=l.getFullYear()+"-"+e(l.getMonth()+1,2,"0")+"-"+e(l.getDate(),2,"0")+"T"+e(l.getHours(),2,"0")+":"+e(l.getMinutes(),2,"0")+":"+e(l.getSeconds(),2,"0");$(n).val(s)}if("set-TotalPeriod"===o){var c=new Date,a=$(n)[0].value,d=new Date(a),u=c.getTime().valueOf()-d.getTime().valueOf(),m=Math.floor(u/1e3);$(r).val(m)}}));var e=function(e,t,o){var i=e.toString();return i.length>t?i:(o.repeat(t)+i).substring(t+(i.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")}))}(),setTimeout(r,2e3)})),{fnConverDate:function e(t){if("object"!==p()(t))return t;for(var o in t)if(t.hasOwnProperty(o)){var i=t[o],n=p()(i);"string"===n&&i.match(l)?t[o]=new Date(i):"object"===n&&e(i)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:r}),g=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetContinueController",["$scope","$uibModalInstance","$http","$q","dataService","$timeout","timelogId",function(e,t,o,i,n,r,l){n.getTimelog(l).then((function(t){var o=t;f.fnConverDate(o);var i=new Date;i.setMilliseconds(0),e.timeLog=o,e.timeLog.timeLogId=0,e.timeLog.startTime=i,e.timeLog.dateModified=null,e.timeLog.totalSeconds=null,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(o.discipline.disciplineShort),e.disciplineSelected={id:o.discipline.disciplineId,title:o.discipline.disciplineShort}}),500)}),(function(e){})).catch((function(e){})),e.pageTitle="Continue / Line Item",e.feedbackToUserText="",e.feedbackToUserClassNameCase="",e.versionForHTMLRefresh="15",e.feedbackToUserClassNameSet=function(){switch(e.feedbackToUserClassNameCase){case 1:return"rounded margined info_good";case 2:return"rounded margined info_bad";default:return""}},e.submitForm=function(){e.editableTimeLog;var o=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(o=0===e.editableTimeLog.timeLogId?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&o.then((function(o){e.timeLog=c.copy(e.editableTimeLog),t.close(),toastr.info("Record added.  Reloading page..."),r((function(){location.reload()}),1e3)}),(function(t){console.log(t),toastr.error("Failed to add record. See console log."),e.feedbackToUserClassNameCase=2,e.feedbackToUserText=t.data}))},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=i.defer();return o({method:"GET",url:"api/DisciplineAPI"}).then((function(o){var i=[];c.forEach(o.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&i.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(i)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}(),h=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetClockOutController",["$scope","$uibModalInstance","$http","$q","dataService","timelogId",function(e,t,o,i,n,r){n.getTimelog(r).then((function(t){var o=t;f.fnConverDate(o),e.timeLog=o,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(o.discipline.disciplineShort),e.disciplineSelected={id:o.discipline.disciplineId,title:o.discipline.disciplineShort}}),500)}),(function(e){console.log("timesheetClockOutController - 20190922-1426"),console.log(e)})).catch((function(e){console.log("timesheetClockOutController - 20190922-1427"),console.log(e)})),e.pageTitle="Clock-out",e.submitForm=function(){e.editableTimeLog;var o=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(o=0===e.editableTimeLog.id?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&o.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){alert("System Error! Check console."),console.log(e)})),t.close(),toastr.info("Clocked-out")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=i.defer();return o({method:"GET",url:"api/DisciplineAPI"}).then((function(o){var i=[];c.forEach(o.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&i.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(i)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}();(s=a.getInstance("demoSites_Index_Timesheet",["ui.bootstrap"])).controller("utilityController",["$scope","$attrs","$location",function(e,t,o){var i=t.formName;$("[name='"+i+"']").get(0),o.absUrl().trim(),e.submitForm_2=function(e,t){},e.submitForm_1=function(e,t){t.$valid||e.preventDefault()}}]),s.directive("dropdownListDirective",(function(){return{restrict:"E",templateUrl:"/js/DropdownList/DropDownListDirective.html",controller:["$http","$q","$scope",function(e,t,o){var i=this;i.firstRun=!0,i.isValid=function(){var e=!1;o.disciplineSelected&&o.disciplineSelected.id&&($("[name='"+this.keyColumn+"']").val(o.disciplineSelected.id),e=!0);var t=$("[name='"+this.keyColumn+"']").val();if(i.firstRun){switch(i.APIUrl="NotSet_20190916_0415",i.typeAheadLabel="NotSet_20190916_0534",this.keyColumn.toLowerCase()){case"timelog.disciplineid":i.APIUrl="/api/DisciplineAPI",i.typeAheadLabel="Descipline";break;case"timelog.jobid":i.APIUrl="/api/jobapi/typeahead",i.typeAheadLabel="Job Title"}i.firstRun=!1,i.getDisciplineCurrent(t).then(i.currentDisplineLookupSuccess)}return e},i.currentDisplineLookupSuccess=function(e){e&&(e.disciplineId&&(o.disciplineSelected={id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&(o.disciplineSelected={id:e.ta_id,title:e.ta_description}))},i.getDisciplines=function(o){null===o&&(o="");var n=t.defer();return e({method:"GET",url:i.APIUrl}).then((function(e){var t=[];c.forEach(e.data,(function(e){e.disciplineId&&e.disciplineShort.toLowerCase().indexOf(o.toLowerCase())>-1&&t.push({id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&e.ta_description.toLowerCase().indexOf(o.toLowerCase())>-1&&t.push({id:e.ta_id,title:e.ta_description})})),n.resolve(t)}),(function(e){n.reject(e)})),n.promise},i.getDisciplineCurrent=function(o){if(null===o)return null;var n=t.defer();return e({method:"GET",url:i.APIUrl+"/"+o}).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise}}],controllerAs:"vm101",bindToController:!0,scope:{keyColumn:"@key",formName:"="}}}));d.doSetup("timesheetApp"),u.timesheetApp_TimesheetController,g.timesheetApp,h.timesheetApp}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,