!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";var i,o,r;!function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){var t=function(){};e.Base=t}(e.Telemetry||(e.Telemetry={}))}(r||(r={})),function(e){!function(e){var t=function(){this.ver=1,this.sampleRate=100,this.tags={}};e.Envelope=t}(e.Telemetry||(e.Telemetry={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){e[e.Verbose=0]="Verbose",e[e.Information=1]="Information",e[e.Warning=2]="Warning",e[e.Error=3]="Error",e[e.Critical=4]="Critical"}(e.SeverityLevel||(e.SeverityLevel={}))}(o||(o={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){var t=function(){function e(){}return e.newId=function(){for(var e="",t=1073741824*Math.random();t>0;){e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t%64),t=Math.floor(t/64)}return e},e}();e.UtilHelpers=t}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),void 0===(i=function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e._createLazyMethod=function(t){var n=window[e.appInsightsName];n[t]=function(){var e=arguments;n.queue?n.queue.push((function(){return n[t].apply(n,e)})):n[t].apply(n,e)}},e._defineLazyMethods=function(){var t=window[e.appInsightsName];try{t.cookie=document.cookie}catch(e){}t.queue=[];for(var n=["clearAuthenticatedUserContext","flush","setAuthenticatedUserContext","startTrackEvent","startTrackPage","stopTrackEvent","stopTrackPage","trackDependency","trackEvent","trackException","trackMetric","trackPageView","trackTrace"];n.length;)e._createLazyMethod(n.pop())},e._download=function(t){e.appInsightsInstance.config=t;var n=window[e.appInsightsName];if(n.queue||(n.queue=[]),setTimeout((function(){var e=document.createElement("script");e.src=t.url||"https://az416426.vo.msecnd.net/scripts/a/ai.0.js",document.head.appendChild(e)})),!t.disableExceptionTracking){e._createLazyMethod("_onerror");var i=window.onerror;window.onerror=function(e,t,o,r,s){var c=i&&i(e,t,o,r,s);return!0!==c&&n._onerror(e,t,o,r,s),c}}},Object.defineProperty(e,"appInsightsInstance",{get:function(){if("undefined"!=typeof window)return window[e.appInsightsName]||(window[e.appInsightsName]={downloadAndSetup:e._download,_defineLazyMethods:e._defineLazyMethods},e._defineLazyMethods()),window[e.appInsightsName]},enumerable:!0,configurable:!0}),e.appInsightsInitialized=!1,e.appInsightsName="appInsights",e}();t.AppInsights=n.appInsightsInstance}.apply(t,[n,t]))||(e.exports=i)},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=i=function(e){return n(e)}:e.exports=i=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},i(t)}e.exports=i},function(e,t,n){e.exports=n(4)},function(e,t,n){"use strict";n.r(t);var i,o,r,s,c,l=n(0),a=(i=function(){function e(){}return e.getInstance=function(t,n){return void 0===n&&(n=null),e.getInstance_Original(t,n)},e.getInstance_Original=function(t,n){void 0===n&&(n=null);var i=null,o=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(o.length>0)o.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+o.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),i=o[0];else switch(t){case"timesheetApp":i={name:t,instance:l.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(i);break;case"demoSites_Index_Timesheet":i={name:t,instance:l.module("demoSites_Index_Timesheet",n)},e.ssn_devsite_angular_module.push(i);break;case"demoSites_Index":i={name:t,instance:l.module("demoSites_Index",n)},e.ssn_devsite_angular_module.push(i);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return i.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),i.getInstance(e,t)}}),u={doSetup:function(e){a.getInstance(e).factory("dataService",["$http","$q",function(e,t){var n=[];return{devSites:ko.observable(n),getDevSites:function(){var i=t.defer();return e.get("/api/demositesapi").then((function(e){l.copy(e.data,n),i.resolve()}),(function(){i.reject()})),i.promise},addDevSite:function(n){var i=t.defer();return e.post("/api/demositesapi",n).then((function(e){i.resolve(e.data)}),(function(){i.reject()})),i.promise},updateDevSite:function(n){var i=t.defer();return e.post("/api/demositesapi",n).then((function(e){i.resolve(e.data)}),(function(){i.reject()})),i.promise},insertTimeLog:function(n){var i=t.defer();return e.post("/api/timeLogAPI",n).then((function(e){i.resolve(e.data)}),(function(e){i.reject(e)})),i.promise},getTimelog:function(n){var i=t.defer();return e.get("/api/timelogapi/get_custom/"+n).then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get timelog [20190829-1819]"})})),i.promise},updateTimeLog:function(n){var i=t.defer();return e.post("/api/timeLogAPI",n).then((function(e){i.resolve(e.data)}),(function(e){i.reject(e)})),i.promise},getJobs:function(n){var i=t.defer(),o=0==n.job_statuses_selected.length?"nothing-201909221117":n.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+n.currentPageNo+"/"+n.recordsPerPage+"/"+n.columnName+"/"+n.desc+"/"+o).then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get jobs [20190917-0057]"})})),i.promise},getJob_Statuses:function(){var n=t.defer();return e.get("/api/job_statusAPI/").then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),n.promise},getJob:function(n){console.log("DataServices - 20190930-1907 - getJob ["+n+"]");var i=t.defer();return e.get("/api/jobapi/get_custom/"+n).then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get job [20190930-1908]"})})),i.promise}}}])}},p=((o=a.getInstance("timesheetApp")).controller("timesheetController",["$scope","$uibModal",function(e,t){e.timesheetForm_ClockOut=function(e){t.open({templateUrl:"/js/timesheet/templates/TimeLogEdit.html",controller:"TimesheetClockOutController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return e}}})},e.timesheetForm_ClockContinue=function(n){t.open({templateUrl:"/js/timesheet/templates//timesheetTemplate.html?v="+e.versionForHTMLRefresh,controller:"TimesheetContinueController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return n}}})},e.showCreateTimesheetForm=function(e){isNaN(e)&&(e=0),t.open({templateUrl:"/js/timesheet/templates/timesheetTemplate.html",controller:"TimesheetController",backdrop:!1,resolve:{jobId:function(){return e}}})}}]),function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetController",["$scope","$uibModalInstance","$http","$q","dataService","jobId",function(e,t,n,i,o,r){o.getJob(r).then((function(t){e.editableTimeLog.job={},e.editableTimeLog.job.jobTitle=t.jobTitle,e.editableTimeLog.job.project={},e.editableTimeLog.job.project.projectTitle=t.project.projectTitle}),(function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-B "),console.log(e)})).catch((function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-C "),console.log(e)})),e.disciplineSelected={id:0,title:""},e.pageTitle="Clock-in";var s=new Date;s.setMilliseconds(0),e.timeLog={timeLogId:0,id:0,startTime:s,workDetail:"",disciplineId:"2",jobId:r},e.editableTimeLog=l.copy(e.timeLog),e.submitForm=function(){e.editableTimeLog;var n=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(n=0===e.editableTimeLog.id?o.insertTimeLog(e.editableTimeLog):o.updateTimeLog(e.editableTimeLog))&&n.then((function(t){e.timeLog=l.copy(e.editableTimeLog)}),(function(e){console.log("TimesheetController - 20190921-0640 - promise > error"),console.log(e)})),t.close(),toastr.info("Clocked-in")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=i.defer();return n({method:"GET",url:"/api/DisciplineAPI"}).then((function(n){var i=[];console.log("angular - forEach - 20190920-0720-o"),l.forEach(n.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&i.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(i)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp_TimesheetController:e}}()),d=n(2),f=n.n(d),m=(r=function(){$("pre").each((function(e){$(this).hide();var t="",n=$(this).attr("title"),i="";void 0!==n?(t=" title='"+n+"' ",i=": "+n):n="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+i+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,n){var i=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=i})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),n=$(this),i=$(this).attr("title"),o="";void 0===i?i="":o=": "+i,t.is(":visible")?(n.text("Show code"+o),t.fadeOut()):(t.fadeIn(),n.text("Hide code"+o))}}))},s=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/,$((function(){!function(){$("[cmd-name]").on("click",(function(t){var n=$(this).attr("cmd-name"),i=$(this).attr("popup-name"),o=$(this).attr("jQueryObjectName"),r=$(this).attr("jQueryObjectName2");if("open-popup"===n&&($(i).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===n&&$(o).hide(),"showObject"===n&&$(o).show(),"smooth-scroll"===n&&document.querySelector(o).scrollIntoView({behavior:"smooth"}),"set-default-time"===n){var s=new Date,c=s.getFullYear()+"-"+e(s.getMonth()+1,2,"0")+"-"+e(s.getDate(),2,"0")+"T"+e(s.getHours(),2,"0")+":"+e(s.getMinutes(),2,"0")+":"+e(s.getSeconds(),2,"0");$(o).val(c)}if("set-TotalPeriod"===n){var l=new Date,a=$(o)[0].value,u=new Date(a),p=l.getTime().valueOf()-u.getTime().valueOf(),d=Math.floor(p/1e3);$(r).val(d)}}));var e=function(e,t,n){var i=e.toString();return i.length>t?i:(n.repeat(t)+i).substring(t+(i.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")}))}(),setTimeout(r,2e3)})),{fnConverDate:function e(t){if("object"!==f()(t))return t;for(var n in t)if(t.hasOwnProperty(n)){var i=t[n],o=f()(i);"string"===o&&i.match(s)?t[n]=new Date(i):"object"===o&&e(i)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:r}),g=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetContinueController",["$scope","$uibModalInstance","$http","$q","dataService","$timeout","timelogId",function(e,t,n,i,o,r,s){o.getTimelog(s).then((function(t){var n=t;m.fnConverDate(n);var i=new Date;i.setMilliseconds(0),e.timeLog=n,e.timeLog.timeLogId=0,e.timeLog.startTime=i,e.timeLog.dateModified=null,e.timeLog.totalSeconds=null,e.editableTimeLog=l.copy(e.timeLog),setTimeout((function(){e.getDisciplines(n.discipline.disciplineShort),e.disciplineSelected={id:n.discipline.disciplineId,title:n.discipline.disciplineShort}}),500)}),(function(e){})).catch((function(e){})),e.pageTitle="Continue / Line Item",e.feedbackToUserText="",e.feedbackToUserClassNameCase="",e.versionForHTMLRefresh="15",e.feedbackToUserClassNameSet=function(){switch(e.feedbackToUserClassNameCase){case 1:return"rounded margined info_good";case 2:return"rounded margined info_bad";default:return""}},e.submitForm=function(){e.editableTimeLog;var n=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(n=0===e.editableTimeLog.timeLogId?o.insertTimeLog(e.editableTimeLog):o.updateTimeLog(e.editableTimeLog))&&n.then((function(n){e.timeLog=l.copy(e.editableTimeLog),t.close(),toastr.info("Record added.  Reloading page..."),r((function(){location.reload()}),1e3)}),(function(t){console.log(t),toastr.error("Failed to add record. See console log."),e.feedbackToUserClassNameCase=2,e.feedbackToUserText=t.data}))},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=i.defer();return n({method:"GET",url:"api/DisciplineAPI"}).then((function(n){var i=[];l.forEach(n.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&i.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(i)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}(),h=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetClockOutController",["$scope","$uibModalInstance","$http","$q","dataService","timelogId",function(e,t,n,i,o,r){o.getTimelog(r).then((function(t){var n=t;m.fnConverDate(n),e.timeLog=n,e.editableTimeLog=l.copy(e.timeLog),setTimeout((function(){e.getDisciplines(n.discipline.disciplineShort),e.disciplineSelected={id:n.discipline.disciplineId,title:n.discipline.disciplineShort}}),500)}),(function(e){console.log("timesheetClockOutController - 20190922-1426"),console.log(e)})).catch((function(e){console.log("timesheetClockOutController - 20190922-1427"),console.log(e)})),e.pageTitle="Clock-out",e.submitForm=function(){e.editableTimeLog;var n=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(n=0===e.editableTimeLog.id?o.insertTimeLog(e.editableTimeLog):o.updateTimeLog(e.editableTimeLog))&&n.then((function(t){e.timeLog=l.copy(e.editableTimeLog)}),(function(e){alert("System Error! Check console."),console.log(e)})),t.close(),toastr.info("Clocked-out")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=i.defer();return n({method:"GET",url:"api/DisciplineAPI"}).then((function(n){var i=[];l.forEach(n.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&i.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(i)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}(),X=((c=a.getInstance("demoSites_Index_Timesheet",["ui.bootstrap"])).controller("utilityController",["$scope","$attrs","$location",function(e,t,n){var i=t.formName;$("[name='"+i+"']").get(0),n.absUrl().trim(),e.submitForm_2=function(e,t){},e.submitForm_1=function(e,t){t.$valid||e.preventDefault()}}]),c.directive("dropdownListDirective",(function(){return{restrict:"E",templateUrl:"/js/DropdownList/DropDownListDirective.html",controller:["$http","$q","$scope",function(e,t,n){var i=this;i.firstRun=!0,i.isValid=function(){var e=!1;n.disciplineSelected&&n.disciplineSelected.id&&($("[name='"+this.keyColumn+"']").val(n.disciplineSelected.id),e=!0);var t=$("[name='"+this.keyColumn+"']").val();if(i.firstRun){switch(i.APIUrl="NotSet_20190916_0415",i.typeAheadLabel="NotSet_20190916_0534",this.keyColumn.toLowerCase()){case"timelog.disciplineid":i.APIUrl="/api/DisciplineAPI",i.typeAheadLabel="Descipline";break;case"timelog.jobid":i.APIUrl="/api/jobapi/typeahead",i.typeAheadLabel="Job Title"}i.firstRun=!1,i.getDisciplineCurrent(t).then(i.currentDisplineLookupSuccess)}return e},i.currentDisplineLookupSuccess=function(e){e&&(e.disciplineId&&(n.disciplineSelected={id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&(n.disciplineSelected={id:e.ta_id,title:e.ta_description}))},i.getDisciplines=function(n){null===n&&(n="");var o=t.defer();return e({method:"GET",url:i.APIUrl}).then((function(e){var t=[];l.forEach(e.data,(function(e){e.disciplineId&&e.disciplineShort.toLowerCase().indexOf(n.toLowerCase())>-1&&t.push({id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&e.ta_description.toLowerCase().indexOf(n.toLowerCase())>-1&&t.push({id:e.ta_id,title:e.ta_description})})),o.resolve(t)}),(function(e){o.reject(e)})),o.promise},i.getDisciplineCurrent=function(n){if(null===n)return null;var o=t.defer();return e({method:"GET",url:i.APIUrl+"/"+n}).then((function(e){o.resolve(e.data)}),(function(e){o.reject(e)})),o.promise}}],controllerAs:"vm101",bindToController:!0,scope:{keyColumn:"@key",formName:"="}}})),{instrumentationKey:""}),v=n(1),b=function(){console.log("ApplicationInsights_monitor - 20191001-0951 - 001 - top instance");var e={instrumentationKey:X.instrumentationKey};return{doSetup:function(){v.AppInsights.config||(console.log("ApplicationInsights_Monitor - doSetup - config - 20191001-1029-AAA XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("ApplicationInsights_Monitor - doSetup - config - 20191001-1029-AAA XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("ApplicationInsights_Monitor - doSetup - config - 20191001-1029-AAA XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),e.instrumentationKey?(console.log(e),v.AppInsights.downloadAndSetup(e)):console.log("instrumentationKey is not set  -  20191011-1654"))},doTest:function(){v.AppInsights.trackPageView("FirstPage-20191001-1015",null,{prop1:"prop1",prop2:"prop2"},{measurement1:1},123),v.AppInsights.trackEvent("TestEvent-20191001-1016",{prop1:"prop1",prop2:"prop2"},{measurement1:1})},logPageView:function(e,t,n,i,o){v.AppInsights.trackPageView(e,t,n)},logEvent:function(e,t,n){v.AppInsights.trackEvent(e,t,n)}}}();console.log("ApplicationInsights_monitor - 20191001-0951 - ZZZ - bottom file OOOOOOOOOOOOOOOOOOOOOOOOOOOOO "),u.doSetup("timesheetApp"),p.timesheetApp_TimesheetController,g.timesheetApp,h.timesheetApp,console.log("Timesheet_main - 20191001-1110"),b.doSetup(),b.logEvent("Timesheet_main",{SourceCode:"20191001-1112-C",Message:"Loading timesheet_main"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,