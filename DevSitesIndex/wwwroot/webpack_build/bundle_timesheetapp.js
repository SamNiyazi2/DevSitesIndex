!function(e){var t={};function i(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(o,n,function(t){return e[t]}.bind(null,n));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=2)}([function(e,t){e.exports=angular},function(e,t){function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(t){return"function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?e.exports=o=function(e){return i(e)}:e.exports=o=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":i(e)},o(t)}e.exports=o},function(e,t,i){e.exports=i(3)},function(e,t,i){"use strict";i.r(t);var o,n,r,l,s,c=i(0),a=(o=function(){function e(){}return e.getInstance=function(t,i){return void 0===i&&(i=null),e.getInstance_Original(t,i)},e.getInstance_Original=function(t,i){void 0===i&&(i=null);var o=null,n=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(n.length>0)n.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+n.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),o=n[0];else switch(t){case"timesheetApp":o={name:t,instance:c.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(o);break;case"demoSites_Index_Timesheet":o={name:t,instance:c.module("demoSites_Index_Timesheet",i)},e.ssn_devsite_angular_module.push(o);break;case"demoSites_Index":o={name:t,instance:c.module("demoSites_Index",i)},e.ssn_devsite_angular_module.push(o);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return o.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),o.getInstance(e,t)}}),d={doSetup:function(e){a.getInstance(e).factory("dataService",["$http","$q",function(e,t){var i=[];return{devSites:ko.observable(i),getDevSites:function(){var o=t.defer();return e.get("/api/demositesapi").then((function(e){c.copy(e.data,i),o.resolve()}),(function(){o.reject()})),o.promise},addDevSite:function(i){var o=t.defer();return e.post("/api/demositesapi",i).then((function(e){o.resolve(e.data)}),(function(){o.reject()})),o.promise},updateDevSite:function(i){var o=t.defer();return e.post("/api/demositesapi",i).then((function(e){o.resolve(e.data)}),(function(){o.reject()})),o.promise},insertTimeLog:function(i){var o=t.defer();return e.post("/api/timeLogAPI",i).then((function(e){o.resolve(e.data)}),(function(e){o.reject(e)})),o.promise},getTimelog:function(i){var o=t.defer();return e.get("/api/timelogapi/get_custom/"+i).then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get timelog [20190829-1819]"})})),o.promise},updateTimeLog:function(i){var o=t.defer();return e.post("/api/timeLogAPI",i).then((function(e){o.resolve(e.data)}),(function(e){o.reject(e)})),o.promise},getJobs:function(i){var o=t.defer(),n=0==i.job_statuses_selected.length?"nothing-201909221117":i.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+i.currentPageNo+"/"+i.recordsPerPage+"/"+i.columnName+"/"+i.desc+"/"+n).then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get jobs [20190917-0057]"})})),o.promise},getJob_Statuses:function(){var i=t.defer();return e.get("/api/job_statusAPI/").then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),i.promise}}}])}},u=((n=a.getInstance("timesheetApp")).controller("timesheetController",["$scope","$uibModal",function(e,t){e.timesheetForm_ClockOut=function(e){t.open({templateUrl:"/js/timesheet/templates/TimeLogEdit.html",controller:"TimesheetClockOutController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return e}}})},e.timesheetForm_ClockContinue=function(e){t.open({templateUrl:"/js/timesheet/templates//timesheetTemplate.html",controller:"TimesheetContinueController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return e}}})},e.showCreateTimesheetForm=function(e){console.log("TimesheetApp - showCreateTimesheetForm - 20190921-0632"),isNaN(e)&&(e=0),t.open({templateUrl:"/js/timesheet/templates/timesheetTemplate.html",controller:"TimesheetController",backdrop:!1,resolve:{jobId:function(){return e}}})}}]),function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetController",["$scope","$uibModalInstance","$http","$q, dataService",function(e,t,i,o,n,r){e.disciplineSelected={id:0,title:""},e.pageTitle="Clock-in";var l=new Date;l.setMilliseconds(0),e.timeLog={timeLogId:0,id:0,startTime:l,workDetail:"",disciplineId:"2",jobId:r},e.editableTimeLog=c.copy(e.timeLog),e.submitForm=function(){e.editableTimeLog;var i=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(i=0===e.editableTimeLog.id?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&i.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){console.log("TimesheetController - 20190921-0640 - promise > error"),console.log(e)})),t.close(),toastr.info("Clocked-in")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=o.defer();return i({method:"GET",url:"/api/DisciplineAPI"}).then((function(i){var o=[];console.log("angular - forEach - 20190920-0720-o"),c.forEach(i.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&o.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(o)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp_TimesheetController:e}}()),p=i(1),m=i.n(p),f=(r=function(){$("pre").each((function(e){$(this).hide();var t="",i=$(this).attr("title"),o="";void 0!==i?(t=" title='"+i+"' ",o=": "+i):i="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+o+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,i){var o=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=o})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),i=$(this),o=$(this).attr("title"),n="";void 0===o?o="":n=": "+o,t.is(":visible")?(i.text("Show code"+n),t.fadeOut()):(t.fadeIn(),i.text("Hide code"+n))}}))},l=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/,$((function(){!function(){$("[cmd-name]").on("click",(function(t){var i=$(this).attr("cmd-name"),o=$(this).attr("popup-name"),n=$(this).attr("jQueryObjectName"),r=$(this).attr("jQueryObjectName2");if("open-popup"===i&&($(o).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===i&&$(n).hide(),"showObject"===i&&$(n).show(),"smooth-scroll"===i&&document.querySelector(n).scrollIntoView({behavior:"smooth"}),"set-default-time"===i){var l=new Date,s=l.getFullYear()+"-"+e(l.getMonth()+1,2,"0")+"-"+e(l.getDate(),2,"0")+"T"+e(l.getHours(),2,"0")+":"+e(l.getMinutes(),2,"0")+":"+e(l.getSeconds(),2,"0");$(n).val(s)}if("set-TotalPeriod"===i){var c=new Date,a=$(n)[0].value,d=new Date(a),u=c.getTime().valueOf()-d.getTime().valueOf(),p=Math.floor(u/1e3);$(r).val(p)}}));var e=function(e,t,i){var o=e.toString();return o.length>t?o:(i.repeat(t)+o).substring(t+(o.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")}))}(),setTimeout(r,2e3)})),{fnConverDate:function e(t){if("object"!==m()(t))return t;for(var i in t)if(t.hasOwnProperty(i)){var o=t[i],n=m()(o);"string"===n&&o.match(l)?t[i]=new Date(o):"object"===n&&e(o)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:r}),g=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetContinueController",["$scope","$uibModalInstance","$http","$q","dataService","$timeout","timelogId",function(e,t,i,o,n,r,l){n.getTimelog(l).then((function(t){var i=t;f.fnConverDate(i);var o=new Date;o.setMilliseconds(0),e.timeLog=i,e.timeLog.timeLogId=0,e.timeLog.startTime=o,e.timeLog.dateModified=null,e.timeLog.totalSeconds=null,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(i.discipline.disciplineShort),e.disciplineSelected={id:i.discipline.disciplineId,title:i.discipline.disciplineShort}}),500)}),(function(e){})).catch((function(e){})),e.pageTitle="Continue / Line Item",e.submitForm=function(){e.editableTimeLog;var i=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(i=0===e.editableTimeLog.timeLogId?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&i.then((function(i){e.timeLog=c.copy(e.editableTimeLog),t.close(),toastr.info("Record added.  Reloading page..."),r((function(){location.reload()}),1e3)}),(function(e){console.log(e),t.close(),toastr.error("Failed to add record. See console log.")}))},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=o.defer();return i({method:"GET",url:"api/DisciplineAPI"}).then((function(i){var o=[];c.forEach(i.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&o.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(o)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}(),h=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetClockOutController",["$scope","$uibModalInstance","$http","$q","dataService","timelogId",function(e,t,i,o,n,r){n.getTimelog(r).then((function(t){var i=t;f.fnConverDate(i),e.timeLog=i,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(i.discipline.disciplineShort),e.disciplineSelected={id:i.discipline.disciplineId,title:i.discipline.disciplineShort}}),500)}),(function(e){console.log("timesheetClockOutController - 20190922-1426"),console.log(e)})).catch((function(e){console.log("timesheetClockOutController - 20190922-1427"),console.log(e)})),e.pageTitle="Clock-out",e.submitForm=function(){e.editableTimeLog;var i=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(i=0===e.editableTimeLog.id?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&i.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){alert("System Error! Check console."),console.log(e)})),t.close(),toastr.info("Clocked-out")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=o.defer();return i({method:"GET",url:"api/DisciplineAPI"}).then((function(i){var o=[];c.forEach(i.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&o.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(o)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}();(s=a.getInstance("demoSites_Index_Timesheet",["ui.bootstrap"])).controller("utilityController",["$scope","$attrs","$location",function(e,t,i){var o=t.formName;$("[name='"+o+"']").get(0),i.absUrl().trim(),e.submitForm_2=function(e,t){},e.submitForm_1=function(e,t){t.$valid||e.preventDefault()}}]),s.directive("dropdownListDirective",(function(){return{restrict:"E",templateUrl:"/js/DropdownList/DropDownListDirective.html",controller:["$http","$q","$scope",function(e,t,i){var o=this;o.firstRun=!0,o.isValid=function(){var e=!1;i.disciplineSelected&&i.disciplineSelected.id&&($("[name='"+this.keyColumn+"']").val(i.disciplineSelected.id),e=!0);var t=$("[name='"+this.keyColumn+"']").val();if(o.firstRun){switch(o.APIUrl="NotSet_20190916_0415",o.typeAheadLabel="NotSet_20190916_0534",this.keyColumn.toLowerCase()){case"timelog.disciplineid":o.APIUrl="/api/DisciplineAPI",o.typeAheadLabel="Descipline";break;case"timelog.jobid":o.APIUrl="/api/jobapi/typeahead",o.typeAheadLabel="Job Title"}o.firstRun=!1,o.getDisciplineCurrent(t).then(o.currentDisplineLookupSuccess)}return e},o.currentDisplineLookupSuccess=function(e){e&&(e.disciplineId&&(i.disciplineSelected={id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&(i.disciplineSelected={id:e.ta_id,title:e.ta_description}))},o.getDisciplines=function(i){null===i&&(i="");var n=t.defer();return e({method:"GET",url:o.APIUrl}).then((function(e){var t=[];c.forEach(e.data,(function(e){e.disciplineId&&e.disciplineShort.toLowerCase().indexOf(i.toLowerCase())>-1&&t.push({id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&e.ta_description.toLowerCase().indexOf(i.toLowerCase())>-1&&t.push({id:e.ta_id,title:e.ta_description})})),n.resolve(t)}),(function(e){n.reject(e)})),n.promise},o.getDisciplineCurrent=function(i){if(null===i)return null;var n=t.defer();return e({method:"GET",url:o.APIUrl+"/"+i}).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise}}],controllerAs:"vm101",bindToController:!0,scope:{keyColumn:"@key",formName:"="}}}));d.doSetup("timesheetApp"),u.timesheetApp_TimesheetController,g.timesheetApp,h.timesheetApp}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYW5ndWxhclwiIiwid2VicGFjazovLy9DOi9TYW1zL0RldlNpdGVzSW5kZXgvRGV2U2l0ZXNJbmRleC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vZ2xvYmFscy50cyIsIndlYnBhY2s6Ly8vLi9UaW1lc2hlZXQvVGltZXNoZWV0QXBwLnRzIiwid2VicGFjazovLy8uL3NpdGUudHMiLCJ3ZWJwYWNrOi8vLy4vRHJvcGRvd25MaXN0L0Ryb3Bkb3duTGlzdERpcmVjdGl2ZS50cyIsIndlYnBhY2s6Ly8vLi9EYXRhU2VydmljZXMudHMiLCJ3ZWJwYWNrOi8vLy4vVGltZXNoZWV0L1RpbWVzaGVldENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vVGltZXNoZWV0L3RpbWVzaGVldGNvbnRpbnVlY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9UaW1lc2hlZXQvdGltZXNoZWV0Y2xvY2tvdXRjb250cm9sbGVyLnRzIiwid2VicGFjazovLy8uL1RpbWVzaGVldC9UaW1lc2hlZXRfbWFpbi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFuZ3VsYXIiLCJfdHlwZW9mMiIsIm9iaiIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfdHlwZW9mIiwidGltZXNoZWV0QXBwIiwicHJlZml4UHJlV2l0aFNob3dIaWRlQW5jaG9yIiwiaXNvODYwMVJlZ0V4IiwiZG93bmRvd25MaXN0X2FuZ3VsYXJfbW9kdWxlIiwiZ2xvYmFsc19pbnN0YW5jZSIsImdldEluc3RhbmNlIiwiYXBwbGljYXRpb25OYW1lIiwiYXJncyIsIlNTTl9HbG9iYWxzIiwiZ2V0SW5zdGFuY2VfT3JpZ2luYWwiLCJhbmd1bGFyQXBwIiwic2VsZWN0ZWQiLCJzc25fZGV2c2l0ZV9hbmd1bGFyX21vZHVsZSIsImZpbHRlciIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJpbnN0YW5jZSIsInB1c2giLCJkYXRhU2VydmljZV9pbnN0YW5jZSIsImRvU2V0dXAiLCJjdXJyZW50QXBwbGljYXRpb24iLCJmYWN0b3J5IiwiJGh0dHAiLCIkcSIsIl9kZXZTaXRlcyIsImRldlNpdGVzIiwia28iLCJvYnNlcnZhYmxlIiwiZ2V0RGV2U2l0ZXMiLCJkZWZlcnJlZCIsImRlZmVyIiwidGhlbiIsInJlc3VsdCIsImRhdGEiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsImFkZERldlNpdGUiLCJkZXZTaXRlIiwicG9zdCIsInVwZGF0ZURldlNpdGUiLCJpbnNlcnRUaW1lTG9nIiwidGltZUxvZyIsImVycm9yIiwiZ2V0VGltZWxvZyIsImlkIiwiZXJyb3JNZXNzYWdlIiwiRXJyb3IiLCJ1cGRhdGVUaW1lTG9nIiwiZ2V0Sm9icyIsImNvbHVtbkJhZyIsImpvYl9zdGF0dXNlc19zZWxlY3RlZCIsImpvaW4iLCJjdXJyZW50UGFnZU5vIiwicmVjb3Jkc1BlclBhZ2UiLCJjb2x1bW5OYW1lIiwiZGVzYyIsImdldEpvYl9TdGF0dXNlcyIsInRpbWVzaGVldENvbnRyb2xsZXJfaW5zdGFuY2UiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJHVpYk1vZGFsIiwidGltZXNoZWV0Rm9ybV9DbG9ja091dCIsIm9wZW4iLCJ0ZW1wbGF0ZVVybCIsIndpbmRvd0NsYXNzIiwic2l6ZSIsImJhY2tkcm9wIiwidGltZWxvZ0lkIiwidGltZXNoZWV0Rm9ybV9DbG9ja0NvbnRpbnVlIiwic2hvd0NyZWF0ZVRpbWVzaGVldEZvcm0iLCJqb2JJRCIsImlzTmFOIiwiam9iSWQiLCIkdWliTW9kYWxJbnN0YW5jZSIsImRhdGFTZXJ2aWNlIiwiZGlzY2lwbGluZVNlbGVjdGVkIiwidGl0bGUiLCJwYWdlVGl0bGUiLCJ0aW1lTm93IiwiRGF0ZSIsInNldE1pbGxpc2Vjb25kcyIsInRpbWVMb2dJZCIsInN0YXJ0VGltZSIsIndvcmtEZXRhaWwiLCJkaXNjaXBsaW5lSWQiLCJlZGl0YWJsZVRpbWVMb2ciLCJzdWJtaXRGb3JtIiwiY2xvc2UiLCJ0b2FzdHIiLCJpbmZvIiwiY2FuY2VsRm9ybSIsImRpc21pc3MiLCJnZXREaXNjaXBsaW5lcyIsImxvb2t1cFZhbHVlIiwibWV0aG9kIiwidXJsIiwicmVzcG9uc2UiLCJhZGRyZXNzZXMiLCJpdGVtIiwiZGlzY2lwbGluZVNob3J0IiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwidGltZXNoZWV0QXBwX1RpbWVzaGVldENvbnRyb2xsZXIiLCJzaXRlX2luc3RhbmNlIiwiJCIsImVhY2giLCJhYSIsInRoaXMiLCJoaWRlIiwidGl0bGVBdHRyaWIiLCJfdGl0bGUiLCJhdHRyIiwiX3RpdGxlX2NhcHRpb24iLCJ1bmRlZmluZWQiLCJpbnNlcnRCZWZvcmUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiYSIsImN1cnJlbnRJbmRleCIsImxpc3RPYmoiLCJiIiwiaW5uZXJIVE1MIiwicmVwbGFjZSIsIm9uIiwiZSIsIl9wcmUiLCJwYXJlbnQiLCJuZXh0IiwiX2xpbmsiLCJpcyIsInRleHQiLCJmYWRlT3V0IiwiZmFkZUluIiwiY21kTmFtZSIsInBvcHVwTmFtZSIsImpRdWVyeU9iamVjdE5hbWUiLCJqUXVlcnlPYmplY3ROYW1lMiIsIm1vZGFsIiwia2V5Ym9hcmQiLCJsb2FkIiwic2hvdyIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiY2QiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJ2YWwiLCJkMTEiLCJzZWxlY3RlZERhdGUiLCJkMTIiLCJkZWx0YV8xIiwiZ2V0VGltZSIsInZhbHVlT2YiLCJkZWx0YV8yIiwiTWF0aCIsImZsb29yIiwic3RyMSIsImxlbiIsInN0ciIsInRvU3RyaW5nIiwicmVwZWF0Iiwic3Vic3RyaW5nIiwid2luZG93Iiwic2Nyb2xsVG9wIiwic2V0RGVmYXVsdHMiLCJzZXRUaW1lb3V0IiwiZm5Db252ZXJEYXRlIiwiaW5wdXQiLCJ0eXBlIiwibWF0Y2giLCJzaG93Q29sbGFwc2VkRGl2cyIsInRyaWdnZXIiLCJ0aW1lc2hlZXRDb250aW51ZUNvbnRyb2xsZXJfaW5zdGFuY2UiLCIkdGltZW91dCIsImRhdGEyIiwiZGF0ZU1vZGlmaWVkIiwidG90YWxTZWNvbmRzIiwiZGlzY2lwbGluZSIsImxvY2F0aW9uIiwicmVsb2FkIiwidGltZXNoZWV0Q2xvY2tvdXRDb250cm9sbGVyX2luc3RhbmNlIiwiYWxlcnQiLCIkYXR0cnMiLCIkbG9jYXRpb24iLCJmb3JtTmFtZSIsImFic1VybCIsInRyaW0iLCJzdWJtaXRGb3JtXzIiLCJldmVudCIsImZvcm0iLCJzdWJtaXRGb3JtXzEiLCIkdmFsaWQiLCJwcmV2ZW50RGVmYXVsdCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0Iiwidm0iLCJmaXJzdFJ1biIsImlzVmFsaWQiLCJfaXNWYWxpZCIsImtleUNvbHVtbiIsImN1cnJlbnRWYWx1ZSIsIkFQSVVybCIsInR5cGVBaGVhZExhYmVsIiwiZ2V0RGlzY2lwbGluZUN1cnJlbnQiLCJjdXJyZW50RGlzcGxpbmVMb29rdXBTdWNjZXNzIiwidGFfaWQiLCJ0YV9kZXNjcmlwdGlvbiIsImxvb2t1cElEIiwiY29udHJvbGxlckFzIiwiYmluZFRvQ29udHJvbGxlciIsInNjb3BlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLGdCQ2xGckRoQyxFQUFPRCxRQUFVa0MsUyxjQ0FqQixTQUFTQyxFQUFTQyxHQUE0VCxPQUExT0QsRUFBckQsbUJBQVhsQixRQUFvRCxpQkFBcEJBLE9BQU9vQixTQUFvQyxTQUFrQkQsR0FBTyxjQUFjQSxHQUE0QixTQUFrQkEsR0FBTyxPQUFPQSxHQUF5QixtQkFBWG5CLFFBQXlCbUIsRUFBSUUsY0FBZ0JyQixRQUFVbUIsSUFBUW5CLE9BQU9hLFVBQVksZ0JBQWtCTSxJQUEwQkEsR0FFOVYsU0FBU0csRUFBUUgsR0FXZixNQVZzQixtQkFBWG5CLFFBQXVELFdBQTlCa0IsRUFBU2xCLE9BQU9vQixVQUNsRHBDLEVBQU9ELFFBQVV1QyxFQUFVLFNBQWlCSCxHQUMxQyxPQUFPRCxFQUFTQyxJQUdsQm5DLEVBQU9ELFFBQVV1QyxFQUFVLFNBQWlCSCxHQUMxQyxPQUFPQSxHQUF5QixtQkFBWG5CLFFBQXlCbUIsRUFBSUUsY0FBZ0JyQixRQUFVbUIsSUFBUW5CLE9BQU9hLFVBQVksU0FBV0ssRUFBU0MsSUFJeEhHLEVBQVFILEdBR2pCbkMsRUFBT0QsUUFBVXVDLEcsd0VDSWIsRUNKSUMsRUNpSUFDLEVBd0dBQyxFQ3BPQUMsRSxPSEpKQyxHQUdBLDJCQXNJQSxPQW5Ia0IsRUFBQUMsWUFBZCxTQUEwQkMsRUFBeUJDLEdBa0IvQyxZQWxCK0MsSUFBQUEsTUFBQSxNQWtCeENDLEVBQVlDLHFCQUFxQkgsRUFBaUJDLElBYy9DLEVBQUFFLHFCQUFkLFNBQW1DSCxFQUF5QkMsUUFBQSxJQUFBQSxNQUFBLE1BR3hELElBQUlHLEVBQTBCLEtBRTFCQyxFQUFZSCxFQUFZSSwyQkFBNEJDLFFBQU8sU0FBQ3JDLEdBQW1CLE9BQUFBLEVBQUVQLE9BQUYsS0FJbkYsR0FBSTBDLEVBQVNHLE9BQVMsRUFFZEgsRUFBU0csT0FBUyxJQUVsQkMsUUFBUUMsSUFBSSxnREFDWkQsUUFBUUMsSUFBSSxnREFDWkQsUUFBUUMsSUFBSSxnREFDWkQsUUFBUUMsSUFBSSxnREFFWkQsUUFBUUMsSUFBSSxzREFBd0RWLEVBQWtCLHNCQUF3QkssRUFBU0csT0FBUyxLQUVoSUMsUUFBUUMsSUFBSSxnREFDWkQsUUFBUUMsSUFBSSxnREFDWkQsUUFBUUMsSUFBSSxnREFDWkQsUUFBUUMsSUFBSSxpREFHaEJOLEVBQWFDLEVBQVMsUUFJdEIsT0FBUUwsR0FFSixJQUFLLGVBRURJLEVBQWEsQ0FDVHpDLEtBQU1xQyxFQUNOVyxTQUFVLFNBQWUsZUFBZ0IsQ0FBQyxVQUFXLGtCQUd6RFQsRUFBWUksMkJBQTJCTSxLQUFLUixHQUU1QyxNQUVKLElBQUssNEJBRURBLEVBQWEsQ0FDVHpDLEtBQU1xQyxFQUNOVyxTQUFVLFNBQWUsNEJBQTZCVixJQUcxREMsRUFBWUksMkJBQTJCTSxLQUFLUixHQUU1QyxNQUdKLElBQUssa0JBRURBLEVBQWEsQ0FDVHpDLEtBQU1xQyxFQUNOVyxTQUFVLFNBQWUsa0JBQW1CVixJQUdoREMsRUFBWUksMkJBQTJCTSxLQUFLUixHQUU1QyxNQUVKLFFBRUlLLFFBQVFDLElBQUksdURBQXlEVixFQUFrQixpQ0FXbkcsT0FBT0ksRUFBV08sVUEvSFAsRUFBQUwsMkJBQTRDLEdBbUkvRCxFQXRJQSxHQWtQTyxDQUVIUCxZQVRKLFNBQXFCQyxFQUF5QkMsR0FFMUMsWUFGMEMsSUFBQUEsTUFBQSxNQUVuQ0MsRUFBWUgsWUFBWUMsRUFBaUJDLE1JL09wRFksRUEwTU8sQ0FFSEMsUUF6TVUsU0FBVUMsR0FHYSxFQUF5QmhCLFlBQVlnQixHQUczQ0MsUUFBUSxjQUFlLENBQUMsUUFBUyxLQUFNLFNBQVVDLEVBQU9DLEdBRS9FLElBQUlDLEVBQVksR0E0S2hCLE1BQU8sQ0FFSEMsU0FBVUMsR0FBR0MsV0FBV0gsR0FDeEJJLFlBN0tlLFdBRWYsSUFBSUMsRUFBV04sRUFBR08sUUFhbEIsT0FWQVIsRUFBTWhELElBQUkscUJBQ0x5RCxNQUFLLFNBQVVDLEdBRVosT0FBYUEsRUFBT0MsS0FBTVQsR0FDMUJLLEVBQVNLLGFBRVQsV0FDSUwsRUFBU00sWUFHZE4sRUFBU08sU0ErSmhCQyxXQXRJYyxTQUFVQyxHQUV4QixJQUFJVCxFQUFXTixFQUFHTyxRQVdsQixPQVRBUixFQUFNaUIsS0FBSyxvQkFBcUJELEdBQzNCUCxNQUFLLFNBQVVDLEdBRVpILEVBQVNLLFFBQVFGLEVBQU9DLFNBRXhCLFdBQ0lKLEVBQVNNLFlBR2ROLEVBQVNPLFNBMkhoQkksY0FySGlCLFNBQVVGLEdBRzNCLElBQUlULEVBQVdOLEVBQUdPLFFBY2xCLE9BVEFSLEVBQU1pQixLQUFLLG9CQUFxQkQsR0FDM0JQLE1BQUssU0FBVUMsR0FFWkgsRUFBU0ssUUFBUUYsRUFBT0MsU0FFeEIsV0FDSUosRUFBU00sWUFHZE4sRUFBU08sU0FzR2hCSyxjQS9GaUIsU0FBVUMsR0FFM0IsSUFBSWIsRUFBV04sRUFBR08sUUFXbEIsT0FUQVIsRUFBTWlCLEtBQUssa0JBQW1CRyxHQUN6QlgsTUFBSyxTQUFVQyxHQUVaSCxFQUFTSyxRQUFRRixFQUFPQyxTQUV4QixTQUFVVSxHQUNOZCxFQUFTTSxPQUFPUSxNQUdyQmQsRUFBU08sU0FtRmhCUSxXQTlKYyxTQUFVQyxHQUV4QixJQUFJaEIsRUFBV04sRUFBR08sUUFhbEIsT0FUQVIsRUFBTWhELElBQUksOEJBQWdDdUUsR0FDckNkLE1BQUssU0FBVUMsR0FFWkgsRUFBU0ssUUFBUUYsRUFBT0MsU0FFeEIsU0FBVWEsR0FDTmpCLEVBQVNNLE9BQU8sQ0FBRVksTUFBTyxrREFHOUJsQixFQUFTTyxTQWdKaEJZLGNBOUVzQixTQUFVTixHQUdoQyxJQUFJYixFQUFXTixFQUFHTyxRQVlsQixPQVZBUixFQUFNaUIsS0FBSyxrQkFBbUJHLEdBQ3pCWCxNQUFLLFNBQVVDLEdBRVpILEVBQVNLLFFBQVFGLEVBQU9DLFNBRXhCLFNBQVVVLEdBRU5kLEVBQVNNLE9BQU9RLE1BR3JCZCxFQUFTTyxTQWdFaEJhLFFBckRXLFNBQVVDLEdBRXJCLElBQUlyQixFQUFXTixFQUFHTyxRQUlkcUIsRUFBb0UsR0FBMUNELEVBQVVDLHNCQUFzQnRDLE9BQWUsdUJBQXlCcUMsRUFBVUMsc0JBQXNCQyxLQUFLLEtBWTNJLE9BVEE5QixFQUFNaEQsSUFBSSxvQkFBc0I0RSxFQUFVRyxjQUFnQixJQUFNSCxFQUFVSSxlQUFpQixJQUFNSixFQUFVSyxXQUFhLElBQU1MLEVBQVVNLEtBQU8sSUFBTUwsR0FDaEpwQixNQUFLLFNBQVVDLEdBRVpILEVBQVNLLFFBQVFGLEVBQU9DLFNBRXhCLFNBQVVhLEdBQ05qQixFQUFTTSxPQUFPLENBQUVZLE1BQU8sK0NBRzlCbEIsRUFBU08sU0FvQ2hCcUIsZ0JBOUJtQixXQUVuQixJQUFJNUIsRUFBV04sRUFBR08sUUFXbEIsT0FUQVIsRUFBTWhELElBQUksdUJBQ0x5RCxNQUFLLFNBQVVDLEdBRVpILEVBQVNLLFFBQVFGLEVBQU9DLFNBRXhCLFNBQVVhLEdBQ05qQixFQUFTTSxPQUFPLENBQUVZLE1BQU8sc0RBRzlCbEIsRUFBU08sZUNyTDVCc0IsSUpDSTNELEVBQWUsRUFBNkJLLFlBQVksaUJBTy9DdUQsV0FBVyxzQkFBdUIsQ0FBQyxTQUFVLFlBQVksU0FBVUMsRUFBUUMsR0FFcEZELEVBQU9FLHVCQUF5QixTQUFVLEdBV3RDRCxFQUFVRSxLQUFLLENBQ1hDLFlBQWEsMkNBQ2JMLFdBQVksOEJBQ1pNLFlBQWEsbUJBQ2JDLEtBQU0sS0FJTkMsVUFBVSxFQUlWakMsUUFBUyxDQUNMa0MsVUFBVyxXQUNQLE9BQU8sT0FhdkJSLEVBQU9TLDRCQUE4QixTQUFVLEdBTTNDUixFQUFVRSxLQUFLLENBQ1hDLFlBQWEsa0RBQ2JMLFdBQVksOEJBQ1pNLFlBQWEsbUJBQ2JDLEtBQU0sS0FDTkMsVUFBVSxFQUlWakMsUUFBUyxDQUNMa0MsVUFBVyxXQUNQLE9BQU8sT0FVdkJSLEVBQU9VLHdCQUEwQixTQUFVQyxHQUd2Q3pELFFBQVFDLElBQUksMERBR1J5RCxNQUFNRCxLQUNOQSxFQUFRLEdBTVpWLEVBQVVFLEtBQUssQ0FDWEMsWUFBYSxpREFDYkwsV0FBWSxzQkFPWlEsVUFBVSxFQUVWakMsUUFBUyxDQUNMdUMsTUFBTyxXQUNILE9BQU9GLFVJckdJLFdBRS9CLElBQUl4RSxFQUFlLEVBQXlCSyxZQUFZLGdCQTRJeEQsT0F6SUFMLEVBQWE0RCxXQUFXLHNCQUF1QixDQUFDLFNBQVUsb0JBQXFCLFFBQVMsa0JBQ3BGLFNBQTZCQyxFQUFRYyxFQUFtQnBELEVBQU9DLEVBQUlvRCxFQUFhRixHQUk1RWIsRUFBT2dCLG1CQUFxQixDQUFFL0IsR0FBSSxFQUFHZ0MsTUFBTyxJQUk1Q2pCLEVBQU9rQixVQUFZLFdBR25CLElBQUlDLEVBQVUsSUFBSUMsS0FDbEJELEVBQVFFLGdCQUFnQixHQUd4QnJCLEVBQU9sQixRQUFVLENBQ2J3QyxVQUFXLEVBQ1hyQyxHQUFJLEVBQ0pzQyxVQUFXSixFQUNYSyxXQUFZLEdBQ1pDLGFBQWMsSUFDZFosTUFBT0EsR0FJWGIsRUFBTzBCLGdCQUFrQixPQUFhMUIsRUFBT2xCLFNBSzdDa0IsRUFBTzJCLFdBQWEsV0FFTDNCLEVBQU8wQixnQkFBbEIsSUFFSWxELEVBQVUsS0FFZHdCLEVBQU8wQixnQkFBZ0JELGFBQWV6QixFQUFPZ0IsbUJBQW1CL0IsSUFHNURULEVBRDhCLElBQTlCd0IsRUFBTzBCLGdCQUFnQnpDLEdBQ2I4QixFQUFZbEMsY0FBY21CLEVBQU8wQixpQkFHakNYLEVBQVkzQixjQUFjWSxFQUFPMEIsbUJBSzNDbEQsRUFBUUwsTUFDSixTQUFVRSxHQUlOMkIsRUFBT2xCLFFBQVUsT0FBYWtCLEVBQU8wQixvQkFFekMsU0FBVTNDLEdBR043QixRQUFRQyxJQUFJLHlEQUNaRCxRQUFRQyxJQUFJNEIsTUFNeEIrQixFQUFrQmMsUUFFbEJDLE9BQU9DLEtBQUssZUFNaEI5QixFQUFPK0IsV0FBYSxXQUdoQmpCLEVBQWtCa0IsV0FRdEJoQyxFQUFPaUMsZUFBaUIsU0FBVUMsR0FFVixPQUFoQkEsSUFBc0JBLEVBQWMsSUFFeEMsSUFBSWpFLEVBQVdOLEVBQUdPLFFBV2xCLE9BTkFSLEVBQU0sQ0FDRnlFLE9BQVEsTUFDUkMsSUFBSyx1QkFFTmpFLE1BSUgsU0FBb0NrRSxHQUVoQyxJQUFJQyxFQUFZLEdBSWhCcEYsUUFBUUMsSUFBSSx1Q0FJWixVQUFnQmtGLEVBQVNoRSxNQUNyQixTQUFVa0UsR0FFRkEsRUFBS0MsZ0JBQWdCQyxjQUFjQyxRQUFRUixFQUFZTyxnQkFBa0IsR0FDekVILEVBQVVqRixLQUFLLENBQUU0QixHQUFJc0QsRUFBS2QsYUFBY1IsTUFBT3NCLEVBQUtDLHFCQUtoRXZFLEVBQVNLLFFBQVFnRSxNQUlyQixTQUFrQ0QsR0FFOUJwRSxFQUFTTSxPQUFPOEQsTUEzQmJwRSxFQUFTTyxZQXNDckIsQ0FDSG1FLGlDQUFrQ3hHLEdBL0lQLEksZ0JISC9CeUcsR0FxSUl4RyxFQUE4QixXQU05QnlHLEVBQUUsT0FBT0MsTUFBSyxTQUFVQyxHQUVwQkYsRUFBRUcsTUFBTUMsT0FFUixJQUFJQyxFQUFjLEdBRWRDLEVBQVNOLEVBQUVHLE1BQU1JLEtBQUssU0FDdEJDLEVBQWlCLFFBRU5DLElBQVhILEdBRUFELEVBQWMsV0FBYUMsRUFBUyxLQUNwQ0UsRUFBaUIsS0FBT0YsR0FHeEJBLEVBQVMsR0FHYk4sRUFBRSxnQ0FBa0NLLEVBQWMsY0FBZ0JHLEVBQWlCLFlBQVlFLGFBQWFQLFNBTXBHUSxTQUFTQyxpQkFBaUIsT0FLaENDLFNBQVEsU0FBVUMsRUFBR0MsRUFBY0MsR0FjckMsSUFBSUMsRUFBSUgsRUFBRUksVUFBVUMsUUFBUSw2QkFBOEIsVUFHMURMLEVBQUVJLFVBQVlELEtBU2xCakIsRUFBRSxjQUFjb0IsR0FBRyxTQUFTLFNBQVVDLEdBSWxDLEdBQWdCLGdCQUZGckIsRUFBRUcsTUFBTUksS0FBSyxZQUVJLENBRzNCLElBQUllLEVBQU90QixFQUFFRyxNQUFNb0IsU0FBU0MsT0FDeEJDLEVBQVF6QixFQUFFRyxNQUdWRyxFQUFTTixFQUFFRyxNQUFNSSxLQUFLLFNBQ3RCQyxFQUFpQixRQUVOQyxJQUFYSCxFQUNBQSxFQUFTLEdBR1RFLEVBQWlCLEtBQU9GLEVBR3hCZ0IsRUFBS0ksR0FBRyxhQUNSRCxFQUFNRSxLQUFLLFlBQWNuQixHQUN6QmMsRUFBS00sWUFFTE4sRUFBS08sU0FDTEosRUFBTUUsS0FBSyxZQUFjbkIsU0FpQnJDaEgsRUFBZSxxR0E2Qm5Cd0csR0FBRSxZQXRRZ0IsV0FFZEEsRUFBRSxjQUFjb0IsR0FBRyxTQUFTLFNBQVVDLEdBRWxDLElBQUlTLEVBQVU5QixFQUFFRyxNQUFNSSxLQUFLLFlBQ3ZCd0IsRUFBWS9CLEVBQUVHLE1BQU1JLEtBQUssY0FDekJ5QixFQUFtQmhDLEVBQUVHLE1BQU1JLEtBQUssb0JBQ2hDMEIsRUFBb0JqQyxFQUFFRyxNQUFNSSxLQUFLLHFCQWlDckMsR0E3QmdCLGVBQVp1QixJQUNBOUIsRUFBRStCLEdBQVdHLE1BQU0sQ0FBRXhFLFNBQVUsU0FBVXlFLFVBQVUsSUFFbkRuQyxFQUFFLHdCQUF3Qm9DLEtBQUssaUJBSW5CLGVBQVpOLEdBRUE5QixFQUFFZ0MsR0FBa0I1QixPQUlSLGVBQVowQixHQUVBOUIsRUFBRWdDLEdBQWtCSyxPQUlSLGtCQUFaUCxHQUdBbkIsU0FBUzJCLGNBQWNOLEdBQWtCTyxlQUFlLENBQ3BEQyxTQUFVLFdBTUYscUJBQVpWLEVBQWdDLENBRWhDLElBQUl4SyxFQUFJLElBQUlpSCxLQUVSa0UsRUFBS25MLEVBQUVvTCxjQUFnQixJQUFNNUosRUFBRXhCLEVBQUVxTCxXQUFhLEVBQUcsRUFBRyxLQUFPLElBQU03SixFQUFFeEIsRUFBRXNMLFVBQVcsRUFBRyxLQUFPLElBQU05SixFQUFFeEIsRUFBRXVMLFdBQVksRUFBRyxLQUFPLElBQU0vSixFQUFFeEIsRUFBRXdMLGFBQWMsRUFBRyxLQUFPLElBQU1oSyxFQUFFeEIsRUFBRXlMLGFBQWMsRUFBRyxLQUUzTC9DLEVBQUVnQyxHQUFrQmdCLElBQUlQLEdBTzVCLEdBQWdCLG9CQUFaWCxFQUErQixDQVEvQixJQUFJbUIsRUFBTSxJQUFJMUUsS0FFVjJFLEVBQTBDbEQsRUFBRWdDLEdBQWtCLEdBQUkvSixNQUVsRWtMLEVBQU0sSUFBSTVFLEtBQUsyRSxHQUVmRSxFQUFVSCxFQUFJSSxVQUFVQyxVQUFZSCxFQUFJRSxVQUFVQyxVQUVsREMsRUFBVUMsS0FBS0MsTUFBTUwsRUFBVSxLQUVuQ3BELEVBQUVpQyxHQUFtQmUsSUFBSU8sT0FjakMsSUFBSXpLLEVBQUksU0FBVTRLLEVBQU1DLEVBQUssR0FFekIsSUFBSUMsRUFBTUYsRUFBS0csV0FDZixPQUFJRCxFQUFJeEosT0FBU3VKLEVBQVlDLEdBQ3BCLEVBQUtFLE9BQU9ILEdBQU9DLEdBQ2hCRyxVQUFVSixHQUFPQyxFQUFJeEosT0FBU3VKLEtBUTlDM0QsRUFBRWdFLFFBQVE1QyxHQUFHLFVBQVUsV0FDWHBCLEVBQUVnRSxRQUFRQyxZQUVWLEVBQ0pqRSxFQUFFLGlCQUFpQjZCLE9BQU8sUUFFMUI3QixFQUFFLGlCQUFpQjRCLFFBQVEsV0FnS25Dc0MsR0FLQUMsV0FBVzVLLEVBQTZCLFFBVXJDLENBRUg2SyxhQTNDZSxTQUFmQSxFQUF5QkMsR0FFekIsR0FBcUIsV0FBakIsSUFBT0EsR0FBb0IsT0FBT0EsRUFFdEMsSUFBSyxJQUFJOUwsS0FBTzhMLEVBRVosR0FBS0EsRUFBTXhMLGVBQWVOLEdBQTFCLENBRUEsSUFBSU4sRUFBUW9NLEVBQU05TCxHQUNkK0wsRUFBTyxJQUFPck0sR0FFTCxXQUFUcU0sR0FBOEJyTSxFQUFNc00sTUFBTS9LLEdBQzFDNkssRUFBTTlMLEdBQU8sSUFBSWdHLEtBQUt0RyxHQUVSLFdBQVRxTSxHQUNMRixFQUFhbk0sS0E2QnJCdU0sa0JBaktvQixXQUVwQnhFLEVBQUUsNEJBQTRCeUUsUUFBUSxVQWdLdENsTCw0QkFBNkJBLElJOVJqQ21MLEVBQXVDLFdBRXZDLElBQUlwTCxFQUFlLEVBQTZCSyxZQUFZLGdCQTJLNUQsT0F6S0FMLEVBQWE0RCxXQUFXLDhCQUErQixDQUFDLFNBQVUsb0JBQXFCLFFBQVMsS0FBTSxjQUFlLFdBQVksWUFFN0gsU0FBVUMsRUFBUWMsRUFBbUJwRCxFQUFPQyxFQUFJb0QsRUFBYXlHLEVBQVVoSCxHQUtuRU8sRUFBWS9CLFdBQVd3QixHQUFXckMsTUFRbEMsU0FBMkJFLEdBRXZCLElBQUlvSixFQUFRcEosRUFDWixFQUFtQjRJLGFBQWFRLEdBR2hDLElBQUl0RyxFQUFVLElBQUlDLEtBQ2xCRCxFQUFRRSxnQkFBZ0IsR0FHeEJyQixFQUFPbEIsUUFBVTJJLEVBSWpCekgsRUFBT2xCLFFBQVF3QyxVQUFZLEVBQzNCdEIsRUFBT2xCLFFBQVF5QyxVQUFZSixFQUczQm5CLEVBQU9sQixRQUFRNEksYUFBZSxLQUc5QjFILEVBQU9sQixRQUFRNkksYUFBZSxLQUU5QjNILEVBQU8wQixnQkFBa0IsT0FBYTFCLEVBQU9sQixTQUk3Q2tJLFlBQVcsV0FDUGhILEVBQU9pQyxlQUFld0YsRUFBTUcsV0FBV3BGLGlCQUN2Q3hDLEVBQU9nQixtQkFBcUIsQ0FBRS9CLEdBQUl3SSxFQUFNRyxXQUFXbkcsYUFBY1IsTUFBT3dHLEVBQU1HLFdBQVdwRixtQkFFdkYsUUFLVixTQUF5Qm5FLE9BNUN6QixPQWlEQSxTQUF5QkEsT0E1Q3pCMkIsRUFBT2tCLFVBQVksdUJBa0RuQmxCLEVBQU8yQixXQUFhLFdBR0wzQixFQUFPMEIsZ0JBQWxCLElBRUlsRCxFQUFVLEtBRWR3QixFQUFPMEIsZ0JBQWdCRCxhQUFlekIsRUFBT2dCLG1CQUFtQi9CLElBRzVEVCxFQURxQyxJQUFyQ3dCLEVBQU8wQixnQkFBZ0JKLFVBQ2JQLEVBQVlsQyxjQUFjbUIsRUFBTzBCLGlCQUdqQ1gsRUFBWTNCLGNBQWNZLEVBQU8wQixtQkFNM0NsRCxFQUFRTCxNQUNKLFNBQVVFLEdBSU4yQixFQUFPbEIsUUFBVSxPQUFha0IsRUFBTzBCLGlCQUVyQ1osRUFBa0JjLFFBRWxCQyxPQUFPQyxLQUFLLG9DQUdaMEYsR0FBUyxXQUNMSyxTQUFTQyxXQUNWLFFBS1AsU0FBVS9JLEdBRU43QixRQUFRQyxJQUFJNEIsR0FFWitCLEVBQWtCYyxRQUNsQkMsT0FBTzlDLE1BQU0sOENBVTdCaUIsRUFBTytCLFdBQWEsV0FHaEJqQixFQUFrQmtCLFdBTXRCaEMsRUFBT2lDLGVBQWlCLFNBQVVDLEdBRVYsT0FBaEJBLElBQXNCQSxFQUFjLElBRXhDLElBQUlqRSxFQUFXTixFQUFHTyxRQVFsQixPQU5BUixFQUFNLENBQ0Z5RSxPQUFRLE1BQ1JDLElBQUssc0JBRU5qRSxNQUlILFNBQW9Da0UsR0FFaEMsSUFBSUMsRUFBWSxHQUVoQixVQUFnQkQsRUFBU2hFLE1BQ3JCLFNBQVVrRSxHQUVGQSxFQUFLQyxnQkFBZ0JDLGNBQWNDLFFBQVFSLEVBQVlPLGdCQUFrQixHQUN6RUgsRUFBVWpGLEtBQUssQ0FBRTRCLEdBQUlzRCxFQUFLZCxhQUFjUixNQUFPc0IsRUFBS0MscUJBS2hFdkUsRUFBU0ssUUFBUWdFLE1BSXJCLFNBQWtDRCxHQUU5QnBFLEVBQVNNLE9BQU84RCxNQXJCYnBFLEVBQVNPLFlBaUNyQixDQUNIckMsYUFBY0EsR0E5S3FCLEdDSHZDNEwsRUFBdUMsV0FNdkMsSUFBSTVMLEVBQWUsRUFBNkJLLFlBQVksZ0JBbUs1RCxPQWpLQUwsRUFBYTRELFdBQVcsOEJBQStCLENBQUMsU0FBVSxvQkFBcUIsUUFBUyxLQUFNLGNBQWUsWUFFakgsU0FBNkJDLEVBQVFjLEVBQW1CcEQsRUFBT0MsRUFBSW9ELEVBQWFQLEdBTzVFTyxFQUFZL0IsV0FBV3dCLEdBQVdyQyxNQVVsQyxTQUEyQkUsR0FrQnZCLElBQUlvSixFQUFRcEosRUFDWixFQUFtQjRJLGFBQWFRLEdBQ2hDekgsRUFBT2xCLFFBQVUySSxFQUlqQnpILEVBQU8wQixnQkFBa0IsT0FBYTFCLEVBQU9sQixTQUU3Q2tJLFlBQVcsV0FDUGhILEVBQU9pQyxlQUFld0YsRUFBTUcsV0FBV3BGLGlCQUN2Q3hDLEVBQU9nQixtQkFBcUIsQ0FBRS9CLEdBQUl3SSxFQUFNRyxXQUFXbkcsYUFBY1IsTUFBT3dHLEVBQU1HLFdBQVdwRixtQkFFdkYsUUFLVixTQUF5Qm5FLEdBQ3JCbkIsUUFBUUMsSUFBSSwrQ0FDWkQsUUFBUUMsSUFBSWtCLE1BL0NoQixPQW1EQSxTQUF5QkEsR0FDckJuQixRQUFRQyxJQUFJLCtDQUNaRCxRQUFRQyxJQUFJa0IsTUE5Q2hCMkIsRUFBT2tCLFVBQVksWUFtRG5CbEIsRUFBTzJCLFdBQWEsV0FHTDNCLEVBQU8wQixnQkFBbEIsSUFFSWxELEVBQVUsS0FFZHdCLEVBQU8wQixnQkFBZ0JELGFBQWV6QixFQUFPZ0IsbUJBQW1CL0IsSUFHNURULEVBRDhCLElBQTlCd0IsRUFBTzBCLGdCQUFnQnpDLEdBQ2I4QixFQUFZbEMsY0FBY21CLEVBQU8wQixpQkFHakNYLEVBQVkzQixjQUFjWSxFQUFPMEIsbUJBSzNDbEQsRUFBUUwsTUFDSixTQUFVRSxHQUlOMkIsRUFBT2xCLFFBQVUsT0FBYWtCLEVBQU8wQixvQkFFekMsU0FBVTNDLEdBR05pSixNQUFNLGdDQUNOOUssUUFBUUMsSUFBSTRCLE1BTXhCK0IsRUFBa0JjLFFBQ2xCQyxPQUFPQyxLQUFLLGdCQUloQjlCLEVBQU8rQixXQUFhLFdBR2hCakIsRUFBa0JrQixXQU10QmhDLEVBQU9pQyxlQUFpQixTQUFVQyxHQUVWLE9BQWhCQSxJQUFzQkEsRUFBYyxJQUV4QyxJQUFJakUsRUFBV04sRUFBR08sUUFRbEIsT0FOQVIsRUFBTSxDQUNGeUUsT0FBUSxNQUNSQyxJQUFLLHNCQUVOakUsTUFJSCxTQUFvQ2tFLEdBRWhDLElBQUlDLEVBQVksR0FFaEIsVUFBZ0JELEVBQVNoRSxNQUNyQixTQUFVa0UsR0FFRkEsRUFBS0MsZ0JBQWdCQyxjQUFjQyxRQUFRUixFQUFZTyxnQkFBa0IsR0FDekVILEVBQVVqRixLQUFLLENBQUU0QixHQUFJc0QsRUFBS2QsYUFBY1IsTUFBT3NCLEVBQUtDLHFCQUtoRXZFLEVBQVNLLFFBQVFnRSxNQUlyQixTQUFrQ0QsR0FFOUJwRSxFQUFTTSxPQUFPOEQsTUFyQmJwRSxFQUFTTyxZQWlDckIsQ0FDSHJDLGFBQWNBLEdBMUtxQixJSlduQ0csRUFBOEIsRUFBNkJFLFlBQVksNEJBQTZCLENBQUMsa0JBRzdFdUQsV0FBVyxvQkFBcUIsQ0FBQyxTQUFVLFNBQVUsWUFBYSxTQUFVQyxFQUFRaUksRUFBUUMsR0FJcEgsSUFBSUMsRUFBV0YsRUFBTSxTQUNUcEYsRUFBRSxVQUFZc0YsRUFBVyxNQUFNek4sSUFBSSxHQUNsQ3dOLEVBQVVFLFNBQVNDLE9BSWhDckksRUFBT3NJLGFBQWUsU0FBVUMsRUFBT0MsS0FJdkN4SSxFQUFPeUksYUFBZSxTQUFVRixFQUFPQyxHQUU5QkEsRUFBS0UsUUFDTkgsRUFBTUkscUJBUWxCck0sRUFBNEJzTSxVQUFVLHlCQUF5QixXQTRMM0QsTUFBTyxDQUVIQyxTQUFVLElBQ1Z6SSxZQUFhLDhDQUNiTCxXQUFZLENBQUMsUUFBUyxLQUFNLFNBOUxmLFNBQVVyQyxFQUFPQyxFQUFJcUMsR0FFbEMsSUFBSThJLEVBQUs5RixLQUlUOEYsRUFBR0MsVUFBVyxFQUVkRCxFQUFHRSxRQUFVLFdBR1QsSUFBSUMsR0FBVyxFQUVYakosRUFBT2dCLG9CQUdhaEIsRUFBT2dCLG1CQUFtQi9CLEtBSTFDNEQsRUFBRSxVQUFZRyxLQUFLa0csVUFBWSxNQUFNckQsSUFBSTdGLEVBQU9nQixtQkFBbUIvQixJQUNuRWdLLEdBQVcsR0FPbkIsSUFBSUUsRUFBZXRHLEVBQUUsVUFBWUcsS0FBS2tHLFVBQVksTUFBTXJELE1BR3hELEdBQUlpRCxFQUFHQyxTQUFVLENBUWIsT0FKQUQsRUFBR00sT0FBUyx1QkFFWk4sRUFBR08sZUFBaUIsdUJBRVpyRyxLQUFLa0csVUFBVXpHLGVBRW5CLElBQUssdUJBQ0RxRyxFQUFHTSxPQUFTLHFCQUNaTixFQUFHTyxlQUFpQixhQUNwQixNQUVKLElBQUssZ0JBQ0RQLEVBQUdNLE9BQVMsd0JBQ1pOLEVBQUdPLGVBQWlCLFlBTTVCUCxFQUFHQyxVQUFXLEVBRWRELEVBQUdRLHFCQUFxQkgsR0FBY2hMLEtBQUsySyxFQUFHUyw4QkFPbEQsT0FBT04sR0FJWEgsRUFBR1MsNkJBQStCLFNBQVVsTCxHQUVwQ0EsSUFPSUEsRUFBS29ELGVBRUx6QixFQUFPZ0IsbUJBQXFCLENBQUUvQixHQUFJWixFQUFLb0QsYUFBY1IsTUFBTzVDLEVBQUttRSxrQkFHakVuRSxFQUFLbUwsUUFFTHhKLEVBQU9nQixtQkFBcUIsQ0FBRS9CLEdBQUlaLEVBQUttTCxNQUFPdkksTUFBTzVDLEVBQUtvTCxtQkFNdEVYLEVBQUc3RyxlQUFpQixTQUFVQyxHQUdOLE9BQWhCQSxJQUFzQkEsRUFBYyxJQUV4QyxJQUFJakUsRUFBV04sRUFBR08sUUFTbEIsT0FOQVIsRUFBTSxDQUNGeUUsT0FBUSxNQUNSQyxJQUFLMEcsRUFBR00sU0FFVGpMLE1BS0gsU0FBb0NrRSxHQUVoQyxJQUFJQyxFQUFZLEdBRWhCLFVBQWdCRCxFQUFTaEUsTUFDckIsU0FBVWtFLEdBS0ZBLEVBQUtkLGNBRURjLEVBQUtDLGdCQUFnQkMsY0FBY0MsUUFBUVIsRUFBWU8sZ0JBQWtCLEdBQ3pFSCxFQUFVakYsS0FBSyxDQUFFNEIsR0FBSXNELEVBQUtkLGFBQWNSLE1BQU9zQixFQUFLQyxrQkFJeERELEVBQUtpSCxPQUVEakgsRUFBS2tILGVBQWVoSCxjQUFjQyxRQUFRUixFQUFZTyxnQkFBa0IsR0FDeEVILEVBQVVqRixLQUFLLENBQUU0QixHQUFJc0QsRUFBS2lILE1BQU92SSxNQUFPc0IsRUFBS2tILG9CQU83RHhMLEVBQVNLLFFBQVFnRSxNQUlyQixTQUFrQ0QsR0FFOUJwRSxFQUFTTSxPQUFPOEQsTUFwQ2JwRSxFQUFTTyxTQStDcEJzSyxFQUFHUSxxQkFBdUIsU0FBVUksR0FFaEMsR0FBaUIsT0FBYkEsRUFBbUIsT0FBTyxLQUU5QixJQUFJekwsRUFBV04sRUFBR08sUUFTbEIsT0FOQVIsRUFBTSxDQUNGeUUsT0FBUSxNQUNSQyxJQUFLMEcsRUFBR00sT0FBUyxJQUFNTSxJQUV4QnZMLE1BS0gsU0FBb0NrRSxHQUVoQ3BFLEVBQVNLLFFBQVErRCxFQUFTaEUsU0FJOUIsU0FBa0NnRSxHQUU5QnBFLEVBQVNNLE9BQU84RCxNQVhicEUsRUFBU08sV0E0QnBCbUwsYUFBYyxRQUNkQyxrQkFBa0IsRUFDbEJDLE1BQU8sQ0FDSFgsVUFBVyxPQUNYZixTQUFVLFNLeE8xQjdLLEVBQXFCQyxRQUFRLGdCQUU3QnVDLEVBQTZCNkMsaUNBRTdCNEUsRUFBcUNwTCxhQUVyQzRMLEVBQXFDNUwiLCJmaWxlIjoiYnVuZGxlX3RpbWVzaGVldGFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjsiLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCLvu79cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL25vZGVfbW9kdWxlcy9AdHlwZXMvYW5ndWxhci9pbmRleC5kLnRzXCIgLz5cclxuXHJcblxyXG4vLyAwOS8xOC8yMDE5IDEwOjMzIGFtIC0gU1NOIC0gWzIwMTkwOTE4LTA5NDNdIC0gWzAwNl0gLSBBZGRpbmcgam9iIHN0YXR1cyBvcHRpb24gdG8gaW5kZXhcclxuXHJcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU1MzI0NTEwL2hvdy10by1tYWtlLWEtc2luZ2xldG9uLWluLXR5cGVzY3JpcHQtd29yay1hY3Jvc3MtbXVsdGlwbGUtbW9kdWxlc1xyXG5cclxuXHJcbmltcG9ydCBJQW5ndWxhckFwcCBmcm9tICcuL0lBbmd1bGFyQXBwJztcclxuXHJcbmltcG9ydCAqIGFzIGFuZ3VsYXIgZnJvbSBcImFuZ3VsYXJcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG52YXIgZ2xvYmFsc19pbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgY2xhc3MgU1NOX0dsb2JhbHMge1xyXG5cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3NuX2RldnNpdGVfYW5ndWxhcl9tb2R1bGU6IElBbmd1bGFyQXBwW10gPSBbXTsgLy9hbmd1bGFyLklNb2R1bGVbXTtcclxuXHJcbiAgICAgICAgLy8gMDkvMjMvMjAxOSAwNjoxMyBhbSAtIFNTTiAtIFsyMDE5MDkyMy0wNjEzXSAtIFswMDFdIC0gQWRkaW5nIGEgbG9ja1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKGFwcGxpY2F0aW9uTmFtZTogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSA9IG51bGwpOiBhbmd1bGFyLklNb2R1bGUge1xyXG5cclxuICAgICAgICAgICAgLy8vLyAgRE8gTk9UIFJFTU9WRS5cclxuICAgICAgICAgICAgLy8vLyBPcHRpb24gdG8gY2FsbCBhbiBpbmplY3RlZCBBbmd1bGFySlMgc2VydmVyIGZyb20gaGVyZS4gVGVzdGVkLiAgXHJcblxyXG4gICAgICAgICAgICAvL2ZhY3RvcnlTZXR1cC5kb0ZhY3RvcnlTZXR1cCgpO1xyXG5cclxuICAgICAgICAgICAgLy90cnkge1xyXG5cclxuICAgICAgICAgICAgLy8gICAgY29uc29sZS5sb2coXCJnbG9iYWxzOiAyMDE5MDkyMy0xMTM2IC0gQ2FsbGluZyB0ZXN0XzEwMlwiKTtcclxuICAgICAgICAgICAgLy8gICAgdGVzdF8xMDMuZG9JdCgpO1xyXG4gICAgICAgICAgICAvL30gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gICAgY29uc29sZS5lcnJvcihcImdsb2JhbHM6ICAyMDE5MDkyMy0xMTM1IC0gRmFpbGVkIGNhbGwgdG8gdGVzdF8xMDJcIik7XHJcbiAgICAgICAgICAgIC8vICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAvL31cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFNTTl9HbG9iYWxzLmdldEluc3RhbmNlX09yaWdpbmFsKGFwcGxpY2F0aW9uTmFtZSwgYXJncyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2VfT3JpZ2luYWwoYXBwbGljYXRpb25OYW1lOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdID0gbnVsbCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBhbmd1bGFyQXBwOiBJQW5ndWxhckFwcCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSAoU1NOX0dsb2JhbHMuc3NuX2RldnNpdGVfYW5ndWxhcl9tb2R1bGUpLmZpbHRlcigocjogSUFuZ3VsYXJBcHApID0+IHIubmFtZSA9PT0gYXBwbGljYXRpb25OYW1lKTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID4gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdsb2JhbHMgLSAyMDE5MDkyMy0wNTQzIC0gMDAxIC0gRm91bmQgYXBwbGljYXRpb24gW1wiICsgYXBwbGljYXRpb25OYW1lICsgXCJdICBJbnN0YW5jZSBjb3VudCBbXCIgKyBzZWxlY3RlZC5sZW5ndGggKyBcIl1cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYW5ndWxhckFwcCA9IHNlbGVjdGVkWzBdO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGFwcGxpY2F0aW9uTmFtZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd0aW1lc2hlZXRBcHAnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckFwcCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGFwcGxpY2F0aW9uTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBhbmd1bGFyLm1vZHVsZSgndGltZXNoZWV0QXBwJywgWyduZ1JvdXRlJywgJ3VpLmJvb3RzdHJhcCddKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTU05fR2xvYmFscy5zc25fZGV2c2l0ZV9hbmd1bGFyX21vZHVsZS5wdXNoKGFuZ3VsYXJBcHApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlbW9TaXRlc19JbmRleF9UaW1lc2hlZXQnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckFwcCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGFwcGxpY2F0aW9uTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBhbmd1bGFyLm1vZHVsZSgnZGVtb1NpdGVzX0luZGV4X1RpbWVzaGVldCcsIGFyZ3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNTTl9HbG9iYWxzLnNzbl9kZXZzaXRlX2FuZ3VsYXJfbW9kdWxlLnB1c2goYW5ndWxhckFwcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlbW9TaXRlc19JbmRleCc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyQXBwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYXBwbGljYXRpb25OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2U6IGFuZ3VsYXIubW9kdWxlKFwiZGVtb1NpdGVzX0luZGV4XCIsIGFyZ3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNTTl9HbG9iYWxzLnNzbl9kZXZzaXRlX2FuZ3VsYXJfbW9kdWxlLnB1c2goYW5ndWxhckFwcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR2xvYmFscyAqKioqKioqKioqKioqIE5vIGNhc2UgZm9yIGFwcGxpY2F0aW9uIG5hbWUgW1wiICsgYXBwbGljYXRpb25OYW1lICsgXCJdICBbMjAxOTA5MjAtMDk1NV0gZ2xvYmFscy50c1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhbmd1bGFyQXBwLmluc3RhbmNlO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgdmFyIGZhY3RvcnlTZXR1cCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgICAgIHZhciBkb0ZhY3RvcnlTZXR1cCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBhcHBfZ2xvYmFscztcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhcHBfZ2xvYmFscyA9IGFuZ3VsYXIubW9kdWxlKCdnbG9iYWxBbmd1bGFyQXBwJyk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBhcHBfZ2xvYmFscyA9IGFuZ3VsYXIubW9kdWxlKCdnbG9iYWxBbmd1bGFyQXBwJywgW10pO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGFwcF9nbG9iYWxzLmZhY3RvcnkoXCJnbG9iYWxBbmd1bGFyQXBwVXRpbFwiLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZG9UZXN0MTAxID0gZnVuY3Rpb24gKG5hbWVQYXNzZWRJbikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnR0xPQkFMUyAtIGFzeW5jR3JlZXQgLSA0NScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQubm90aWZ5KCdBYm91dCB0byBncmVldCAnICsgbmFtZVBhc3NlZEluICsgJy4nKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWVQYXNzZWRJbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHTE9CQUxTIC0gYXN5bmNHcmVldCAtIDUwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdIZWxsbywgJyArIG5hbWVQYXNzZWRJbiArICchJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnR0xPQkFMUyAtIGFzeW5jR3JlZXQgLSA1MycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWVQYXNzZWRJbiArICcgaXMgbm90IGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb2tUb0dyZWV0KG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZG9UZXN0MTAxOiBkb1Rlc3QxMDFcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRvRmFjdG9yeVNldHVwOiBkb0ZhY3RvcnlTZXR1cFxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcblxyXG4gICAgfSgpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8vIDA5LzIwLzIwMTkgMDk6MzggYW0gLSBTU04gLSBQYXNzIGluIGFyZ3NcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRJbnN0YW5jZShhcHBsaWNhdGlvbk5hbWU6IHN0cmluZywgYXJnczogc3RyaW5nW10gPSBudWxsKTogYW5ndWxhci5JTW9kdWxlIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIFNTTl9HbG9iYWxzLmdldEluc3RhbmNlKGFwcGxpY2F0aW9uTmFtZSwgYXJncyk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4ge1xyXG5cclxuICAgICAgICBnZXRJbnN0YW5jZTogZ2V0SW5zdGFuY2VcclxuICAgIH1cclxuXHJcblxyXG5cclxufSgpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbnZhciB0ZXN0XzEwMyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgdmFyIGRvSXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cclxuICAgICAgICBhbmd1bGFyLmluamVjdG9yKFsnbmcnLCAnZ2xvYmFsQW5ndWxhckFwcCddKS5pbnZva2UoWydnbG9iYWxBbmd1bGFyQXBwVXRpbCcsIGZ1bmN0aW9uIChnbG9iYWxBbmd1bGFyQXBwVXRpbCkge1xyXG5cclxuICAgICAgICAgICAgZ2xvYmFsQW5ndWxhckFwcFV0aWwuZG9UZXN0MTAxKCdOYW1lIHBhc3NlZCB0byBkb1Rlc3QxMDEnKS50aGVuKGRvVGVzdDEwMVN1Y2Nlc3MsIGRvVGVzdDEwMUVycm9yKS5jYXRjaChkb1Rlc3QxMDFDYXRjaCk7XHJcblxyXG4gICAgICAgIH1dKTtcclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvVGVzdDEwMVN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnbG9iYWxzIC0gZG9UZXN0MTAxU3VjY2VzcyAtIDIwMTkwOTI0LTAzMTYgJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvVGVzdDEwMUVycm9yKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnbG9iYWxzIC0gZG9UZXN0MTAxRXJyb3IgLSAyMDE5MDkyNC0wMzE2LUIgJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRvVGVzdDEwMUNhdGNoKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnbG9iYWxzIC0gZG9UZXN0MTAxQ2F0Y2ggLSAyMDE5MDkyNC0wMzE2LUMnKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZG9JdDogZG9JdFxyXG4gICAgfTtcclxuXHJcblxyXG59KCk7XHJcblxyXG5cclxuZXhwb3J0IHsgZ2xvYmFsc19pbnN0YW5jZSB9O1xyXG5cclxuZXhwb3J0IHsgdGVzdF8xMDMgfTtcclxuXHJcbiIsIu+7v1xyXG4vLyAwNC8xMi8yMDE5IDAxOjQyIGFtIC0gU1NOIC0gWzIwMTkwNDEyLTAxNDJdIC0gVGltZXNoZWV0QXBwXHJcblxyXG5cclxuaW1wb3J0ICogYXMgc3NuX2dsb2JhbHMgZnJvbSBcIi4uL2dsb2JhbHMuanNcIjtcclxuXHJcblxyXG52YXIgdGltZXNoZWV0QXBwX2luc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHJcblxyXG4gICAgLy8gMDUvMDMvMjAxOSAwNjozMyBwbSAtIFNTTiAtIFsyMDE5MDUwMy0xNTM5XSAtIFswMTNdIC0gQWRkIGxpbmsgdG8gY3JlYXRlIHRpbWVsb2dcclxuICAgIC8vIENvbnZlcnQgdG8gVFNcclxuXHJcblxyXG5cclxuICAgIHZhciB0aW1lc2hlZXRBcHAgPSBzc25fZ2xvYmFscy5nbG9iYWxzX2luc3RhbmNlLmdldEluc3RhbmNlKFwidGltZXNoZWV0QXBwXCIpO1xyXG5cclxuXHJcblxyXG4gICAgLy8gMDQvMTIvMjAxOSAwMjozNSBwbSAtIFNTTiAtIFsyMDE5MDQxMi0xMTI2XSAtIFRpbWVsb2cgLSBzYXZlIGRhdGEgLSBzc25fZGV2c2l0ZV9hbmd1bGFyX21vZHVsZSBpcyBpbiB1c2UgYnkgRGF0YVNlcnZpY2VzLmpzXHJcblxyXG4gICAgXHJcbiAgICB0aW1lc2hlZXRBcHAuY29udHJvbGxlcihcInRpbWVzaGVldENvbnRyb2xsZXJcIiwgWyckc2NvcGUnLCAnJHVpYk1vZGFsJyxmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwpIHtcclxuXHJcbiAgICAgICAgJHNjb3BlLnRpbWVzaGVldEZvcm1fQ2xvY2tPdXQgPSBmdW5jdGlvbiAodGltZWxvZ0lkKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gMDQvMjkvMjAxOSAwNDoxNiBwbSAtIFNTTiAtIFsyMDE5MDQyOS0xNjE2XSAtIFswMDFdIC0gVGltZXNoZWV0IC0gc3RvcCAvIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAvLyAwNS8wMy8yMDE5IDAzOjU0IHBtIC0gU1NOIC0gWzIwMTkwNTAzLTE1MzldIC0gWzAwNF0gLSBBZGQgbGluayB0byBjcmVhdGUgdGltZWxvZ1xyXG4gICAgICAgICAgICAvLyBUZXN0aW5nOiAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogICdqcy90aW1lc2hlZXQvdGltZXNoZWV0VGVtcGxhdGUuaHRtbCcgXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgIHRvIHRlbXBsYXRlVXJsOiAnL2pzL3RpbWVzaGVldC90aW1lc2hlZXRUZW1wbGF0ZS5odG1sJ1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9qcy90aW1lc2hlZXQvdGVtcGxhdGVzL1RpbWVMb2dFZGl0Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1RpbWVzaGVldENsb2NrT3V0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3Nzbi1tb2JpbGUtbW9kYWwnLFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ21kJyxcclxuXHJcbiAgICAgICAgICAgICAgICAvLzA1LzAzLzIwMTkgMDU6NTAgcG0gLSBTU04gLSBbMjAxOTA1MDMtMTUzOV0gLSBbMDExXSAtIEFkZCBsaW5rIHRvIGNyZWF0ZSB0aW1lbG9nIFxyXG4gICAgICAgICAgICAgICAgLy8gQWRkZWQgYmFja2Ryb3BcclxuICAgICAgICAgICAgICAgIGJhY2tkcm9wOiBmYWxzZSxcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lbG9nSWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVsb2dJZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8vIDA1LzE5LzIwMTkgMDg6MzkgYW0gLSBTU04gLSBbMjAxOTA1MTktMDgzN10gLSBbMDAyXSAtIEFkZGluZyB0aW1lc2hlZXQgXCJDb250aW51ZVwiIG9wdGlvblxyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLnRpbWVzaGVldEZvcm1fQ2xvY2tDb250aW51ZSA9IGZ1bmN0aW9uICh0aW1lbG9nSWQpIHtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgLy8gMDUvMTkvMjAxOSAwOTozNyBhbSAtIFNTTiAtIFsyMDE5MDUxOS0wODM3XSAtIFswMDNdIC0gQWRkaW5nIHRpbWVzaGVldCBcIkNvbnRpbnVlXCIgb3B0aW9uXHJcblxyXG4gICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9qcy90aW1lc2hlZXQvdGVtcGxhdGVzLy90aW1lc2hlZXRUZW1wbGF0ZS5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUaW1lc2hlZXRDb250aW51ZUNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdzc24tbW9iaWxlLW1vZGFsJyxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCcsXHJcbiAgICAgICAgICAgICAgICBiYWNrZHJvcDogZmFsc2UsXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWxvZ0lkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aW1lbG9nSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLnNob3dDcmVhdGVUaW1lc2hlZXRGb3JtID0gZnVuY3Rpb24gKGpvYklEKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaW1lc2hlZXRBcHAgLSBzaG93Q3JlYXRlVGltZXNoZWV0Rm9ybSAtIDIwMTkwOTIxLTA2MzJcIik7XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGlzTmFOKGpvYklEKSkge1xyXG4gICAgICAgICAgICAgICAgam9iSUQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyAwNS8wMy8yMDE5IDA0OjEwIHBtIC0gU1NOIC0gWzIwMTkwNTAzLTE1MzldIC0gWzAwNF0gLSBBZGQgbGluayB0byBjcmVhdGUgdGltZWxvZ1xyXG4gXHJcblxyXG4gICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9qcy90aW1lc2hlZXQvdGVtcGxhdGVzL3RpbWVzaGVldFRlbXBsYXRlLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1RpbWVzaGVldENvbnRyb2xsZXInLFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLyAwNS8wMy8yMDE5IDA0OjI5IHBtIC0gU1NOIC0gWzIwMTkwNTAzLTE1MzldIC0gWzAwN10gLSBBZGQgbGluayB0byBjcmVhdGUgdGltZWxvZyAtIFByZXZlbnQgY2xvc2UgKFRlc3RpbmcpXHJcbiAgICAgICAgICAgICAgICAvLyB3aW5kb3dDbGFzczogJ3Nzbi1tb2JpbGUtbW9kYWwnLFxyXG4gICAgICAgICAgICAgICAgLy8gc2l6ZTogJ21kJyxcclxuXHJcbiAgICAgICAgICAgICAgICBiYWNrZHJvcDogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGpvYklkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqb2JJRDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBcclxuXHJcbiAgICB9XSk7XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdGltZXNoZWV0QXBwOiB0aW1lc2hlZXRBcHBcclxuICAgIH07XHJcblxyXG5cclxufSgpO1xyXG5cclxuXHJcblxyXG4vLyAwOS8yMS8yMDE5IDAzOjU4IGFtIC0gU1NOIC0gWzIwMTkwOTIxLTAzNTddIC0gWzAwMl0gLSBDcmVhdGluZyBtdWx0aXBsZSBlbnRyeSBmb3IgV2VicGFja1xyXG5cclxuZXhwb3J0IHsgdGltZXNoZWV0QXBwX2luc3RhbmNlIH07XHJcbiIsIu+7v1xyXG4vLyAwNS8xOS8yMDE5IDAxOjE4IHBtIC0gU1NOIC0gWzIwMTkwNTE5LTExMzJdIC0gWzAwN10gLSBBZGRyZXNzIGRlZmluaXRlbHkgdHlwZWQgZXJyb3JzIC0gTm8gZXJyb3JzXHJcblxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbm9kZV9tb2R1bGVzL0B0eXBlcy9qcXVlcnkvaW5kZXguZC50c1wiIC8+ICAgXHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9ub2RlX21vZHVsZXNfaGFjay9TU05fanF1ZXJ5X21vZGFsLmQudHNcIiAvPlxyXG5cclxuXHJcblxyXG4vLzA4LzIzLzIwMTggMDE6MjQgYW0gLSBTU05cclxuXHJcbi8vIDA5LzIxLzIwMTkgMTI6MjcgcG0gLSBTU04gLSBbMjAxOTA5LTEyMjddIFJldmlzZSB0byBhY2NvbW1vZGF0ZSBCYWJlbC9XZWJwYWNrXHJcblxyXG52YXIgc2l0ZV9pbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgLy8gMDkvMjEvMjAxOSAxMjoyNyBwbSAtIFNTTiAtIFsyMDE5MDktMTIyN10gUmV2aXNlIHRvIGFjY29tbW9kYXRlIEJhYmVsL1dlYnBhY2tcclxuICAgIHZhciBzZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJChcIltjbWQtbmFtZV1cIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjbWROYW1lID0gJCh0aGlzKS5hdHRyKCdjbWQtbmFtZScpO1xyXG4gICAgICAgICAgICB2YXIgcG9wdXBOYW1lID0gJCh0aGlzKS5hdHRyKCdwb3B1cC1uYW1lJyk7XHJcbiAgICAgICAgICAgIHZhciBqUXVlcnlPYmplY3ROYW1lID0gJCh0aGlzKS5hdHRyKCdqUXVlcnlPYmplY3ROYW1lJyk7XHJcbiAgICAgICAgICAgIHZhciBqUXVlcnlPYmplY3ROYW1lMiA9ICQodGhpcykuYXR0cignalF1ZXJ5T2JqZWN0TmFtZTInKTtcclxuXHJcbiAgICAgICAgICAgIC8vICAgICAgYWxlcnQoJ2NsaWNrZWQgbWUhIGNtZE5hbWUgWycgKyBjbWROYW1lICsgXCJdIHBvcHVwLW5hbWUgIFtcIiArIHBvcHVwTmFtZSArIFwiXVwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjbWROYW1lID09PSBcIm9wZW4tcG9wdXBcIikge1xyXG4gICAgICAgICAgICAgICAgJChwb3B1cE5hbWUpLm1vZGFsKHsgYmFja2Ryb3A6ICdzdGF0aWMnLCBrZXlib2FyZDogZmFsc2UgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJChcIiNhZGRTaXRlX1BhZ2VDb250ZW50XCIpLmxvYWQoXCIvdGltZXMvc3RhcnRcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIDAzLzE0LzIwMTkgMDk6MzMgYW0gLSBTU04gLSBBZGRpbmcgaGlkZSBhbmQgc2hvd1xyXG4gICAgICAgICAgICBpZiAoY21kTmFtZSA9PT0gXCJoaWRlT2JqZWN0XCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkKGpRdWVyeU9iamVjdE5hbWUpLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjbWROYW1lID09PSBcInNob3dPYmplY3RcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICQoalF1ZXJ5T2JqZWN0TmFtZSkuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNtZE5hbWUgPT09IFwic21vb3RoLXNjcm9sbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyQoJ2JvZHknKS5zY3JvbGxzcHkoeyB0YXJnZXQ6IGpRdWVyeU9iamVjdE5hbWUgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihqUXVlcnlPYmplY3ROYW1lKS5zY3JvbGxJbnRvVmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gMDQvMDgvMjAxOSAwMTozMyBhbSAtIFNTTiAtIFsyMDE5MDQwNy0yMzQ1XSAtIFRpbWVMb2dcclxuXHJcbiAgICAgICAgICAgIGlmIChjbWROYW1lID09PSBcInNldC1kZWZhdWx0LXRpbWVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY2QgPSBkLmdldEZ1bGxZZWFyKCkgKyBcIi1cIiArIHAoZC5nZXRNb250aCgpICsgMSwgMiwgJzAnKSArIFwiLVwiICsgcChkLmdldERhdGUoKSwgMiwgJzAnKSArIFwiVFwiICsgcChkLmdldEhvdXJzKCksIDIsICcwJykgKyBcIjpcIiArIHAoZC5nZXRNaW51dGVzKCksIDIsICcwJykgKyBcIjpcIiArIHAoZC5nZXRTZWNvbmRzKCksIDIsICcwJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgJChqUXVlcnlPYmplY3ROYW1lKS52YWwoY2QpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIDA0LzE5LzIwMTkgMDQ6NDggcG0gLSBTU04gLSBbMjAxOTA0MTktMTY0N10gLSBTZXQgYW1vdW50IGZvciBUb3RhbFNlY29uZHNcclxuXHJcbiAgICAgICAgICAgIGlmIChjbWROYW1lID09PSBcInNldC1Ub3RhbFBlcmlvZFwiKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vIDA1LzE5LzIwMTkgMDE6MTAgcG0gLSBTU04gLSBBZGRyZXNzaW5nIGVycm9yLiBzdHJpbmcgfCBudW1iZXIgfCBzdHJpbmdbXSBjYW5ub3QgY29udmVydCB0b3Agc3RyaW5nIHwgbnVtYmVyXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gMDUvMjAyMDE5IDAyOjM5IHBtIC0gU1NOIC0gTm8gY2FsY3VsYXRpbmcgZWxhcHNlZCB0aW1lIGNvcnJlY3RseSB3aXRoIFR5cGVTY3JpcHQgY29udmVyc2lvbi5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGQxMSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkRGF0ZTogc3RyaW5nID0gKDxIVE1MSW5wdXRFbGVtZW50PiQoalF1ZXJ5T2JqZWN0TmFtZSlbMF0pLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkMTIgPSBuZXcgRGF0ZShzZWxlY3RlZERhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWx0YV8xID0gZDExLmdldFRpbWUoKS52YWx1ZU9mKCkgLSBkMTIuZ2V0VGltZSgpLnZhbHVlT2YoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGFfMiA9IE1hdGguZmxvb3IoZGVsdGFfMSAvIDEwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICQoalF1ZXJ5T2JqZWN0TmFtZTIpLnZhbChkZWx0YV8yKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gMDkvMjEvMjAxOSAxMjoyNyBwbSAtIFNTTiAtIFsyMDE5MDktMTIyN10gUmV2aXNlIHRvIGFjY29tbW9kYXRlIEJhYmVsL1dlYnBhY2tcclxuXHJcbiAgICAgICAgLy8gZnVuY3Rpb24gcChzdHIxLCBsZW4sIGNoYXIpIHtcclxuICAgICAgICB2YXIgcCA9IGZ1bmN0aW9uIChzdHIxLCBsZW4sIGNoYXIpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdHIgPSBzdHIxLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoID4gbGVuKSByZXR1cm4gc3RyO1xyXG4gICAgICAgICAgICB2YXIgczEgPSBjaGFyLnJlcGVhdChsZW4pICsgc3RyO1xyXG4gICAgICAgICAgICB2YXIgczIgPSBzMS5zdWJzdHJpbmcobGVuICsgKHN0ci5sZW5ndGggLSBsZW4pKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzMjtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyAwMy8xNC8yMDE5IDEwOjI4IGFtIC0gU1NOXHJcblxyXG4gICAgICAgICQod2luZG93KS5vbignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgeSA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh5ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgJCgnLmZpeGVkX2FuY2hvcicpLmZhZGVJbignc2xvdycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnLmZpeGVkX2FuY2hvcicpLmZhZGVPdXQoJ3Nsb3cnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG5cclxuICAgIH07XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAvLyAwOC8yMS8yMDE5IDAxOjQ4IHBtIFxyXG4gICAgLy8gMDkvMjEvMjAxOSAxMjoyNyBwbSAtIFNTTiAtIFsyMDE5MDktMTIyN10gUmV2aXNlIHRvIGFjY29tbW9kYXRlIEJhYmVsL1dlYnBhY2tcclxuICAgIC8vIGZ1bmN0aW9uIHNob3dDb2xsYXBzZWREaXZzKCkge1xyXG4gICAgdmFyIHNob3dDb2xsYXBzZWREaXZzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkKFwiW2RhdGEtdG9nZ2xlPSdjb2xsYXBzZSddXCIpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIDA5LzIxLzIwMTkgMTI6MjcgcG0gLSBTU04gLSBbMjAxOTA5LTEyMjddIFJldmlzZSB0byBhY2NvbW1vZGF0ZSBCYWJlbC9XZWJwYWNrXHJcbiAgICAvLyBmdW5jdGlvbiBwcmVmaXhQcmVXaXRoU2hvd0hpZGVBbmNob3IoKSB7XHJcbiAgICB2YXIgcHJlZml4UHJlV2l0aFNob3dIaWRlQW5jaG9yID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHJcbiAgICAgICAgLy8gMDQvMjYvMjAxOSAwOTo1NiBwbSAtIFNTTiAtIFsyMDE5MDQyNi0yMTU2XSAtIFswMDFdIC0gSGlkZSBwcmUgYW5kIGFkZCBhIGxpbmsgdG8gc2hvdy5cclxuICAgICAgICAvLyAwNi8wMS8yMDE5IDA4OjA3IHBtIC0gU1NOIC0gWzIwMTkwNjAxLTIwMDddIC0gQWRkIHRpdGxlXHJcblxyXG4gICAgICAgICQoJ3ByZScpLmVhY2goZnVuY3Rpb24gKGFhKSB7XHJcblxyXG4gICAgICAgICAgICAkKHRoaXMpLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0aXRsZUF0dHJpYiA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBsZXQgX3RpdGxlID0gJCh0aGlzKS5hdHRyKFwidGl0bGVcIik7XHJcbiAgICAgICAgICAgIGxldCBfdGl0bGVfY2FwdGlvbiA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAoX3RpdGxlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aXRsZUF0dHJpYiA9IFwiIHRpdGxlPSdcIiArIF90aXRsZSArIFwiJyBcIlxyXG4gICAgICAgICAgICAgICAgX3RpdGxlX2NhcHRpb24gPSBcIjogXCIgKyBfdGl0bGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGl0bGUgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkKCc8cD48YSBjbWQtbmFtZT1cInNob3dzaWJsaW5nXCIgJyArIHRpdGxlQXR0cmliICsgJyA+U2hvdyBjb2RlJyArIF90aXRsZV9jYXB0aW9uICsgJzwvYT48L3A+JykuaW5zZXJ0QmVmb3JlKHRoaXMpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gMDUvMDEvMjAxOSAwNDo1MiBhbSAtIFNTTiAtIFVzZSBKYXZhU2NyaXB0IG9ubHlcclxuXHJcbiAgICAgICAgdmFyIGxpc3QxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlJyk7XHJcblxyXG4gICAgICAgIC8vIDA1LzE5LzIwMTkgMTI6MzAgcG0gLSBTU04gLSBbMjAxOTA1MTktMTEzMl0gLSBbMDA0XSAtIEFkZHJlc3MgZGVmaW5pdGVseSB0eXBlZCBlcnJvcnNcclxuICAgICAgICAvLyBmb3IgKHZhciBhIG9mIGxpc3QxKSB7XHJcbiAgICAgICAgLy8gbGlzdDEuZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudEl0ZW0sIGN1cnJlbnRJbmRleCwgbGlzdE9iaikge1xyXG4gICAgICAgIGxpc3QxLmZvckVhY2goZnVuY3Rpb24gKGEsIGN1cnJlbnRJbmRleCwgbGlzdE9iaikge1xyXG5cclxuICAgICAgICAgICAgLy8gMDUvMTcvMjAxOSAwNDoxNiBhbSAtIFNTTiAtIFVwZGF0ZSB0byBleGNsdWRlIGhpZ2hsaWdodGluZ1xyXG4gICAgICAgICAgICAvL3ZhciBiID0gYS5pbm5lckhUTUwucmVwbGFjZSgvPC9nLCAnJmx0OycpOyAgXHJcbiAgICAgICAgICAgIC8vIEV4Y2x1ZGUgPGggYW5kIDxuLiBBbHJlYWR5IHNldHVwIGZvciA8aS4gIFNlZSBzaXRlLmNzcy5cclxuXHJcblxyXG4gICAgICAgICAgICAvLyAwNi8wNy8yMDE5IDExOjUwIGFtIC0gU1NOIC0gVXBkYXRlIC0gTWF0Y2hlcyBzaG93biBodHRwczovL3d3dy5yZWdleHRlc3Rlci5jb20vXHJcbiAgICAgICAgICAgIC8vIHZhciBiID0gYS5pbm5lckhUTUwucmVwbGFjZSgvPChbXml8Xi9pfF5ofF4vaHxebnxeL25dKXsxfVteXFxzfF4+XXsxfS9nLCAnJmx0OyQxJyk7XHJcblxyXG4gICAgICAgICAgICAvLyB2YXIgYiA9IGEuaW5uZXJIVE1MLnJlcGxhY2UoLyg8KSgoPyFcXC8/W258aXxoXSkpKC4qPz4pL2csICdcXG4xLS0tXFxuWyQmXVxcbjItLS1cXG5bJDFdXFxuMy0tLVxcblskMl1cXG40LS0tXFxuWyQzXVxcblxcbicpO1xyXG5cclxuICAgICAgICAgICAgLy8gV2UgaGF2ZSBub3QgY292ZXJyZWQgaDEsIGgyLCBldGMuXHJcbiAgICAgICAgICAgIC8vIGtub2Nrb3V0IGlzIGRvaW5nIGl0cyBvd24gdGhpbmcgd2hlbiBpdCBjb21lcyB0byB0YWdzLiBFdmlkZW50IHdpdGggdGhlIHVzZSBvZiBnZW5lcmljIHR5cGVzICggZnVuY3Rpb248U29tZVR5cGU+IClcclxuICAgICAgICAgICAgdmFyIGIgPSBhLmlubmVySFRNTC5yZXBsYWNlKC8oPCkoKD8hXFwvP1tufGl8aF0pKSguKj8+KS9nLCAnJmx0OyQzJyk7XHJcblxyXG5cclxuICAgICAgICAgICAgYS5pbm5lckhUTUwgPSBiO1xyXG5cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gMDQvMjYvMjAxOSAxMDoxNCBwbSAtIFNTTiAtIFsyMDE5MDQyNi0yMTU2XSAtIFswMDJdIC0gSGlkZSBwcmUgYW5kIGFkZCBhIGxpbmsgdG8gc2hvdy5cclxuXHJcbiAgICAgICAgJChcIltjbWQtbmFtZV1cIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjbWROYW1lID0gJCh0aGlzKS5hdHRyKCdjbWQtbmFtZScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNtZE5hbWUgPT09IFwic2hvd3NpYmxpbmdcIikge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgX3ByZSA9ICQodGhpcykucGFyZW50KCkubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9saW5rID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAwNi8wMS8yMDE5IDA4OjA3IHBtIC0gU1NOIC0gWzIwMTkwNjAxLTIwMDddIC0gQWRkIHRpdGxlXHJcbiAgICAgICAgICAgICAgICBsZXQgX3RpdGxlID0gJCh0aGlzKS5hdHRyKCd0aXRsZScpO1xyXG4gICAgICAgICAgICAgICAgbGV0IF90aXRsZV9jYXB0aW9uID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoX3RpdGxlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGl0bGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlX2NhcHRpb24gPSBcIjogXCIgKyBfdGl0bGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF9wcmUuaXMoXCI6dmlzaWJsZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9saW5rLnRleHQoJ1Nob3cgY29kZScgKyBfdGl0bGVfY2FwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgX3ByZS5mYWRlT3V0KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF9wcmUuZmFkZUluKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2xpbmsudGV4dCgnSGlkZSBjb2RlJyArIF90aXRsZV9jYXB0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyAwNC8yOS8yMDE5IDA3OjM2IHBtIC0gU1NOIC0gWzIwMTkwNDI5LTE3NDhdIC0gWzAwNl0gLSBBbmd1bGFyIGNsb2NrIG91dCBwb3B1cCAgLSBCZWdpblxyXG5cclxuICAgIC8vIFNvdXJjZSBodHRwczovL3d3dy5jLXNoYXJwY29ybmVyLmNvbS9VcGxvYWRGaWxlLzFkMzExOS9kYXRlLXNlcmlhbGl6YXRpb24td2l0aC1hbmd1bGFyLWpzLXdlYi1hcGkvXHJcblxyXG4gICAgdmFyIGlzbzg2MDFSZWdFeCA9IC8oMTl8MjB8MjEpXFxkXFxkKFstLy5dKSgwWzEtOV18MVswMTJdKVxcMigwWzEtOV18WzEyXVswLTldfDNbMDFdKVQoXFxkXFxkKShbOi8uXSkoXFxkXFxkKShbOi8uXSkoXFxkXFxkKS87XHJcblxyXG5cclxuICAgIC8vIDA5LzIxLzIwMTkgMTI6MjcgcG0gLSBTU04gLSBbMjAxOTA5LTEyMjddIFJldmlzZSB0byBhY2NvbW1vZGF0ZSBCYWJlbC9XZWJwYWNrXHJcbiAgICAvLyBmdW5jdGlvbiBmbkNvbnZlckRhdGUoaW5wdXQpIHtcclxuICAgIHZhciBmbkNvbnZlckRhdGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIikgcmV0dXJuIGlucHV0O1xyXG5cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaW5wdXQpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghaW5wdXQuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbnB1dFtrZXldO1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICAgICAgdmFyIG1hdGNoO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgKG1hdGNoID0gdmFsdWUubWF0Y2goaXNvODYwMVJlZ0V4KSkpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0W2tleV0gPSBuZXcgRGF0ZSh2YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBmbkNvbnZlckRhdGUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgc2V0RGVmYXVsdHMoKTtcclxuXHJcbiAgICAgICAgLy8gMDQvMjkvMjAxOSAwNzozNiBwbSAtIFNTTiAtIFsyMDE5MDQyOS0xNzQ4XSAtIFswMDZdIC0gQW5ndWxhciBjbG9jayBvdXQgcG9wdXAgIC0gRW5kXHJcbiAgICAgICAgLy8gMDkvMTAvMjAxOSAwODo1MyBwbSAtIFNTTiAtIFJlcGxhY2VkXHJcbiAgICAgICAgLy8gMDkvMTEvMjAxOSAwNzowOCBhbSAtIFNTTiAtIERldlNpdGVJbmRleCBwMSBkYXRhIGlzIGNvbWluZyBhZnRlciBkb2N1bWVudCBpcyByZWFkeS5cclxuICAgICAgICBzZXRUaW1lb3V0KHByZWZpeFByZVdpdGhTaG93SGlkZUFuY2hvciwgMjAwMCk7XHJcbiAgICAgICAgLy8kKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyAgICBjb25zb2xlLmxvZygnMjAxOTA5MTAtMjA1NCAtIHByZWZpeFByZVdpdGhTaG93SGlkZUFuY2hvciB0aW1lb3V0IHRvIGpxdWVyeSByZWFkeScpO1xyXG4gICAgICAgIC8vICAgIHByZWZpeFByZVdpdGhTaG93SGlkZUFuY2hvcigpO1xyXG4gICAgICAgIC8vfSk7XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4ge1xyXG5cclxuICAgICAgICBmbkNvbnZlckRhdGU6IGZuQ29udmVyRGF0ZSxcclxuICAgICAgICBzaG93Q29sbGFwc2VkRGl2czogc2hvd0NvbGxhcHNlZERpdnMsXHJcbiAgICAgICAgcHJlZml4UHJlV2l0aFNob3dIaWRlQW5jaG9yOiBwcmVmaXhQcmVXaXRoU2hvd0hpZGVBbmNob3JcclxuICAgIH07XHJcblxyXG59KCk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCB7IHNpdGVfaW5zdGFuY2UgfTtcclxuXHJcbiIsIu+7v1xyXG4vLyAwOS8xMy8yMDE5IDA1OjQ4IGFtIC0gU1NOIC0gWzIwMTkwOTEzLTA1NDhdIC0gWzAwMV0gLSBDcmF0ZSBnZW5lcmljIGRyb3Bkb3duIGxpc3QgZGlyZWN0aXZlXHJcblxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B0eXBlcy9qcXVlcnkvanF1ZXJ5LmQudHNcIiAvPiBcclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdHlwZXMvYW5ndWxhci9pbmRleC5kLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL0RhdGFTZXJ2aWNlcy50c1wiLz5cclxuXHJcblxyXG4vLyAwOS8yMC8yMDE5IDEwOjUyIGFtIC0gU1NOIC0gQWRkZWQgaW1wb3J0IGFuZ3VsYXJcclxuaW1wb3J0ICogYXMgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcclxuXHJcblxyXG4vLyAwOS8yMC8yMDE5IDEwOjIxIGFtIC0gU1NOIC0gUmVwbGFjZSBhbmd1bGFyLm1vZHVsZVxyXG5cclxuXHJcbmltcG9ydCAqIGFzIHNzbl9nbG9iYWxzIGZyb20gJy4uL2dsb2JhbHMnO1xyXG5cclxuXHJcbnZhciBkcm9wZG93bkxpc3REaXJlY3RpdmVfaW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cclxuICAgIHZhciBkb3duZG93bkxpc3RfYW5ndWxhcl9tb2R1bGUgPSBzc25fZ2xvYmFscy5nbG9iYWxzX2luc3RhbmNlLmdldEluc3RhbmNlKFwiZGVtb1NpdGVzX0luZGV4X1RpbWVzaGVldFwiLCBbJ3VpLmJvb3RzdHJhcCddKTtcclxuXHJcblxyXG4gICAgZG93bmRvd25MaXN0X2FuZ3VsYXJfbW9kdWxlLmNvbnRyb2xsZXIoJ3V0aWxpdHlDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uICgkc2NvcGUsICRhdHRycywgJGxvY2F0aW9uKSB7XHJcblxyXG5cclxuICAgICAgICAvLyBOZWVkZWQgdG8gYmUgYWJsZSB0byBzdWJtaXQgZm9ybVxyXG4gICAgICAgIHZhciBmb3JtTmFtZSA9ICRhdHRyc1snZm9ybU5hbWUnXTtcclxuICAgICAgICB2YXIgZm9ybTEgPSAkKFwiW25hbWU9J1wiICsgZm9ybU5hbWUgKyBcIiddXCIpLmdldCgwKTtcclxuICAgICAgICB2YXIgYWJzVXJsID0gJGxvY2F0aW9uLmFic1VybCgpLnRyaW0oKTtcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8gJChmb3JtMSkuYXR0cihcImFjdGlvblwiLCBhYnNVcmwpO1xyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdEZvcm1fMiA9IGZ1bmN0aW9uIChldmVudCwgZm9ybSkge1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS5zdWJtaXRGb3JtXzEgPSBmdW5jdGlvbiAoZXZlbnQsIGZvcm0pIHtcclxuXHJcbiAgICAgICAgICAgIGlmICghZm9ybS4kdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1dKTtcclxuXHJcblxyXG4gICAgZG93bmRvd25MaXN0X2FuZ3VsYXJfbW9kdWxlLmRpcmVjdGl2ZSgnZHJvcGRvd25MaXN0RGlyZWN0aXZlJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB2YXIgY29udHJvbGxlciA9IGZ1bmN0aW9uICgkaHR0cCwgJHEsICRzY29wZSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgdm0uZmlyc3RSdW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdm0uaXNWYWxpZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIF9pc1ZhbGlkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kaXNjaXBsaW5lU2VsZWN0ZWQpIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFZhbHVlID0gJHNjb3BlLmRpc2NpcGxpbmVTZWxlY3RlZC5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCJbbmFtZT0nXCIgKyB0aGlzLmtleUNvbHVtbiArIFwiJ11cIikudmFsKCRzY29wZS5kaXNjaXBsaW5lU2VsZWN0ZWQuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaXNWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLyAwOS8xNi8yMDE5IDAyOjQ4IGFtIC0gU1NOIC0gQWRkZWQgdG8gc2V0IGRlZmF1bHQgdmFsdWVcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gJChcIltuYW1lPSdcIiArIHRoaXMua2V5Q29sdW1uICsgXCInXVwiKS52YWwoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZtLmZpcnN0UnVuKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDA5LzE2LzIwMTkgMDQ6MTggYW0gLSBTU04gLSBbMjAxOTA5MTYtMDM1NV0gLSBbMDAzXSAtIEFkZGluZyBKb2JBUEkgY29udHJvbGxlclxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2bS5BUElVcmwgPSBcIk5vdFNldF8yMDE5MDkxNl8wNDE1XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLnR5cGVBaGVhZExhYmVsID0gXCJOb3RTZXRfMjAxOTA5MTZfMDUzNFwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMua2V5Q29sdW1uLnRvTG93ZXJDYXNlKCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RpbWVsb2cuZGlzY2lwbGluZWlkJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLkFQSVVybCA9ICcvYXBpL0Rpc2NpcGxpbmVBUEknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0udHlwZUFoZWFkTGFiZWwgPSBcIkRlc2NpcGxpbmVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGltZWxvZy5qb2JpZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5BUElVcmwgPSAnL2FwaS9qb2JhcGkvdHlwZWFoZWFkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnR5cGVBaGVhZExhYmVsID0gXCJKb2IgVGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmZpcnN0UnVuID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmdldERpc2NpcGxpbmVDdXJyZW50KGN1cnJlbnRWYWx1ZSkudGhlbih2bS5jdXJyZW50RGlzcGxpbmVMb29rdXBTdWNjZXNzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9pc1ZhbGlkO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdm0uY3VycmVudERpc3BsaW5lTG9va3VwU3VjY2VzcyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8vLyAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2NpcGxpbmVTZWxlY3RlZCA9IHsgaWQ6IHJlc3BvbnNlLmRhdGEuZGlzY2lwbGluZUlkLCB0aXRsZTogcmVzcG9uc2UuZGF0YS5kaXNjaXBsaW5lU2hvcnQgfTtcclxuICAgICAgICAgICAgICAgICAgICAvL2FkZHJlc3Nlcy5wdXNoKHsgaWQ6IHJlc3BvbnNlLmRhdGEuZGlzY2lwbGluZUlkLCB0aXRsZTogcmVzcG9uc2UuZGF0YS5kaXNjaXBsaW5lU2hvcnQgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDA5LzE2LzIwMTkgMDU6MzAgYW0gLSBTU04gLSBbMjAxOTA5MTYtMDM1NV0gLSBbMDA4XSAtIEFkZGluZyBKb2JBUEkgY29udHJvbGxlclxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kaXNjaXBsaW5lSWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNjaXBsaW5lU2VsZWN0ZWQgPSB7IGlkOiBkYXRhLmRpc2NpcGxpbmVJZCwgdGl0bGU6IGRhdGEuZGlzY2lwbGluZVNob3J0IH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50YV9pZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2NpcGxpbmVTZWxlY3RlZCA9IHsgaWQ6IGRhdGEudGFfaWQsIHRpdGxlOiBkYXRhLnRhX2Rlc2NyaXB0aW9uIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdm0uZ2V0RGlzY2lwbGluZXMgPSBmdW5jdGlvbiAobG9va3VwVmFsdWUpIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGxvb2t1cFZhbHVlID09PSBudWxsKSBsb29rdXBWYWx1ZSA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB2bS5BUElVcmxcclxuXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKHR5cGVhaGVhZERpc2NpcGxpbmVTdWNjZXNzLCB0eXBlYWhlYWREaXNjaXBsaW5lRXJyb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0eXBlYWhlYWREaXNjaXBsaW5lU3VjY2VzcyhyZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWRkcmVzc2VzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXNwb25zZS5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDA5LzE2LzIwMTkgMDU6MTMgYW0gLSBTU04gLSBbMjAxOTA5MTYtMDM1NV0gLSBbMDA2XSAtIEFkZGluZyBKb2JBUEkgY29udHJvbGxlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hpbGUgZGV2ZWxvcG1lbnQgaW4gcHJvZ3Jlc3NcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5kaXNjaXBsaW5lSWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGlzY2lwbGluZVNob3J0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihsb29rdXBWYWx1ZS50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3Nlcy5wdXNoKHsgaWQ6IGl0ZW0uZGlzY2lwbGluZUlkLCB0aXRsZTogaXRlbS5kaXNjaXBsaW5lU2hvcnQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRhX2lkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRhX2Rlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihsb29rdXBWYWx1ZS50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3Nlcy5wdXNoKHsgaWQ6IGl0ZW0udGFfaWQsIHRpdGxlOiBpdGVtLnRhX2Rlc2NyaXB0aW9uIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGFkZHJlc3Nlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHR5cGVhaGVhZERpc2NpcGxpbmVFcnJvcihyZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAvLyAwOS8xNi8yMDE5IDAyOjU3IGFtIC0gU1NOIC0gQWRkZWQgdG8gZ2V0IGN1cnJlbnQgdmFsdWUgYW5kIHVwZGF0ZSB2aWV3LlxyXG5cclxuICAgICAgICAgICAgdm0uZ2V0RGlzY2lwbGluZUN1cnJlbnQgPSBmdW5jdGlvbiAobG9va3VwSUQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobG9va3VwSUQgPT09IG51bGwpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogdm0uQVBJVXJsICsgXCIvXCIgKyBsb29rdXBJRFxyXG5cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4odHlwZWFoZWFkRGlzY2lwbGluZVN1Y2Nlc3MsIHR5cGVhaGVhZERpc2NpcGxpbmVFcnJvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHR5cGVhaGVhZERpc2NpcGxpbmVTdWNjZXNzKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHR5cGVhaGVhZERpc2NpcGxpbmVFcnJvcihyZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG5cclxuICAgICAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIvanMvRHJvcGRvd25MaXN0L0Ryb3BEb3duTGlzdERpcmVjdGl2ZS5odG1sXCIsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCAnJHEnLCAnJHNjb3BlJywgY29udHJvbGxlcl0sXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtMTAxJyxcclxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSwgLy9yZXF1aXJlZCBpbiAxLjMrIHdpdGggY29udHJvbGxlckFzIC0gVkVSSUZJRUQuXHJcbiAgICAgICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgICAgICBrZXlDb2x1bW46IFwiQGtleVwiLFxyXG4gICAgICAgICAgICAgICAgZm9ybU5hbWU6IFwiPVwiICAvLyBOZWVkZWQgZm9yIHBvc3RpbmcgZm9ybSAoUmVwbGFjaW5nIHVybClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkb3duZG93bkxpc3RfYW5ndWxhcl9tb2R1bGU6IGRvd25kb3duTGlzdF9hbmd1bGFyX21vZHVsZVxyXG4gICAgfTtcclxuXHJcbn0oKTtcclxuXHJcblxyXG5cclxuZXhwb3J0IHsgZHJvcGRvd25MaXN0RGlyZWN0aXZlX2luc3RhbmNlIH07XHJcblxyXG4iLCLvu79cclxuXHJcbi8vIDA0LzEyLzIwMTkgMDI6MzUgcG0gLSBTU04gLSBbMjAxOTA0MTItMTEyNl0gLSBUaW1lbG9nIC0gc2F2ZSBkYXRhIC0gUmVuYW1lIG1vZHVsZSB0byBzc25fZGV2c2l0ZV9hbmd1bGFyX21vZHVsZVxyXG5cclxuXHJcbi8vIDA1LzA0LzIwMTkgMDk6MjYgYW0gLSBTU04gLSBbMjAxOTA1MDQtMDg1NV0gLSBbMDA0XSAtIFRlc3RpbmcgaWYgd2UgY2FuIHJlcGxhY2UgZ2xvYmFsIHZhcmlhYmxlXHJcbi8vIENvbnZlcnQgdG8gVHlwZVNjcmlwdFxyXG4vLyAwNS8wNC8yMDE5IDA5OjU4IGFtIC0gU1NOIC0gU2luY2UgaGF2aW5nIHRvIGltcG9ydCBhbmd1bGFyIHdoZW4gY29udmVydGluZyB0byBhIG1vZHVsZVxyXG5cclxuXHJcbmltcG9ydCAqIGFzICAgSUNvbHVtbkJhZ1RlbXAgZnJvbSAnLi9JQ29sdW1uQmFnJztcclxuXHJcbmltcG9ydCAqIGFzICAgZ2xvYmFscyBmcm9tICcuL2dsb2JhbHMnO1xyXG5cclxuaW1wb3J0ICogYXMgYW5ndWxhciBmcm9tIFwiYW5ndWxhclwiO1xyXG5cclxuXHJcblxyXG52YXIgZGF0YVNlcnZpY2VfaW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cclxuICAgIHZhciBkb1NldHVwID0gZnVuY3Rpb24gKGN1cnJlbnRBcHBsaWNhdGlvbjogc3RyaW5nKSB7XHJcblxyXG5cclxuICAgICAgICB2YXIgc3NuX2RldnNpdGVfYW5ndWxhcl9tb2R1bGUgPSBnbG9iYWxzLmdsb2JhbHNfaW5zdGFuY2UuZ2V0SW5zdGFuY2UoY3VycmVudEFwcGxpY2F0aW9uKTtcclxuXHJcblxyXG4gICAgICAgIHNzbl9kZXZzaXRlX2FuZ3VsYXJfbW9kdWxlLmZhY3RvcnkoXCJkYXRhU2VydmljZVwiLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIF9kZXZTaXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdmFyIF9nZXREZXZTaXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvZGVtb3NpdGVzYXBpJylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmNvcHkocmVzdWx0LmRhdGEsIF9kZXZTaXRlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gMDQvMjkvMjAxOSAwNTo0OSBwbSAtIFNTTiAtIFsyMDE5MDQyOS0xNzQ4XSAtIFswMDFdIC0gQW5ndWxhciBjbG9jayBvdXQgcG9wdXBcclxuXHJcbiAgICAgICAgICAgIHZhciBfZ2V0VGltZWxvZyA9IGZ1bmN0aW9uIChpZCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4vLyAwOS8yNC8yMDE5IDA3OjE1IGFtIC0gU1NOIC0gWzIwMTkwOTI0LTA0MDFdIC0gWzAwOV0gLSBRdWljayB0aW1lbG9nIGVudHJ5XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3RpbWVsb2dhcGkvZ2V0X2N1c3RvbS8nICsgaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHsgRXJyb3I6ICdGYWlsZWQgY2FsbCB0byBnZXQgdGltZWxvZyBbMjAxOTA4MjktMTgxOV0nIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgX2FkZERldlNpdGUgPSBmdW5jdGlvbiAoZGV2U2l0ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9kZW1vc2l0ZXNhcGknLCBkZXZTaXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0LmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gMDkvMDYvMjAxOSAwNDo0NSBwbSAtIFNTTiAtIFsyMDE5MDkwNi0wNTE4XSAtIFswMDNdIC0gQW5ndWxhciAtIGVkaXRNb2RlIGRpdiBjb250ZW50XHJcbiAgICAgICAgICAgIHZhciBfdXBkYXRlRGV2U2l0ZSA9IGZ1bmN0aW9uIChkZXZTaXRlKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gMDkvMDkvMjAxOSAxMDozMyBwbSAtIFNTTiAtIFsyMDE5MDkwOS0yMTM2XSAtIFswMDRdIC0gc2VsZWN0IHRvcCAyMCBcclxuICAgICAgICAgICAgICAgIC8vIDA5LzI0LzIwMTkgMDM6MzggYW0gLSBTU04gLSBMb2dpYyBlcnJvciAtIHVwZGF0aW5nIHdyb25nIGxpbmtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICRodHRwLnBvc3QoJy9hcGkvZGVtb3NpdGVzYXBpJywgZGV2U2l0ZSlcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvZGVtb3NpdGVzYXBpJywgZGV2U2l0ZSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIDA0LzEyLzIwMTkgMTE6MjYgYW0gLSBTU04gLSBbMjAxOTA0MTItMTEyNl0gLSBUaW1lbG9nIC0gc2F2ZSBkYXRhXHJcblxyXG4gICAgICAgICAgICB2YXIgX2luc2VydFRpbWVMb2cgPSBmdW5jdGlvbiAodGltZUxvZykge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS90aW1lTG9nQVBJJywgdGltZUxvZylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyAwNS8xOS8yMDE5IDAzOjAwIHBtIC0gU1NOIC0gWzIwMTkwNTE5LTE0MTJdIC0gWzAwNF0gLSBDb250aW51ZSB3b3JrIG9uIGFkZGluZyBjb250aW51ZSBvcHRpb24gZm9yIHRpbWVzaGVldCByZWNvcmRcclxuICAgICAgICAgICAgdmFyIF9hZGRPclVwZGF0ZVRpbWVMb2cgPSBmdW5jdGlvbiAodGltZUxvZykge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvdGltZUxvZ0FQSScsIHRpbWVMb2cpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAvLyAwOS8xNy8yMDE5IDEyOjU2IGFtIC0gU1NOIC0gWzIwMTkwOTE2LTExMjNdIC0gWzAxNl0gLSBBZGRpbmcgam9iIHN0YXR1c1xyXG4gICAgICAgICAgICAvLyBBZGRpbmcgb3B0aW9uIHRvIGxpc3QgSm9ic1xyXG5cclxuICAgICAgICAgICAgLy8gMDkvMTgvMjAxOSAwMzoyNCBhbSAtIFNTTiAtIFsyMDE5MDkxNy0wOTI5XSAtIFswMTddIC0gQWRkaW5nIHBhZ2luZyBmb3IgYW5ndWxhciBsaXN0c1xyXG4gICAgICAgICAgICAvLyB2YXIgX2dldEpvYnMgPSBmdW5jdGlvbiAocGFnZU5vLCByZWNvcmRzUGVyUGFnZSwgY29sdW1uTmFtZSwgZGVzYykge1xyXG4gICAgICAgICAgICB2YXIgX2dldEpvYnMgPSBmdW5jdGlvbiAoY29sdW1uQmFnOiBJQ29sdW1uQmFnVGVtcC5kZWZhdWx0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAwOS8yMi8yMDE5IDA4OjIzIGFtIC0gU1NOIC0gWzIwMTkwOTIyLTA4MjJdIC0gWzAwMV0gLSBQbHVnIGluIGpvYiBzdGF0dXMgZmlsdGVyIG9uIGpvYidzIGluZGV4IC0gdXBkYXRlIGRhdGEgc291cmNlXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGpvYl9zdGF0dXNlc19zZWxlY3RlZCA9ICgoY29sdW1uQmFnLmpvYl9zdGF0dXNlc19zZWxlY3RlZC5sZW5ndGggPT0gMCkgPyBcIm5vdGhpbmctMjAxOTA5MjIxMTE3XCIgOiBjb2x1bW5CYWcuam9iX3N0YXR1c2VzX3NlbGVjdGVkLmpvaW4oJywnKSk7XHJcbiAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL2pvYmFwaS9saXN0LycgKyBjb2x1bW5CYWcuY3VycmVudFBhZ2VObyArIFwiL1wiICsgY29sdW1uQmFnLnJlY29yZHNQZXJQYWdlICsgXCIvXCIgKyBjb2x1bW5CYWcuY29sdW1uTmFtZSArIFwiL1wiICsgY29sdW1uQmFnLmRlc2MgKyBcIi9cIiArIGpvYl9zdGF0dXNlc19zZWxlY3RlZClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoeyBFcnJvcjogJ0ZhaWxlZCBjYWxsIHRvIGdldCBqb2JzIFsyMDE5MDkxNy0wMDU3XScgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIDA5LzIxLzIwMTkgMDE6MjUgcG0gLSBTU04gLSBbMjAxOTA5MjEtMTEyOV0gLSBbMDAzXSAtIFBsdWcgaW4gam9iIHN0YXR1cyBmaWx0ZXIgb24gam9iJ3MgaW5kZXhcclxuXHJcbiAgICAgICAgICAgIHZhciBfZ2V0Sm9iX1N0YXR1c2VzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL2pvYl9zdGF0dXNBUEkvJylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdC5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoeyBFcnJvcjogJ0ZhaWxlZCBjYWxsIHRvIGdldCBqb2Jfc3RhdHVzZXMgWzIwMTkwOTIxLTEzMjYnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuXHJcbiAgICAgICAgICAgICAgICBkZXZTaXRlczoga28ub2JzZXJ2YWJsZShfZGV2U2l0ZXMpLFxyXG4gICAgICAgICAgICAgICAgZ2V0RGV2U2l0ZXM6IF9nZXREZXZTaXRlcyxcclxuICAgICAgICAgICAgICAgIGFkZERldlNpdGU6IF9hZGREZXZTaXRlLFxyXG4gICAgICAgICAgICAgICAgLy8gMDkvMDYvMjAxOSAwNDo0NCBwbSAtIFNTTiAtIFsyMDE5MDkwNi0wNTE4XSAtIFswMDJdIC0gQW5ndWxhciAtIGVkaXRNb2RlIGRpdiBjb250ZW50XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVEZXZTaXRlOiBfdXBkYXRlRGV2U2l0ZSxcclxuXHJcbiAgICAgICAgICAgICAgICBpbnNlcnRUaW1lTG9nOiBfaW5zZXJ0VGltZUxvZyxcclxuICAgICAgICAgICAgICAgIGdldFRpbWVsb2c6IF9nZXRUaW1lbG9nLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlVGltZUxvZzogX2FkZE9yVXBkYXRlVGltZUxvZyxcclxuICAgICAgICAgICAgICAgIGdldEpvYnM6IF9nZXRKb2JzLFxyXG4gICAgICAgICAgICAgICAgZ2V0Sm9iX1N0YXR1c2VzOiBfZ2V0Sm9iX1N0YXR1c2VzXHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB9XSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8gICAgICAgIHNzbl9kZXZzaXRlX2FuZ3VsYXJfbW9kdWxlOiBzc25fZGV2c2l0ZV9hbmd1bGFyX21vZHVsZVxyXG4gICAgICAgIGRvU2V0dXA6IGRvU2V0dXBcclxuICAgIH07XHJcblxyXG5cclxufSgpO1xyXG5cclxuXHJcblxyXG5leHBvcnQgeyBkYXRhU2VydmljZV9pbnN0YW5jZSB9O1xyXG5cclxuXHJcbiIsIu+7vyBcclxuXHJcbmltcG9ydCAqIGFzIGdsb2JhbHMgZnJvbSBcIi4uL2dsb2JhbHNcIjtcclxuaW1wb3J0ICogYXMgYW5ndWxhciBmcm9tIFwiYW5ndWxhclwiO1xyXG5pbXBvcnQgKiBhcyB0b3N0ciBmcm9tIFwidG9hc3RyXCI7XHJcblxyXG5cclxuXHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHR5cGVzL3RvYXN0ci9pbmRleC5kLnRzXCIgLz5cclxuXHJcbi8vIDA0LzEyLzIwMTkgMDM6NTcgYW0gLSBTU04gLSBbMjAxOTA0MTItMDE0Ml0gLSBUaW1lc2hlZXRBcHBcclxuXHJcbi8vIDA5LzE4LzIwMTkgMTE6MTMgYW0gLSBTU04gLSBbMjAxOTA5MTgtMDk0M10gLSBbMDA4XSAtIEFkZGluZyBqb2Igc3RhdHVzIG9wdGlvbiB0byBpbmRleFxyXG5cclxuXHJcbnZhciB0aW1lc2hlZXRDb250cm9sbGVyX2luc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciB0aW1lc2hlZXRBcHAgPSBnbG9iYWxzLmdsb2JhbHNfaW5zdGFuY2UuZ2V0SW5zdGFuY2UoXCJ0aW1lc2hlZXRBcHBcIik7XHJcblxyXG5cclxuICAgIHRpbWVzaGVldEFwcC5jb250cm9sbGVyKCdUaW1lc2hlZXRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJGh0dHAnLCAnJHEsIGRhdGFTZXJ2aWNlJyxcclxuICAgICAgICBmdW5jdGlvbiBUaW1lc2hlZXRDb250cm9sbGVyKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsICRodHRwLCAkcSwgZGF0YVNlcnZpY2UsIGpvYklkKSB7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5kaXNjaXBsaW5lU2VsZWN0ZWQgPSB7IGlkOiAwLCB0aXRsZTogJycgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIDA1LzAzLzIwMTkgMDU6NTQgcG0gLSBTU04gLSBbMjAxOTA1MDMtMTUzOV0gLSBbMDEyXSAtIEFkZCBsaW5rIHRvIGNyZWF0ZSB0aW1lbG9nIFxyXG4gICAgICAgICAgICAvLyBBZGQgcGFnZVRpdGxlXHJcbiAgICAgICAgICAgICRzY29wZS5wYWdlVGl0bGUgPSBcIkNsb2NrLWluXCI7XHJcblxyXG5cclxuICAgICAgICAgICAgbGV0IHRpbWVOb3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICB0aW1lTm93LnNldE1pbGxpc2Vjb25kcygwKTtcclxuICAgICAgICAgICAgLy8gdGltZU5vdy5zZXRTZWNvbmRzKDApO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnRpbWVMb2cgPSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lTG9nSWQ6IDAsXHJcbiAgICAgICAgICAgICAgICBpZDogMCxcclxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogdGltZU5vdyxcclxuICAgICAgICAgICAgICAgIHdvcmtEZXRhaWw6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBkaXNjaXBsaW5lSWQ6ICcyJyxcclxuICAgICAgICAgICAgICAgIGpvYklkOiBqb2JJZFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuIFxyXG4gICAgICAgICAgICAkc2NvcGUuZWRpdGFibGVUaW1lTG9nID0gYW5ndWxhci5jb3B5KCRzY29wZS50aW1lTG9nKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5zdWJtaXRGb3JtID0gZnVuY3Rpb24gKCkge1xyXG4gXHJcbiAgICAgICAgICAgICAgICB2YXIgdGVzdCA9ICRzY29wZS5lZGl0YWJsZVRpbWVMb2c7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5lZGl0YWJsZVRpbWVMb2cuZGlzY2lwbGluZUlkID0gJHNjb3BlLmRpc2NpcGxpbmVTZWxlY3RlZC5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmVkaXRhYmxlVGltZUxvZy5pZCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UgPSBkYXRhU2VydmljZS5pbnNlcnRUaW1lTG9nKCRzY29wZS5lZGl0YWJsZVRpbWVMb2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IGRhdGFTZXJ2aWNlLnVwZGF0ZVRpbWVMb2coJHNjb3BlLmVkaXRhYmxlVGltZUxvZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHByb21pc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0MSA9IGRhdGE7XHJcbiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50aW1lTG9nID0gYW5ndWxhci5jb3B5KCRzY29wZS5lZGl0YWJsZVRpbWVMb2cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDIgPSBlcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGltZXNoZWV0Q29udHJvbGxlciAtIDIwMTkwOTIxLTA2NDAgLSBwcm9taXNlID4gZXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0b2FzdHIuaW5mbyhcIkNsb2NrZWQtaW5cIik7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsRm9ybSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpOyAvL3NhbWUgYXMgY2FuY2VsPz8/XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAvLyAwNC8xMy8yMDE5IDExOjAwIGFtIC0gU1NOIC0gWzIwMTkwNDEzLTEwMzddIC0gQWRkIGRpc2NpcGxpbmUgbG9va3VwXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0RGlzY2lwbGluZXMgPSBmdW5jdGlvbiAobG9va3VwVmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobG9va3VwVmFsdWUgPT09IG51bGwpIGxvb2t1cFZhbHVlID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAgICAgLy8gMDUvMDMvMjAxOSAwNDoxNiBwbSAtIFNTTiAtIFsyMDE5MDUwMy0xNTM5XSAtIFswMDZdIC0gQWRkIGxpbmsgdG8gY3JlYXRlIHRpbWVsb2dcclxuICAgICAgICAgICAgICAgIC8vIGZyb20gICB1cmw6ICAnYXBpL0Rpc2NpcGxpbmVBUEknXHJcbiAgICAgICAgICAgICAgICAvLyAgIHRvICAgdXJsOiAnL2FwaS9EaXNjaXBsaW5lQVBJJ1xyXG5cclxuICAgICAgICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hcGkvRGlzY2lwbGluZUFQSSdcclxuXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKHR5cGVhaGVhZERpc2NpcGxpbmVTdWNjZXNzLCB0eXBlYWhlYWREaXNjaXBsaW5lRXJyb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHR5cGVhaGVhZERpc2NpcGxpbmVTdWNjZXNzKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzZXMgPSBbXTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFuZ3VsYXIgLSBmb3JFYWNoIC0gMjAxOTA5MjAtMDcyMC1vXCIpO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXNwb25zZS5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmRpc2NpcGxpbmVTaG9ydC50b0xvd2VyQ2FzZSgpLmluZGV4T2YobG9va3VwVmFsdWUudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3Nlcy5wdXNoKHsgaWQ6IGl0ZW0uZGlzY2lwbGluZUlkLCB0aXRsZTogaXRlbS5kaXNjaXBsaW5lU2hvcnQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGFkZHJlc3Nlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHR5cGVhaGVhZERpc2NpcGxpbmVFcnJvcihyZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIH1dKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRpbWVzaGVldEFwcF9UaW1lc2hlZXRDb250cm9sbGVyOiB0aW1lc2hlZXRBcHBcclxuICAgIH07XHJcblxyXG59KCk7XHJcblxyXG4gXHJcbmV4cG9ydCB7IHRpbWVzaGVldENvbnRyb2xsZXJfaW5zdGFuY2UgfTtcclxuXHJcbiIsIu+7v1xyXG5cclxuXHJcbi8vIDA1LzE5LzIwMTkgMDk6NDUgYW0gLSBTU04gLSBbMjAxOTA1MTktMDgzN10gLSBbMDA1XSAtIEFkZGluZyB0aW1lc2hlZXQgXCJDb250aW51ZVwiIG9wdGlvblxyXG4vLyBDb3BpZWQgZnJvbSBDbG9ja291dC5cclxuXHJcbiBcclxuXHJcbmltcG9ydCAqIGFzIHNzbl9nbG9iYWxzIGZyb20gXCIuLi9nbG9iYWxzXCI7XHJcbmltcG9ydCAqIGFzIGFuZ3VsYXIgZnJvbSAnYW5ndWxhcidcclxuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi9zaXRlJztcclxuXHJcblxyXG52YXIgdGltZXNoZWV0Q29udGludWVDb250cm9sbGVyX2luc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciB0aW1lc2hlZXRBcHAgPSBzc25fZ2xvYmFscy5nbG9iYWxzX2luc3RhbmNlLmdldEluc3RhbmNlKFwidGltZXNoZWV0QXBwXCIpO1xyXG5cclxuICAgIHRpbWVzaGVldEFwcC5jb250cm9sbGVyKCdUaW1lc2hlZXRDb250aW51ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsICckaHR0cCcsICckcScsICdkYXRhU2VydmljZScsICckdGltZW91dCcsICd0aW1lbG9nSWQnLFxyXG5cclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgJGh0dHAsICRxLCBkYXRhU2VydmljZSwgJHRpbWVvdXQsIHRpbWVsb2dJZCkge1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgZGF0YVNlcnZpY2UuZ2V0VGltZWxvZyh0aW1lbG9nSWQpLnRoZW4oZ2V0VGltZWxvZ1N1Y2Nlc3MsIGdldFRpbWVsb2dFcnJvcilcclxuICAgICAgICAgICAgICAgIC5jYXRjaChnZXRUaW1lbG9nQ2F0Y2gpO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUucGFnZVRpdGxlID0gXCJDb250aW51ZSAvIExpbmUgSXRlbVwiO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRpbWVsb2dTdWNjZXNzKGRhdGEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YTIgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5zaXRlX2luc3RhbmNlLmZuQ29udmVyRGF0ZShkYXRhMik7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGxldCB0aW1lTm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRpbWVOb3cuc2V0TWlsbGlzZWNvbmRzKDApO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGltZUxvZyA9IGRhdGEyO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIDA1LzE5LzIwMTkgMDI6NDEgcG0gLSBTU04gLSBbMjAxOTA1MTktMTQxMl0gLSBbMDAzXSAtIENvbnRpbnVlIHdvcmsgb24gYWRkaW5nIGNvbnRpbnVlIG9wdGlvbiBmb3IgdGltZXNoZWV0IHJlY29yZFxyXG4gICAgICAgICAgICAgICAgLy8gc2V0IFRpbWVMb2dJZCA9IDBcclxuICAgICAgICAgICAgICAgICRzY29wZS50aW1lTG9nLnRpbWVMb2dJZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGltZUxvZy5zdGFydFRpbWUgPSB0aW1lTm93O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIDA3LzAyLzIwMTkgMDk6MTcgYW0gLSBTU04gLSBBZGRlZCBudWxsaWZ5IGRhdGVNb2RpZmllZCBcclxuICAgICAgICAgICAgICAgICRzY29wZS50aW1lTG9nLmRhdGVNb2RpZmllZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gMDUvMjEvMjAxOSAwNzozMSBhbSAtIFNTTiAtIEZvcmdvdHRlblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbWVMb2cudG90YWxTZWNvbmRzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdGFibGVUaW1lTG9nID0gYW5ndWxhci5jb3B5KCRzY29wZS50aW1lTG9nKTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXREaXNjaXBsaW5lcyhkYXRhMi5kaXNjaXBsaW5lLmRpc2NpcGxpbmVTaG9ydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2NpcGxpbmVTZWxlY3RlZCA9IHsgaWQ6IGRhdGEyLmRpc2NpcGxpbmUuZGlzY2lwbGluZUlkLCB0aXRsZTogZGF0YTIuZGlzY2lwbGluZS5kaXNjaXBsaW5lU2hvcnQgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAsIDUwMCk7XHJcblxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGltZWxvZ0Vycm9yKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gZGF0YTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRpbWVsb2dDYXRjaChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IGRhdGE7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0Rm9ybSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRlc3QgPSAkc2NvcGUuZWRpdGFibGVUaW1lTG9nO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdGFibGVUaW1lTG9nLmRpc2NpcGxpbmVJZCA9ICRzY29wZS5kaXNjaXBsaW5lU2VsZWN0ZWQuaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5lZGl0YWJsZVRpbWVMb2cudGltZUxvZ0lkID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IGRhdGFTZXJ2aWNlLmluc2VydFRpbWVMb2coJHNjb3BlLmVkaXRhYmxlVGltZUxvZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gZGF0YVNlcnZpY2UudXBkYXRlVGltZUxvZygkc2NvcGUuZWRpdGFibGVUaW1lTG9nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocHJvbWlzZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyAwNS8yMS8yMDE5IDExOjU2IGFtIC0gU1NOIC0gVGVzdGVkIE9LLlxyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDEgPSBkYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50aW1lTG9nID0gYW5ndWxhci5jb3B5KCRzY29wZS5lZGl0YWJsZVRpbWVMb2cpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmluZm8oXCJSZWNvcmQgYWRkZWQuICBSZWxvYWRpbmcgcGFnZS4uLlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwNS8yMS8yMDE5IDEyOjU0IHBtIC0gU1NOIC0gUmVsb2FkIHBhZ2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJGYWlsZWQgdG8gYWRkIHJlY29yZC4gU2VlIGNvbnNvbGUgbG9nLlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxGb3JtID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7IC8vc2FtZSBhcyBjYW5jZWw/Pz9cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0RGlzY2lwbGluZXMgPSBmdW5jdGlvbiAobG9va3VwVmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobG9va3VwVmFsdWUgPT09IG51bGwpIGxvb2t1cFZhbHVlID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2FwaS9EaXNjaXBsaW5lQVBJJ1xyXG5cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4odHlwZWFoZWFkRGlzY2lwbGluZVN1Y2Nlc3MsIHR5cGVhaGVhZERpc2NpcGxpbmVFcnJvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdHlwZWFoZWFkRGlzY2lwbGluZVN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzcG9uc2UuZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5kaXNjaXBsaW5lU2hvcnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKGxvb2t1cFZhbHVlLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzZXMucHVzaCh7IGlkOiBpdGVtLmRpc2NpcGxpbmVJZCwgdGl0bGU6IGl0ZW0uZGlzY2lwbGluZVNob3J0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShhZGRyZXNzZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0eXBlYWhlYWREaXNjaXBsaW5lRXJyb3IocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICB9XSk7XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdGltZXNoZWV0QXBwOiB0aW1lc2hlZXRBcHBcclxuICAgIH07XHJcblxyXG59KCk7XHJcblxyXG4gIFxyXG5cclxuZXhwb3J0IHsgdGltZXNoZWV0Q29udGludWVDb250cm9sbGVyX2luc3RhbmNlIH07XHJcbiIsIu+7v1xyXG4vLyAwNC8xMi8yMDE5IDAzOjU3IGFtIC0gU1NOIC0gWzIwMTkwNDEyLTAxNDJdIC0gVGltZXNoZWV0QXBwXHJcbi8vIDA1LzE5LzIwMTkgMTI6MTggcG0gLSBTU04gLSBbMjAxOTA1MTktMTEzMl0gLSBbMDAzXSAtIEFkZHJlc3MgZGVmaW5pdGVseSB0eXBlZCBlcnJvcnNcclxuLy8gMDkvMjEvMjAxOSAxMTo1MiBhbSAgLSBTU04gLSBVcGdyYWRpbmcgdG8gdXNlIEJhYmVsL1dXZWJwYWNrXHJcblxyXG5pbXBvcnQgKiBhcyBzc25fZ2xvYmFscyBmcm9tIFwiLi4vZ2xvYmFsc1wiO1xyXG5pbXBvcnQgKiBhcyBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInXHJcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vc2l0ZSc7XHJcblxyXG5cclxudmFyIHRpbWVzaGVldENsb2Nrb3V0Q29udHJvbGxlcl9pbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgXHJcbiAgICAvLyAwNS8xOS8yMDE5IDEwOjA2IGFtIC0gU1NOIC0gWzIwMTkwNTE5LTA4MzddIC0gWzAwNl0gLSBBZGRpbmcgdGltZXNoZWV0IFwiQ29udGludWVcIiBvcHRpb25cclxuXHJcblxyXG4gICAgdmFyIHRpbWVzaGVldEFwcCA9IHNzbl9nbG9iYWxzLmdsb2JhbHNfaW5zdGFuY2UuZ2V0SW5zdGFuY2UoXCJ0aW1lc2hlZXRBcHBcIik7XHJcblxyXG4gICAgdGltZXNoZWV0QXBwLmNvbnRyb2xsZXIoJ1RpbWVzaGVldENsb2NrT3V0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJyRodHRwJywgJyRxJywgJ2RhdGFTZXJ2aWNlJywgJ3RpbWVsb2dJZCcsXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFRpbWVzaGVldENvbnRyb2xsZXIoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgJGh0dHAsICRxLCBkYXRhU2VydmljZSwgdGltZWxvZ0lkKSB7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIDA0LzI5LzIwMTkgMDU6NTEgcG0gLSBTU04gLSBbMjAxOTA0MjktMTc0OF0gLSBbMDAyXSAtIEFuZ3VsYXIgY2xvY2sgb3V0IHBvcHVwXHJcbiAgICAgICAgICAgIC8vICRzY29wZS50aW1lTG9nID0gZGF0YVNlcnZpY2UuZ2V0VGltZWxvZygkcm91dGVQYXJhbXMuaWQpO1xyXG4gICAgICAgICAgICAvLyAkc2NvcGUudGltZUxvZyA9IGRhdGFTZXJ2aWNlLmdldFRpbWVsb2codGltZWxvZ0lkKTtcclxuICAgICAgICAgICAgZGF0YVNlcnZpY2UuZ2V0VGltZWxvZyh0aW1lbG9nSWQpLnRoZW4oZ2V0VGltZWxvZ1N1Y2Nlc3MsIGdldFRpbWVsb2dFcnJvcilcclxuICAgICAgICAgICAgICAgIC5jYXRjaChnZXRUaW1lbG9nQ2F0Y2gpO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAvLyAwNS8wMy8yMDE5IDA1OjU0IHBtIC0gU1NOIC0gWzIwMTkwNTAzLTE1MzldIC0gWzAxMl0gLSBBZGQgbGluayB0byBjcmVhdGUgdGltZWxvZyBcclxuICAgICAgICAgICAgLy8gQWRkIHBhZ2VUaXRsZVxyXG4gICAgICAgICAgICAkc2NvcGUucGFnZVRpdGxlID0gXCJDbG9jay1vdXRcIjtcclxuXHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUaW1lbG9nU3VjY2VzcyhkYXRhKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLmRpc2NpcGxpbmVTZWxlY3RlZCA9IHsgaWQ6IDAsIHRpdGxlOiAnJyB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvL2xldCB0aW1lTm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgIC8vdGltZU5vdy5zZXRNaWxsaXNlY29uZHMoMCk7XHJcbiAgICAgICAgICAgICAgICAvLyB0aW1lTm93LnNldFNlY29uZHMoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8kc2NvcGUudGltZUxvZyA9IHtcclxuICAgICAgICAgICAgICAgIC8vICAgIHRpbWVMb2dJZDogMCxcclxuICAgICAgICAgICAgICAgIC8vICAgIGlkOiAwLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgc3RhcnRUaW1lOiB0aW1lTm93LFxyXG4gICAgICAgICAgICAgICAgLy8gICAgd29ya0RldGFpbDogXCJcIixcclxuICAgICAgICAgICAgICAgIC8vICAgIGRpc2NpcGxpbmVJZDogJzInLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgam9iSWQ6IGpvYklkXHJcbiAgICAgICAgICAgICAgICAvL307XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YTIgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5zaXRlX2luc3RhbmNlLmZuQ29udmVyRGF0ZShkYXRhMik7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGltZUxvZyA9IGRhdGEyO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICRzY29wZS5kaXNjaXBsaW5lU2VsZWN0ZWQgPSBkYXRhMi5kaXNjaXBsaW5lLmRpc2NpcGxpbmVTaG9ydDsgLy8geyBpZDogZGF0YTIuZGlzY2lwbGluZS5kaXNjaXBsaW5lSWQsIHRpdGxlOiBkYXRhMi5kaXNjaXBsaW5lLmRpc2NpcGxpbmVTaG9ydH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRhYmxlVGltZUxvZyA9IGFuZ3VsYXIuY29weSgkc2NvcGUudGltZUxvZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldERpc2NpcGxpbmVzKGRhdGEyLmRpc2NpcGxpbmUuZGlzY2lwbGluZVNob3J0KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzY2lwbGluZVNlbGVjdGVkID0geyBpZDogZGF0YTIuZGlzY2lwbGluZS5kaXNjaXBsaW5lSWQsIHRpdGxlOiBkYXRhMi5kaXNjaXBsaW5lLmRpc2NpcGxpbmVTaG9ydCB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICwgNTAwKTtcclxuXHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUaW1lbG9nRXJyb3IoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RpbWVzaGVldENsb2NrT3V0Q29udHJvbGxlciAtIDIwMTkwOTIyLTE0MjYnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGltZWxvZ0NhdGNoKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aW1lc2hlZXRDbG9ja091dENvbnRyb2xsZXIgLSAyMDE5MDkyMi0xNDI3Jyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiBcclxuICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdEZvcm0gPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gJHNjb3BlLmVkaXRhYmxlVGltZUxvZztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRhYmxlVGltZUxvZy5kaXNjaXBsaW5lSWQgPSAkc2NvcGUuZGlzY2lwbGluZVNlbGVjdGVkLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZWRpdGFibGVUaW1lTG9nLmlkID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IGRhdGFTZXJ2aWNlLmluc2VydFRpbWVMb2coJHNjb3BlLmVkaXRhYmxlVGltZUxvZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gZGF0YVNlcnZpY2UudXBkYXRlVGltZUxvZygkc2NvcGUuZWRpdGFibGVUaW1lTG9nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocHJvbWlzZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QxID0gZGF0YTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGltZUxvZyA9IGFuZ3VsYXIuY29weSgkc2NvcGUuZWRpdGFibGVUaW1lTG9nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QyID0gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIlN5c3RlbSBFcnJvciEgQ2hlY2sgY29uc29sZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRvYXN0ci5pbmZvKFwiQ2xvY2tlZC1vdXRcIik7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxGb3JtID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7IC8vc2FtZSBhcyBjYW5jZWw/Pz9cclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gMDQvMTMvMjAxOSAxMTowMCBhbSAtIFNTTiAtIFsyMDE5MDQxMy0xMDM3XSAtIEFkZCBkaXNjaXBsaW5lIGxvb2t1cFxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmdldERpc2NpcGxpbmVzID0gZnVuY3Rpb24gKGxvb2t1cFZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGxvb2t1cFZhbHVlID09PSBudWxsKSBsb29rdXBWYWx1ZSA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdhcGkvRGlzY2lwbGluZUFQSSdcclxuXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKHR5cGVhaGVhZERpc2NpcGxpbmVTdWNjZXNzLCB0eXBlYWhlYWREaXNjaXBsaW5lRXJyb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHR5cGVhaGVhZERpc2NpcGxpbmVTdWNjZXNzKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJlc3BvbnNlLmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpdGVtKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGlzY2lwbGluZVNob3J0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihsb29rdXBWYWx1ZS50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc2VzLnB1c2goeyBpZDogaXRlbS5kaXNjaXBsaW5lSWQsIHRpdGxlOiBpdGVtLmRpc2NpcGxpbmVTaG9ydCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoYWRkcmVzc2VzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdHlwZWFoZWFkRGlzY2lwbGluZUVycm9yKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgfV0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRpbWVzaGVldEFwcDogdGltZXNoZWV0QXBwXHJcbiAgICB9O1xyXG5cclxufSgpO1xyXG5cclxuXHJcbmV4cG9ydCB7IHRpbWVzaGVldENsb2Nrb3V0Q29udHJvbGxlcl9pbnN0YW5jZSB9O1xyXG4iLCLvu79cclxuLy8gMDkvMjEvMjAxOSAwMzo1NyBhbSAtIFNTTiAtIFsyMDE5MDkyMS0wMzU3XSAtIFswMDFdIC0gQ3JlYXRpbmcgbXVsdGlwbGUgZW50cnkgZm9yIFdlYnBhY2tcclxuXHJcblxyXG5cclxuaW1wb3J0IHsgZGF0YVNlcnZpY2VfaW5zdGFuY2UgfSBmcm9tICcuLi9EYXRhU2VydmljZXMnO1xyXG5pbXBvcnQgeyB0aW1lc2hlZXRBcHBfaW5zdGFuY2UgfSBmcm9tICcuL1RpbWVzaGVldEFwcCc7XHJcbmltcG9ydCB7IHRpbWVzaGVldENvbnRyb2xsZXJfaW5zdGFuY2UgfSBmcm9tICcuL1RpbWVzaGVldENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyB0aW1lc2hlZXRDb250aW51ZUNvbnRyb2xsZXJfaW5zdGFuY2UgfSBmcm9tICcuL3RpbWVzaGVldGNvbnRpbnVlY29udHJvbGxlcic7XHJcbmltcG9ydCB7IHRpbWVzaGVldENsb2Nrb3V0Q29udHJvbGxlcl9pbnN0YW5jZSB9IGZyb20gJy4vdGltZXNoZWV0Y2xvY2tvdXRjb250cm9sbGVyJztcclxuaW1wb3J0IHsgZHJvcGRvd25MaXN0RGlyZWN0aXZlX2luc3RhbmNlIH0gZnJvbSAnLi4vRHJvcGRvd25MaXN0L0Ryb3Bkb3duTGlzdERpcmVjdGl2ZSc7XHJcblxyXG5kcm9wZG93bkxpc3REaXJlY3RpdmVfaW5zdGFuY2U7XHJcblxyXG5kYXRhU2VydmljZV9pbnN0YW5jZS5kb1NldHVwKCd0aW1lc2hlZXRBcHAnKTtcclxuXHJcbnRpbWVzaGVldENvbnRyb2xsZXJfaW5zdGFuY2UudGltZXNoZWV0QXBwX1RpbWVzaGVldENvbnRyb2xsZXI7XHJcblxyXG50aW1lc2hlZXRDb250aW51ZUNvbnRyb2xsZXJfaW5zdGFuY2UudGltZXNoZWV0QXBwO1xyXG5cclxudGltZXNoZWV0Q2xvY2tvdXRDb250cm9sbGVyX2luc3RhbmNlLnRpbWVzaGVldEFwcDtcclxuXHJcbnRpbWVzaGVldEFwcF9pbnN0YW5jZS50aW1lc2hlZXRBcHA7XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9