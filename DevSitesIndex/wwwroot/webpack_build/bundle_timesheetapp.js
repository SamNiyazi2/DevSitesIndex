!function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=3)}([function(e,t){e.exports=angular},function(e,t,o){"use strict";var n,i,r;!function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){var t=function(){};e.Base=t}(e.Telemetry||(e.Telemetry={}))}(r||(r={})),function(e){!function(e){var t=function(){this.ver=1,this.sampleRate=100,this.tags={}};e.Envelope=t}(e.Telemetry||(e.Telemetry={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){e[e.Verbose=0]="Verbose",e[e.Information=1]="Information",e[e.Warning=2]="Warning",e[e.Error=3]="Error",e[e.Critical=4]="Critical"}(e.SeverityLevel||(e.SeverityLevel={}))}(i||(i={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){var t=function(){function e(){}return e.newId=function(){for(var e="",t=1073741824*Math.random();t>0;){e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t%64),t=Math.floor(t/64)}return e},e}();e.UtilHelpers=t}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),void 0===(n=function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){}return e._createLazyMethod=function(t){var o=window[e.appInsightsName];o[t]=function(){var e=arguments;o.queue?o.queue.push((function(){return o[t].apply(o,e)})):o[t].apply(o,e)}},e._defineLazyMethods=function(){var t=window[e.appInsightsName];try{t.cookie=document.cookie}catch(e){}t.queue=[];for(var o=["clearAuthenticatedUserContext","flush","setAuthenticatedUserContext","startTrackEvent","startTrackPage","stopTrackEvent","stopTrackPage","trackDependency","trackEvent","trackException","trackMetric","trackPageView","trackTrace"];o.length;)e._createLazyMethod(o.pop())},e._download=function(t){e.appInsightsInstance.config=t;var o=window[e.appInsightsName];if(o.queue||(o.queue=[]),setTimeout((function(){var e=document.createElement("script");e.src=t.url||"https://az416426.vo.msecnd.net/scripts/a/ai.0.js",document.head.appendChild(e)})),!t.disableExceptionTracking){e._createLazyMethod("_onerror");var n=window.onerror;window.onerror=function(e,t,i,r,s){var l=n&&n(e,t,i,r,s);return!0!==l&&o._onerror(e,t,i,r,s),l}}},Object.defineProperty(e,"appInsightsInstance",{get:function(){if("undefined"!=typeof window)return window[e.appInsightsName]||(window[e.appInsightsName]={downloadAndSetup:e._download,_defineLazyMethods:e._defineLazyMethods},e._defineLazyMethods()),window[e.appInsightsName]},enumerable:!0,configurable:!0}),e.appInsightsInitialized=!1,e.appInsightsName="appInsights",e}();t.AppInsights=o.appInsightsInstance}.apply(t,[o,t]))||(e.exports=n)},function(e,t){function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(t){return"function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?e.exports=n=function(e){return o(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":o(e)},n(t)}e.exports=n},function(e,t,o){e.exports=o(4)},function(e,t,o){"use strict";o.r(t);var n,i,r,s,l,c=o(0),a=(n=function(){function e(){}return e.getInstance=function(t,o){return void 0===o&&(o=null),e.getInstance_Original(t,o)},e.getInstance_Original=function(t,o){void 0===o&&(o=null);var n=null,i=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(i.length>0)i.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+i.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),n=i[0];else switch(t){case"timesheetApp":n={name:t,instance:c.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index_Timesheet":n={name:t,instance:c.module("demoSites_Index_Timesheet",o)},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index":n={name:t,instance:c.module("demoSites_Index",o)},e.ssn_devsite_angular_module.push(n);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return n.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),n.getInstance(e,t)}}),u={doSetup:function(e){a.getInstance(e).factory("dataService",["$http","$q",function(e,t){var o=[];return{devSites:ko.observable(o),getDevSites:function(){var n=t.defer();return e.get("/api/demositesapi").then((function(e){c.copy(e.data,o),n.resolve()}),(function(){n.reject()})),n.promise},addDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},updateDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},insertTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getTimelog:function(o){var n=t.defer();return e.get("/api/timelogapi/get_custom/"+o).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get timelog [20190829-1819]"})})),n.promise},updateTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getJobs:function(o){var n=t.defer(),i=0==o.job_statuses_selected.length?"nothing-201909221117":o.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+o.currentPageNo+"/"+o.recordsPerPage+"/"+o.columnName+"/"+o.desc+"/"+i).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get jobs [20190917-0057]"})})),n.promise},getJob_Statuses:function(){var o=t.defer();return e.get("/api/job_statusAPI/").then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),o.promise},getJob:function(o){console.log("DataServices - 20190930-1907 - getJob ["+o+"]");var n=t.defer();return e.get("/api/jobapi/get_custom/"+o).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get job [20190930-1908]"})})),n.promise}}}])}},p=((i=a.getInstance("timesheetApp")).controller("timesheetController",["$scope","$uibModal",function(e,t){e.timesheetForm_ClockOut=function(e){t.open({templateUrl:"/js/timesheet/templates/TimeLogEdit.html",controller:"TimesheetClockOutController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return e}}})},e.timesheetForm_ClockContinue=function(o){t.open({templateUrl:"/js/timesheet/templates//timesheetTemplate.html?v="+e.versionForHTMLRefresh,controller:"TimesheetContinueController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return o}}})},e.showCreateTimesheetForm=function(e){isNaN(e)&&(e=0),t.open({templateUrl:"/js/timesheet/templates/timesheetTemplate.html",controller:"TimesheetController",backdrop:!1,resolve:{jobId:function(){return e}}})}}]),function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetController",["$scope","$uibModalInstance","$http","$q","dataService","jobId",function(e,t,o,n,i,r){i.getJob(r).then((function(t){e.editableTimeLog.job={},e.editableTimeLog.job.jobTitle=t.jobTitle,e.editableTimeLog.job.project={},e.editableTimeLog.job.project.projectTitle=t.project.projectTitle}),(function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-B "),console.log(e)})).catch((function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-C "),console.log(e)})),e.disciplineSelected={id:0,title:""},e.pageTitle="Clock-in";var s=new Date;s.setMilliseconds(0),e.timeLog={timeLogId:0,id:0,startTime:s,workDetail:"",disciplineId:"2",jobId:r},e.editableTimeLog=c.copy(e.timeLog),e.submitForm=function(){e.editableTimeLog;var o=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(o=0===e.editableTimeLog.id?i.insertTimeLog(e.editableTimeLog):i.updateTimeLog(e.editableTimeLog))&&o.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){console.log("TimesheetController - 20190921-0640 - promise > error"),console.log(e)})),t.close(),toastr.info("Clocked-in")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=n.defer();return o({method:"GET",url:"/api/DisciplineAPI"}).then((function(o){var n=[];console.log("angular - forEach - 20190920-0720-o"),c.forEach(o.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&n.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(n)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp_TimesheetController:e}}()),d=o(2),X=o.n(d),f=(r=function(){$("pre").each((function(e){$(this).hide();var t="",o=$(this).attr("title"),n="";void 0!==o?(t=" title='"+o+"' ",n=": "+o):o="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+n+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,o){var n=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=n})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),o=$(this),n=$(this).attr("title"),i="";void 0===n?n="":i=": "+n,t.is(":visible")?(o.text("Show code"+i),t.fadeOut()):(t.fadeIn(),o.text("Hide code"+i))}}))},s=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/,$((function(){!function(){$("[cmd-name]").on("click",(function(t){var o=$(this).attr("cmd-name"),n=$(this).attr("popup-name"),i=$(this).attr("jQueryObjectName"),r=$(this).attr("jQueryObjectName2");if("open-popup"===o&&($(n).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===o&&$(i).hide(),"showObject"===o&&$(i).show(),"smooth-scroll"===o&&document.querySelector(i).scrollIntoView({behavior:"smooth"}),"set-default-time"===o){var s=new Date,l=s.getFullYear()+"-"+e(s.getMonth()+1,2,"0")+"-"+e(s.getDate(),2,"0")+"T"+e(s.getHours(),2,"0")+":"+e(s.getMinutes(),2,"0")+":"+e(s.getSeconds(),2,"0");$(i).val(l)}if("set-TotalPeriod"===o){var c=new Date,a=$(i)[0].value,u=new Date(a),p=c.getTime().valueOf()-u.getTime().valueOf(),d=Math.floor(p/1e3);$(r).val(d)}}));var e=function(e,t,o){var n=e.toString();return n.length>t?n:(o.repeat(t)+n).substring(t+(n.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")})),$(".modal").on("show",(function(){console.log("site.ts  -  20191102-1930 - Setting draggable."),$(this).draggable({handle:".modal-header"})}))}(),setTimeout(r,2e3)})),{fnConverDate:function e(t){if("object"!==X()(t))return t;for(var o in t)if(t.hasOwnProperty(o)){var n=t[o],i=X()(n);"string"===i&&n.match(s)?t[o]=new Date(n):"object"===i&&e(n)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:r}),m=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetContinueController",["$scope","$uibModalInstance","$http","$q","dataService","$timeout","timelogId",function(e,t,o,n,i,r,s){i.getTimelog(s).then((function(t){var o=t;f.fnConverDate(o);var n=new Date;n.setMilliseconds(0),e.timeLog=o,e.timeLog.timeLogId=0,e.timeLog.startTime=n,e.timeLog.dateModified=null,e.timeLog.totalSeconds=null,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(o.discipline.disciplineShort),e.disciplineSelected={id:o.discipline.disciplineId,title:o.discipline.disciplineShort}}),500)}),(function(e){})).catch((function(e){})),e.pageTitle="Continue / Line Item",e.feedbackToUserText="",e.feedbackToUserClassNameCase="",e.versionForHTMLRefresh="15",e.feedbackToUserClassNameSet=function(){switch(e.feedbackToUserClassNameCase){case 1:return"rounded margined info_good";case 2:return"rounded margined info_bad";default:return""}},e.submitForm=function(){e.editableTimeLog;var o=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(o=0===e.editableTimeLog.timeLogId?i.insertTimeLog(e.editableTimeLog):i.updateTimeLog(e.editableTimeLog))&&o.then((function(o){e.timeLog=c.copy(e.editableTimeLog),t.close(),toastr.info("Record added.  Reloading page..."),r((function(){location.reload()}),1e3)}),(function(t){console.log(t),toastr.error("Failed to add record. See console log."),e.feedbackToUserClassNameCase=2,e.feedbackToUserText=t.data}))},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=n.defer();return o({method:"GET",url:"api/DisciplineAPI"}).then((function(o){var n=[];c.forEach(o.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&n.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(n)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}(),g=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetClockOutController",["$scope","$uibModalInstance","$http","$q","dataService","timelogId",function(e,t,o,n,i,r){i.getTimelog(r).then((function(t){var o=t;f.fnConverDate(o),e.timeLog=o,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(o.discipline.disciplineShort),e.disciplineSelected={id:o.discipline.disciplineId,title:o.discipline.disciplineShort}}),500)}),(function(e){console.log("timesheetClockOutController - 20190922-1426"),console.log(e)})).catch((function(e){console.log("timesheetClockOutController - 20190922-1427"),console.log(e)})),e.pageTitle="Clock-out",e.submitForm=function(){e.editableTimeLog;var o=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(o=0===e.editableTimeLog.id?i.insertTimeLog(e.editableTimeLog):i.updateTimeLog(e.editableTimeLog))&&o.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){alert("System Error! Check console."),console.log(e)})),t.close(),toastr.info("Clocked-out")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=n.defer();return o({method:"GET",url:"api/DisciplineAPI"}).then((function(o){var n=[];c.forEach(o.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&n.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(n)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}(),h=((l=a.getInstance("demoSites_Index_Timesheet",["ui.bootstrap"])).controller("utilityController",["$scope","$attrs","$location",function(e,t,o){var n=t.formName;$("[name='"+n+"']").get(0),o.absUrl().trim(),e.submitForm_2=function(e,t){},e.submitForm_1=function(e,t){t.$valid||e.preventDefault()}}]),l.directive("dropdownListDirective",(function(){return{restrict:"E",templateUrl:"/js/DropdownList/DropDownListDirective.html",controller:["$http","$q","$scope",function(e,t,o){var n=this;n.firstRun=!0,n.isValid=function(){var e=!1;o.disciplineSelected&&o.disciplineSelected.id&&($("[name='"+this.keyColumn+"']").val(o.disciplineSelected.id),e=!0);var t=$("[name='"+this.keyColumn+"']").val();if(n.firstRun){switch(n.APIUrl="NotSet_20190916_0415",n.typeAheadLabel="NotSet_20190916_0534",this.keyColumn.toLowerCase()){case"timelog.disciplineid":n.APIUrl="/api/DisciplineAPI",n.typeAheadLabel="Descipline";break;case"timelog.jobid":n.APIUrl="/api/jobapi/typeahead",n.typeAheadLabel="Job Title"}n.firstRun=!1,n.getDisciplineCurrent(t).then(n.currentDisplineLookupSuccess)}return e},n.currentDisplineLookupSuccess=function(e){e&&(e.disciplineId&&(o.disciplineSelected={id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&(o.disciplineSelected={id:e.ta_id,title:e.ta_description}))},n.getDisciplines=function(o){null===o&&(o="");var i=t.defer();return e({method:"GET",url:n.APIUrl}).then((function(e){var t=[];c.forEach(e.data,(function(e){e.disciplineId&&e.disciplineShort.toLowerCase().indexOf(o.toLowerCase())>-1&&t.push({id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&e.ta_description.toLowerCase().indexOf(o.toLowerCase())>-1&&t.push({id:e.ta_id,title:e.ta_description})})),i.resolve(t)}),(function(e){i.reject(e)})),i.promise},n.getDisciplineCurrent=function(o){if(null===o)return null;var i=t.defer();return e({method:"GET",url:n.APIUrl+"/"+o}).then((function(e){i.resolve(e.data)}),(function(e){i.reject(e)})),i.promise}}],controllerAs:"vm101",bindToController:!0,scope:{keyColumn:"@key",formName:"="}}})),{appInsights:{instrumentationKey:"27233881-18ab-41ea-b5f9-f24b8ed62bd3",test:"22222"}}),v=o(1),b=function(){console.log("ApplicationInsights_monitor - 20191001-0951 - 001-B - top instance"),console.log("20191031-0547-001-002"),console.log(h);var e={instrumentationKey:h.appInsights.instrumentationKey};return{doSetup:function(){v.AppInsights.config||(e.instrumentationKey?(console.log(e),v.AppInsights.downloadAndSetup(e)):(console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("instrumentationKey is not set  -  20191011-1654"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")))},doTest:function(){console.log("ApplictionInsights_Monitor - doTest"),v.AppInsights.trackPageView("FirstPage-20191001-1015",null,{prop1:"prop1",prop2:"prop2"},{measurement1:1},123),v.AppInsights.trackEvent("TestEvent-20191001-1016",{prop1:"prop1",prop2:"prop2"},{measurement1:1})},logPageView:function(e,t,o,n,i){console.log("ApplictionInsights_Monitor - logPageView"),console.log(e,t,o),v.AppInsights.trackPageView(e,t,o)},logEvent:function(e,t,o){console.log("ApplictionInsights_Monitor - logEvent"),console.log(e,t,o),v.AppInsights.trackEvent(e,t,o)},logException:function(e,t,o){console.log("ApplictionInsights_Monitor - logException "),console.log(t),v.AppInsights.trackException(e,o,t)}}}();console.log("ApplicationInsights_monitor - 20191001-0951 - ZZZ - bottom file OOOOOOOOOOOOOOOOOOOOOOOOOOOOO "),u.doSetup("timesheetApp"),p.timesheetApp_TimesheetController,m.timesheetApp,g.timesheetApp,console.log("Timesheet_main - 20191001-1110"),b.doSetup(),b.logEvent("Timesheet_main",{SourceCode:"20191001-1112-C",Message:"Loading timesheet_main"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,