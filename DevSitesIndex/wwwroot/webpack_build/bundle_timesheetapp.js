!function(e){var t={};function i(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(o,n,function(t){return e[t]}.bind(null,n));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=3)}([function(e,t){e.exports=angular},function(e,t,i){"use strict";i.r(t);var o,n,r,l,s,c=i(0),a=(o=function(){function e(){}return e.getInstance=function(t,i){return void 0===i&&(i=null),e.getInstance_Original(t,i)},e.getInstance_Original=function(t,i){void 0===i&&(i=null);var o=null,n=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(n.length>0)n.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+n.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),o=n[0];else switch(t){case"timesheetApp":o={name:t,instance:c.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(o);break;case"demoSites_Index_Timesheet":o={name:t,instance:c.module("demoSites_Index_Timesheet",i)},e.ssn_devsite_angular_module.push(o);break;case"demoSites_Index":o={name:t,instance:c.module("demoSites_Index",i)},e.ssn_devsite_angular_module.push(o);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return o.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),o.getInstance(e,t)}}),d={doSetup:function(e){a.getInstance(e).factory("dataService",["$http","$q",function(e,t){var i=[];return{devSites:ko.observable(i),getDevSites:function(){var o=t.defer();return e.get("/api/demositesapi").then((function(e){c.copy(e.data,i),o.resolve()}),(function(){o.reject()})),o.promise},addDevSite:function(i){var o=t.defer();return e.post("/api/demositesapi",i).then((function(e){o.resolve(e.data)}),(function(){o.reject()})),o.promise},updateDevSite:function(i){var o=t.defer();return e.post("/api/demositesapi",i).then((function(e){o.resolve(e.data)}),(function(){o.reject()})),o.promise},insertTimeLog:function(i){var o=t.defer();return e.post("/api/timeLogAPI",i).then((function(e){o.resolve(e.data)}),(function(e){o.reject(e)})),o.promise},getTimelog:function(i){var o=t.defer();return e.get("/api/timelogapi/get_custom/"+i).then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get timelog [20190829-1819]"})})),o.promise},updateTimeLog:function(i){var o=t.defer();return e.post("/api/timeLogAPI",i).then((function(e){o.resolve(e.data)}),(function(e){o.reject(e)})),o.promise},getJobs:function(i){var o=t.defer(),n=0==i.job_statuses_selected.length?"nothing-201909221117":i.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+i.currentPageNo+"/"+i.recordsPerPage+"/"+i.columnName+"/"+i.desc+"/"+n).then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get jobs [20190917-0057]"})})),o.promise},getJob_Statuses:function(){var i=t.defer();return e.get("/api/job_statusAPI/").then((function(e){i.resolve(e.data)}),(function(e){i.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),i.promise}}}])}},u=((n=a.getInstance("timesheetApp")).controller("timesheetController",["$scope","$uibModal",function(e,t){e.timesheetForm_ClockOut=function(e){t.open({templateUrl:"/js/timesheet/templates/TimeLogEdit.html",controller:"TimesheetClockOutController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return e}}})},e.timesheetForm_ClockContinue=function(e){t.open({templateUrl:"/js/timesheet/templates//timesheetTemplate.html",controller:"TimesheetContinueController",windowClass:"ssn-mobile-modal",size:"md",backdrop:!1,resolve:{timelogId:function(){return e}}})},e.showCreateTimesheetForm=function(e){console.log("TimesheetApp - showCreateTimesheetForm - 20190921-0632"),isNaN(e)&&(e=0),t.open({templateUrl:"/js/timesheet/templates/timesheetTemplate.html",controller:"TimesheetController",backdrop:!1,resolve:{jobId:function(){return e}}})}}]),function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetController",["$scope","$uibModalInstance","$http","$q, dataService",function(e,t,i,o,n,r){e.disciplineSelected={id:0,title:""},e.pageTitle="Clock-in";var l=new Date;l.setMilliseconds(0),e.timeLog={timeLogId:0,id:0,startTime:l,workDetail:"",disciplineId:"2",jobId:r},e.editableTimeLog=c.copy(e.timeLog),e.submitForm=function(){e.editableTimeLog;var i=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(i=0===e.editableTimeLog.id?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&i.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){console.log("TimesheetController - 20190921-0640 - promise > error"),console.log(e)})),t.close(),toastr.info("Clocked-in")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=o.defer();return i({method:"GET",url:"/api/DisciplineAPI"}).then((function(i){var o=[];console.log("angular - forEach - 20190920-0720-o"),c.forEach(i.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&o.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(o)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp_TimesheetController:e}}()),p=i(2),m=i.n(p),f=(r=function(){$("pre").each((function(e){$(this).hide();var t="",i=$(this).attr("title"),o="";void 0!==i?(t=" title='"+i+"' ",o=": "+i):i="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+o+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,i){var o=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=o})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),i=$(this),o=$(this).attr("title"),n="";void 0===o?o="":n=": "+o,t.is(":visible")?(i.text("Show code"+n),t.fadeOut()):(t.fadeIn(),i.text("Hide code"+n))}}))},l=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/,$((function(){!function(){$("[cmd-name]").on("click",(function(t){var i=$(this).attr("cmd-name"),o=$(this).attr("popup-name"),n=$(this).attr("jQueryObjectName"),r=$(this).attr("jQueryObjectName2");if("open-popup"===i&&($(o).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===i&&$(n).hide(),"showObject"===i&&$(n).show(),"smooth-scroll"===i&&document.querySelector(n).scrollIntoView({behavior:"smooth"}),"set-default-time"===i){var l=new Date,s=l.getFullYear()+"-"+e(l.getMonth()+1,2,"0")+"-"+e(l.getDate(),2,"0")+"T"+e(l.getHours(),2,"0")+":"+e(l.getMinutes(),2,"0")+":"+e(l.getSeconds(),2,"0");$(n).val(s)}if("set-TotalPeriod"===i){var c=new Date,a=$(n)[0].value,d=new Date(a),u=c.getTime().valueOf()-d.getTime().valueOf(),p=Math.floor(u/1e3);$(r).val(p)}}));var e=function(e,t,i){var o=e.toString();return o.length>t?o:(i.repeat(t)+o).substring(t+(o.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")}))}(),setTimeout(r,2e3)})),{fnConverDate:function e(t){if("object"!==m()(t))return t;for(var i in t)if(t.hasOwnProperty(i)){var o=t[i],n=m()(o);"string"===n&&o.match(l)?t[i]=new Date(o):"object"===n&&e(o)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:r}),g=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetContinueController",["$scope","$uibModalInstance","$http","$q","dataService","$timeout","timelogId",function(e,t,i,o,n,r,l){n.getTimelog(l).then((function(t){var i=t;f.fnConverDate(i);var o=new Date;o.setMilliseconds(0),e.timeLog=i,e.timeLog.timeLogId=0,e.timeLog.startTime=o,e.timeLog.dateModified=null,e.timeLog.totalSeconds=null,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(i.discipline.disciplineShort),e.disciplineSelected={id:i.discipline.disciplineId,title:i.discipline.disciplineShort}}),500)}),(function(e){})).catch((function(e){})),e.pageTitle="Continue / Line Item",e.submitForm=function(){e.editableTimeLog;var i=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(i=0===e.editableTimeLog.timeLogId?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&i.then((function(i){e.timeLog=c.copy(e.editableTimeLog),t.close(),toastr.info("Record added.  Reloading page..."),r((function(){location.reload()}),1e3)}),(function(e){console.log(e),t.close(),toastr.error("Failed to add record. See console log.")}))},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=o.defer();return i({method:"GET",url:"api/DisciplineAPI"}).then((function(i){var o=[];c.forEach(i.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&o.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(o)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}(),h=function(){var e=a.getInstance("timesheetApp");return e.controller("TimesheetClockOutController",["$scope","$uibModalInstance","$http","$q","dataService","timelogId",function(e,t,i,o,n,r){n.getTimelog(r).then((function(t){var i=t;f.fnConverDate(i),e.timeLog=i,e.editableTimeLog=c.copy(e.timeLog),setTimeout((function(){e.getDisciplines(i.discipline.disciplineShort),e.disciplineSelected={id:i.discipline.disciplineId,title:i.discipline.disciplineShort}}),500)}),(function(e){console.log("timesheetClockOutController - 20190922-1426"),console.log(e)})).catch((function(e){console.log("timesheetClockOutController - 20190922-1427"),console.log(e)})),e.pageTitle="Clock-out",e.submitForm=function(){e.editableTimeLog;var i=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(i=0===e.editableTimeLog.id?n.insertTimeLog(e.editableTimeLog):n.updateTimeLog(e.editableTimeLog))&&i.then((function(t){e.timeLog=c.copy(e.editableTimeLog)}),(function(e){alert("System Error! Check console."),console.log(e)})),t.close(),toastr.info("Clocked-out")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=o.defer();return i({method:"GET",url:"api/DisciplineAPI"}).then((function(i){var o=[];c.forEach(i.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&o.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(o)}),(function(e){t.reject(e)})),t.promise}}]),{timesheetApp:e}}();(s=a.getInstance("demoSites_Index_Timesheet",["ui.bootstrap"])).controller("utilityController",["$scope","$attrs","$location",function(e,t,i){var o=t.formName;$("[name='"+o+"']").get(0),i.absUrl().trim(),e.submitForm_2=function(e,t){},e.submitForm_1=function(e,t){t.$valid||e.preventDefault()}}]),s.directive("dropdownListDirective",(function(){return{restrict:"E",templateUrl:"/js/DropdownList/DropDownListDirective.html",controller:["$http","$q","$scope",function(e,t,i){var o=this;o.firstRun=!0,o.isValid=function(){var e=!1;i.disciplineSelected&&i.disciplineSelected.id&&($("[name='"+this.keyColumn+"']").val(i.disciplineSelected.id),e=!0);var t=$("[name='"+this.keyColumn+"']").val();if(o.firstRun){switch(o.APIUrl="NotSet_20190916_0415",o.typeAheadLabel="NotSet_20190916_0534",this.keyColumn.toLowerCase()){case"timelog.disciplineid":o.APIUrl="/api/DisciplineAPI",o.typeAheadLabel="Descipline";break;case"timelog.jobid":o.APIUrl="/api/jobapi/typeahead",o.typeAheadLabel="Job Title"}o.firstRun=!1,o.getDisciplineCurrent(t).then(o.currentDisplineLookupSuccess)}return e},o.currentDisplineLookupSuccess=function(e){e&&(e.disciplineId&&(i.disciplineSelected={id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&(i.disciplineSelected={id:e.ta_id,title:e.ta_description}))},o.getDisciplines=function(i){null===i&&(i="");var n=t.defer();return e({method:"GET",url:o.APIUrl}).then((function(e){var t=[];c.forEach(e.data,(function(e){e.disciplineId&&e.disciplineShort.toLowerCase().indexOf(i.toLowerCase())>-1&&t.push({id:e.disciplineId,title:e.disciplineShort}),e.ta_id&&e.ta_description.toLowerCase().indexOf(i.toLowerCase())>-1&&t.push({id:e.ta_id,title:e.ta_description})})),n.resolve(t)}),(function(e){n.reject(e)})),n.promise},o.getDisciplineCurrent=function(i){if(null===i)return null;var n=t.defer();return e({method:"GET",url:o.APIUrl+"/"+i}).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise}}],controllerAs:"vm101",bindToController:!0,scope:{keyColumn:"@key",formName:"="}}}));d.doSetup("timesheetApp"),u.timesheetApp_TimesheetController,g.timesheetApp,h.timesheetApp},function(e,t){function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(t){return"function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?e.exports=o=function(e){return i(e)}:e.exports=o=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":i(e)},o(t)}e.exports=o},function(e,t,i){e.exports=i(1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,