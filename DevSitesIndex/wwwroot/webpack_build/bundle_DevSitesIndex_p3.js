!function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t){e.exports=angular},function(e,t,o){e.exports=o(2)},function(e,t,o){"use strict";o.r(t),console.log("demosites_index_p3 - top ");!function(){console.log("demosites_index_p3 - instance - top ");$((function(){var e=new function(){this.devSitesJSON=ko.observableArray([]),this.loadData=function(){var e=this;$.getJSON("/api/demositesapi/top?recordCount=15",(function(t){e.devSitesJSON.removeAll(),e.devSitesJSON(t)}))},this.currentItem={},this.errorMessage=ko.observable(),console.log("20190926-0627 - index_p3.cshtml - replace data source"),this.requestDelConfirm=function(t){console.log("index_p3 - 20190921-0947-3"),e.currentItem=t,$("#del-confirm").modal({backdrop:"static",keyboard:!1})},this.showJob=function(){$("#show-job").modal()},this.del=function(){alert("Calling del. [20190812-2128]"),ko.toJS(e.currentItem),$("#del-confirm").modal("hide")}};ko.applyBindings(e),e.loadData()})),console.log("demosites_index_p3 - instance - bottom ")}();console.log("demosites_index_p3 - bottom ");var n,i=o(0),r=(n=function(){function e(){}return e.getInstance=function(t,o){return void 0===o&&(o=null),e.getInstance_Original(t,o)},e.getInstance_Original=function(t,o){void 0===o&&(o=null);var n=null,r=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(r.length>0)r.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+r.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),n=r[0];else switch(t){case"timesheetApp":n={name:t,instance:i.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index_Timesheet":n={name:t,instance:i.module("demoSites_Index_Timesheet",o)},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index":n={name:t,instance:i.module("demoSites_Index",o)},e.ssn_devsite_angular_module.push(n);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return n.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),n.getInstance(e,t)}}),a={doSetup:function(e){r.getInstance(e).factory("dataService",["$http","$q",function(e,t){var o=[];return{devSites:ko.observable(o),getDevSites:function(){var n=t.defer();return e.get("/api/demositesapi").then((function(e){i.copy(e.data,o),n.resolve()}),(function(){n.reject()})),n.promise},addDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},updateDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},insertTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getTimelog:function(o){var n=t.defer();return e.get("/api/timelogapi/get_custom/"+o).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get timelog [20190829-1819]"})})),n.promise},updateTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getJobs:function(o){var n=t.defer(),i=0==o.job_statuses_selected.length?"nothing-201909221117":o.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+o.currentPageNo+"/"+o.recordsPerPage+"/"+o.columnName+"/"+o.desc+"/"+i).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get jobs [20190917-0057]"})})),n.promise},getJob_Statuses:function(){var o=t.defer();return e.get("/api/job_statusAPI/").then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),o.promise},getJob:function(o){console.log("DataServices - 20190930-1907 - getJob ["+o+"]");var n=t.defer();return e.get("/api/jobapi/get_custom/"+o).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get job [20190930-1908]"})})),n.promise}}}])}},s=function(){var e=r.getInstance("demoSites_Index",["ngRoute"]);e.config(["$routeProvider","$locationProvider",function(e,t){e.when("/",{controller:"demoSiteIndexController_101",templateUrl:"/templates/SitesIndex.html"}),e.otherwise({}),t.html5Mode({enabled:!0,rewriteLinks:!1}).hashPrefix("!"),console.log("setting routes [20190926-0556]")}]);e.controller("demoSiteIndexController_101",["$scope","$http","$window","dataService",function(e,t,o,n){e.Title="Title set in Angular controller.",e.data=n,e.isBusy2=!0,n.getDevSites().then((function(t){e.data_local=ko.observable(e.data.devSites())}),(function(e){console.log("20190910-0101"),console.log(e),alert("failed call to api/demositesapi (20180831-0940) - See console.")})).then((function(){e.isBusy2=!1})),e.editCommand101=function(e){alert("editCommand101 - test"),$("#del-confirm").modal({backdrop:"static",keyboard:!1})},e.editablerow="",e.editContent=function(t){e.editablerow=i.copy(t)},e.saveData=function(t){var o=e.data_local().findIndex((function(t){return t.id===e.editablerow.id}));e.data_local()[o]=e.editablerow,e.data.updateDevSite(e.editablerow).then((function(e){console.log("20190908-0628-S - demoSites_Index - updateDevSite Success"),console.log(e)}),(function(e){console.log("20190908-0628-E - demoSites_Index - updateDevSite Error"),console.log(e)})),e.reset()},e.reset=function(){e.editablerow=[]},e.loadTemplate=function(t){return t.id===e.editablerow.id?"editMode":"viewMode"},e.isValidUrl=function(e){if(!e||null==e.siteUrl)return!1;var t=e.siteUrl.toLowerCase().trim(),o=t.substr(0,7),n=t.substr(0,8),i=0;return i+=1=="|http://|https://|".indexOf(o)?1:0,(i+=1=="|http://|https://|".indexOf(n)?1:0)>0},e.setTableRowClass=function(e){return e%2==0?"evenRow":"oddRow"}}]);return{ssn_devsite_angular_module:e}}();a.doSetup("demoSites_Index"),s.ssn_devsite_angular_module}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,