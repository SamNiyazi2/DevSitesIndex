!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";var o,i,r;!function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){var t=function(){};e.Base=t}(e.Telemetry||(e.Telemetry={}))}(r||(r={})),function(e){!function(e){var t=function(){this.ver=1,this.sampleRate=100,this.tags={}};e.Envelope=t}(e.Telemetry||(e.Telemetry={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){!function(e){e.Context||(e.Context={})}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){e[e.Verbose=0]="Verbose",e[e.Information=1]="Information",e[e.Warning=2]="Warning",e[e.Error=3]="Error",e[e.Critical=4]="Critical"}(e.SeverityLevel||(e.SeverityLevel={}))}(i||(i={})),function(e){e.ApplicationInsights||(e.ApplicationInsights={})}(r||(r={})),function(e){!function(e){var t=function(){function e(){}return e.newId=function(){for(var e="",t=1073741824*Math.random();t>0;){e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t%64),t=Math.floor(t/64)}return e},e}();e.UtilHelpers=t}(e.ApplicationInsights||(e.ApplicationInsights={}))}(r||(r={})),void 0===(o=function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e._createLazyMethod=function(t){var n=window[e.appInsightsName];n[t]=function(){var e=arguments;n.queue?n.queue.push((function(){return n[t].apply(n,e)})):n[t].apply(n,e)}},e._defineLazyMethods=function(){var t=window[e.appInsightsName];try{t.cookie=document.cookie}catch(e){}t.queue=[];for(var n=["clearAuthenticatedUserContext","flush","setAuthenticatedUserContext","startTrackEvent","startTrackPage","stopTrackEvent","stopTrackPage","trackDependency","trackEvent","trackException","trackMetric","trackPageView","trackTrace"];n.length;)e._createLazyMethod(n.pop())},e._download=function(t){e.appInsightsInstance.config=t;var n=window[e.appInsightsName];if(n.queue||(n.queue=[]),setTimeout((function(){var e=document.createElement("script");e.src=t.url||"https://az416426.vo.msecnd.net/scripts/a/ai.0.js",document.head.appendChild(e)})),!t.disableExceptionTracking){e._createLazyMethod("_onerror");var o=window.onerror;window.onerror=function(e,t,i,r,a){var s=o&&o(e,t,i,r,a);return!0!==s&&n._onerror(e,t,i,r,a),s}}},Object.defineProperty(e,"appInsightsInstance",{get:function(){if("undefined"!=typeof window)return window[e.appInsightsName]||(window[e.appInsightsName]={downloadAndSetup:e._download,_defineLazyMethods:e._defineLazyMethods},e._defineLazyMethods()),window[e.appInsightsName]},enumerable:!0,configurable:!0}),e.appInsightsInitialized=!1,e.appInsightsName="appInsights",e}();t.AppInsights=n.appInsightsInstance}.apply(t,[n,t]))||(e.exports=o)},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=o=function(e){return n(e)}:e.exports=o=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},o(t)}e.exports=o},function(e,t,n){e.exports=n(4)},function(e,t,n){"use strict";n.r(t);var o=n(2),i=n.n(o),r=function(){var e=function(){$("pre").each((function(e){$(this).hide();var t="",n=$(this).attr("title"),o="";void 0!==n?(t=" title='"+n+"' ",o=": "+n):n="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+o+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,n){var o=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=o})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),n=$(this),o=$(this).attr("title"),i="";void 0===o?o="":i=": "+o,t.is(":visible")?(n.text("Show code"+i),t.fadeOut()):(t.fadeIn(),n.text("Hide code"+i))}})),$("[ssn-cmd=returnToCallerLink]").click((function(e){e.preventDefault(),e.stopPropagation();var t=$("#returnToCallerKey").val();document.location.href=e.target.href+"&returnToCallerKey="+t}))},t=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/;$((function(){!function(){$("[cmd-name]").on("click",(function(t){var n=$(this).attr("cmd-name"),o=$(this).attr("popup-name"),i=$(this).attr("jQueryObjectName"),r=$(this).attr("jQueryObjectName2");if(console.log("cmd-name",n,"popupName",o,"jQueryObjectName ",i,"jQueryObjectName2",r),"open-popup"===n&&(console.log("exec cmdName ",n),$(o).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===n&&(console.log("exec cmdName ",n,"jQueryObjectName",i),$(i).hide()),"showObject"===n&&(console.log("exec cmdName ",n,"jQueryObjectName",i),$(i).show()),"smooth-scroll"===n&&document.querySelector(i).scrollIntoView({behavior:"smooth"}),"set-default-time"===n){var a=new Date,s=a.getFullYear()+"-"+e(a.getMonth()+1,2,"0")+"-"+e(a.getDate(),2,"0")+"T"+e(a.getHours(),2,"0")+":"+e(a.getMinutes(),2,"0")+":"+e(a.getSeconds(),2,"0");$(i).val(s)}if("set-TotalPeriod"===n){var c=new Date,l=$(i)[0].value,X=new Date(l),u=c.getTime().valueOf()-X.getTime().valueOf(),d=Math.floor(u/1e3);$(r).val(d)}}));var e=function(e,t,n){var o=e.toString();return o.length>t?o:(n.repeat(t)+o).substring(t+(o.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")})),$(".modal").on("show",(function(){console.log("site.ts  -  20191102-1930 - Setting draggable."),$(this).draggable({handle:".modal-header"})}))}(),setTimeout(e,2e3)}));return{fnConverDate:function e(n){if("object"!==i()(n))return n;for(var o in n)if(n.hasOwnProperty(o)){var r=n[o],a=i()(r);"string"===a&&r.match(t)?n[o]=new Date(r):"object"===a&&e(r)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:e,getBrowserName:function(){var e=window.navigator.userAgent.toLowerCase();switch(!0){case e.indexOf("edge")>-1:return"edge";case e.indexOf("opr")>-1&&!!window.opr:return"opera";case e.indexOf("chrome")>-1&&!!window.chrome:return"chrome";case e.indexOf("trident")>-1:return"ie";case e.indexOf("firefox")>-1:return"firefox";case e.indexOf("safari")>-1:return"safari";default:return"other"}},haveChanges_v03:!1}}();console.log("site - 20191104-1750"),console.log("Browser:",r.getBrowserName());r.getBrowserName();console.log("site - 20191104-1750-ZZZ");a=new function(){var e=this;e.SearchText_KO="",e.SearchResultsFeedback_KO=ko.observable(""),e.SearchResultsFeedback_ClassName_KO=ko.observable(),e.prefixPreWithShowHideAnchor_DontCall_KO=ko.observable(!1),e.currentItem=ko.observable(),e.errorMessage=ko.observable(),this.devSitesJSON=ko.observableArray([]),this.loadData=function(){var e=this;$.getJSON("/api/demositesapi/top?recordCount=15",(function(t){e.devSitesJSON.removeAll(),e.devSitesJSON(t)}))},this.getRecordCount=function(){return e.devSitesJSON().length},this.requestDelConfirm=function(t){e.currentItem(t),$("#del_confirm_p1").modal({backdrop:"static",keyboard:!1})},this.showJob=function(e){$("#show-job").modal()},this.del=function(){ko.toJS(a.currentItem),$("#del-confirm").modal("hide")},this.checkIfcallingcmd=function(e){if(c(e,"cmd"))return!0},this.siteUrlWithoutCMD=function(e){return c(e,"cmd")?e.substring(4):e},this.onSubmit=function(){var t={SearchText:e.SearchText_KO},n=JSON.stringify(t);$.ajax({type:"POST",data:n,url:"/api/demositesapi/Search",contentType:"application/json",dataType:"json"}).done((function(t){e.devSitesJSON.removeAll(),e.devSitesJSON(t),e.SearchResultsFeedback_KO(""),e.SearchResultsFeedback_ClassName_KO(""),0===t.length&&(e.SearchResultsFeedback_KO("Search returned no records."),e.SearchResultsFeedback_ClassName_KO("alert-warning")),e.prefixPreWithShowHideAnchor_DontCall_KO()?setTimeout(r.showCollapsedDivs,2e3):setTimeout(r.prefixPreWithShowHideAnchor,2e3)}))},this.getClassForDemoState=function(e){var t="";switch(e){case 1:t=" forDemo_Yes";break;case 2:t="forDemo_No";break;case 3:t="forDemo_Undecided"}return"siteDiv "+t}},ko.applyBindings(a),a.loadData();var a,s,c=function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},l=n(0),X=(s=function(){function e(){}return e.getInstance=function(t,n){return void 0===n&&(n=null),e.getInstance_Original(t,n)},e.getInstance_Original=function(t,n){void 0===n&&(n=null);var o=null,i=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(i.length>0)i.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+i.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),o=i[0];else switch(t){case"timesheetApp":o={name:t,instance:l.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(o);break;case"demoSites_Index_Timesheet":o={name:t,instance:l.module("demoSites_Index_Timesheet",n)},e.ssn_devsite_angular_module.push(o);break;case"demoSites_Index":o={name:t,instance:l.module("demoSites_Index",n)},e.ssn_devsite_angular_module.push(o);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return o.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),s.getInstance(e,t)}}),u={doSetup:function(e){X.getInstance(e).factory("dataService",["$http","$q",function(e,t){var n=[];return{devSites:ko.observable(n),getDevSites:function(){var o=t.defer();return e.get("/api/demositesapi").then((function(e){l.copy(e.data,n),o.resolve()}),(function(){o.reject()})),o.promise},addDevSite:function(n){var o=t.defer();return e.post("/api/demositesapi",n).then((function(e){o.resolve(e.data)}),(function(){o.reject()})),o.promise},updateDevSite:function(n){var o=t.defer();return e.post("/api/demositesapi",n).then((function(e){o.resolve(e.data)}),(function(){o.reject()})),o.promise},insertTimeLog:function(n){var o=t.defer();return e.post("/api/timeLogAPI",n).then((function(e){o.resolve(e.data)}),(function(e){o.reject(e)})),o.promise},getTimelog:function(n){var o=t.defer();return e.get("/api/timelogapi/get_custom/"+n).then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get timelog [20190829-1819]"})})),o.promise},updateTimeLog:function(n){var o=t.defer();return e.post("/api/timeLogAPI",n).then((function(e){o.resolve(e.data)}),(function(e){o.reject(e)})),o.promise},getJobs:function(n){var o=t.defer(),i=0==n.job_statuses_selected.length?"nothing-201909221117":n.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+n.currentPageNo+"/"+n.recordsPerPage+"/"+n.columnName+"/"+n.desc+"/"+i).then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get jobs [20190917-0057]"})})),o.promise},getJob_Statuses:function(){var n=t.defer();return e.get("/api/job_statusAPI/").then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),n.promise},getJob:function(n){console.log("DataServices - 20190930-1907 - getJob ["+n+"]");var o=t.defer();return e.get("/api/jobapi/get_custom/"+n).then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get job [20190930-1908]"})})),o.promise}}}])}},d=function(){var e=X.getInstance("demoSites_Index",["ngRoute"]);e.config(["$routeProvider","$locationProvider",function(e,t){e.when("/",{controller:"demoSiteIndexController_101",templateUrl:"/templates/SitesIndex.html"}),e.otherwise({}),t.html5Mode({enabled:!0,rewriteLinks:!1}).hashPrefix("!"),console.log("setting routes [20190926-0556]")}]);e.controller("demoSiteIndexController_101",["$scope","$http","$window","dataService",function(e,t,n,o){e.Title="Title set in Angular controller.",e.data=o,e.isBusy2=!0,o.getDevSites().then((function(t){e.data_local=ko.observable(e.data.devSites())}),(function(e){console.log("20190910-0101"),console.log(e),alert("failed call to api/demositesapi (20180831-0940) - See console.")})).then((function(){e.isBusy2=!1})),e.editCommand101=function(e){alert("editCommand101 - test"),$("#del-confirm").modal({backdrop:"static",keyboard:!1})},e.editablerow="",e.editContent=function(t){e.editablerow=l.copy(t)},e.saveData=function(t){var n=e.data_local().findIndex((function(t){return t.id===e.editablerow.id}));e.data_local()[n]=e.editablerow,e.data.updateDevSite(e.editablerow).then((function(e){console.log("20190908-0628-S - demoSites_Index - updateDevSite Success"),console.log(e)}),(function(e){console.log("20190908-0628-E - demoSites_Index - updateDevSite Error"),console.log(e)})),e.reset()},e.reset=function(){e.editablerow=[]},e.loadTemplate=function(t){return t.id===e.editablerow.id?"editMode":"viewMode"},e.isValidUrl=function(e){if(!e||null==e.siteUrl)return!1;var t=e.siteUrl.toLowerCase().trim(),n=t.substr(0,7),o=t.substr(0,8),i=0;return i+=1=="|http://|https://|".indexOf(n)?1:0,(i+=1=="|http://|https://|".indexOf(o)?1:0)>0},e.setTableRowClass=function(e){return e%2==0?"evenRow":"oddRow"}}]);return{ssn_devsite_angular_module:e}}(),p={appInsights:{instrumentationKey:"33c6def5-430f-4cd4-8b6f-996820820dab"}},f=n(1),g=function(){console.log("ApplicationInsights_monitor - 20191001-0951 - 001-B - top instance"),console.log("20191031-0547-001-002"),console.log(p);var e={instrumentationKey:p.appInsights.instrumentationKey};return{doSetup:function(){f.AppInsights.config||(e.instrumentationKey?(console.log(e),f.AppInsights.downloadAndSetup(e)):(console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("instrumentationKey is not set  -  20191011-1654"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")))},doTest:function(){console.log("ApplictionInsights_Monitor - doTest"),f.AppInsights.trackPageView("FirstPage-20191001-1015",null,{prop1:"prop1",prop2:"prop2"},{measurement1:1},123),f.AppInsights.trackEvent("TestEvent-20191001-1016",{prop1:"prop1",prop2:"prop2"},{measurement1:1})},logPageView:function(e,t,n,o,i){console.log("ApplictionInsights_Monitor - logPageView"),console.log(e,t,n),f.AppInsights.trackPageView(e,t,n)},logEvent:function(e,t,n){console.log("ApplictionInsights_Monitor - logEvent"),console.log(e,t,n),f.AppInsights.trackEvent(e,t,n)},logException:function(e,t,n){console.log("ApplictionInsights_Monitor - logException "),console.log(t),f.AppInsights.trackException(e,n,t)}}}();console.log("ApplicationInsights_monitor - 20191001-0951 - ZZZ - bottom file OOOOOOOOOOOOOOOOOOOOOOOOOOOOO "),u.doSetup("demoSites_Index"),d.ssn_devsite_angular_module,console.log("DemoSites_Index_main - 20191001-1017"),g.doSetup(),g.logEvent("DemoSites_Index_Main",{SourceCode:"20191001-1132-C2",Message:"Loading DemoSites_Index_Main"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,