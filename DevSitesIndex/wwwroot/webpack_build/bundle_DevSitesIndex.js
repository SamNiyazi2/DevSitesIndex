!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}([function(e,t){e.exports=angular},function(e,t){function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(t){return"function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?e.exports=n=function(e){return o(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":o(e)},n(t)}e.exports=n},function(e,t,o){e.exports=o(3)},function(e,t,o){"use strict";o.r(t);var n,r,i,a,s=o(1),l=o.n(s),c=(n=function(){$("pre").each((function(e){$(this).hide();var t="",o=$(this).attr("title"),n="";void 0!==o?(t=" title='"+o+"' ",n=": "+o):o="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+n+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,o){var n=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=n})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),o=$(this),n=$(this).attr("title"),r="";void 0===n?n="":r=": "+n,t.is(":visible")?(o.text("Show code"+r),t.fadeOut()):(t.fadeIn(),o.text("Hide code"+r))}}))},r=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/,$((function(){!function(){$("[cmd-name]").on("click",(function(t){var o=$(this).attr("cmd-name"),n=$(this).attr("popup-name"),r=$(this).attr("jQueryObjectName"),i=$(this).attr("jQueryObjectName2");if("open-popup"===o&&($(n).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===o&&$(r).hide(),"showObject"===o&&$(r).show(),"smooth-scroll"===o&&document.querySelector(r).scrollIntoView({behavior:"smooth"}),"set-default-time"===o){var a=new Date,s=a.getFullYear()+"-"+e(a.getMonth()+1,2,"0")+"-"+e(a.getDate(),2,"0")+"T"+e(a.getHours(),2,"0")+":"+e(a.getMinutes(),2,"0")+":"+e(a.getSeconds(),2,"0");$(r).val(s)}if("set-TotalPeriod"===o){var l=new Date,c=$(r)[0].value,u=new Date(c),d=l.getTime().valueOf()-u.getTime().valueOf(),f=Math.floor(d/1e3);$(i).val(f)}}));var e=function(e,t,o){var n=e.toString();return n.length>t?n:(o.repeat(t)+n).substring(t+(n.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")}))}(),setTimeout(n,2e3)})),{fnConverDate:function e(t){if("object"!==l()(t))return t;for(var o in t)if(t.hasOwnProperty(o)){var n=t[o],i=l()(n);"string"===i&&n.match(r)?t[o]=new Date(n):"object"===i&&e(n)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:n}),u=(i=new function(){var e=this;e.SearchText_KO="",e.SearchResultsFeedback_KO=ko.observable(""),e.SearchResultsFeedback_ClassName_KO=ko.observable(),e.prefixPreWithShowHideAnchor_DontCall_KO=ko.observable(!1),e.currentItem=ko.observable(),e.errorMessage=ko.observable(),this.devSitesJSON=ko.observableArray([]),this.loadData=function(){var e=this;$.getJSON("/api/demositesapi/top?recordCount=15",(function(t){e.devSitesJSON.removeAll(),e.devSitesJSON(t)}))},this.getRecordCount=function(){return e.devSitesJSON().length},this.requestDelConfirm=function(t){e.currentItem(t),$("#del_confirm_p1").modal({backdrop:"static",keyboard:!1})},this.showJob=function(e){$("#show-job").modal()},this.del=function(){ko.toJS(i.currentItem),$("#del-confirm").modal("hide")},this.checkIfcallingcmd=function(e){if(u(e,"cmd"))return!0},this.siteUrlWithoutCMD=function(e){return u(e,"cmd")?e.substring(4):e},this.onSubmit=function(){var t={SearchText:e.SearchText_KO},o=JSON.stringify(t);$.ajax({type:"POST",data:o,url:"/api/demositesapi/Search",contentType:"application/json",dataType:"json"}).done((function(t){e.devSitesJSON.removeAll(),e.devSitesJSON(t),e.SearchResultsFeedback_KO(""),e.SearchResultsFeedback_ClassName_KO(""),0===t.length&&(e.SearchResultsFeedback_KO("Search returned no records."),e.SearchResultsFeedback_ClassName_KO("alert-warning")),e.prefixPreWithShowHideAnchor_DontCall_KO()?setTimeout(c.showCollapsedDivs,2e3):setTimeout(c.prefixPreWithShowHideAnchor,2e3)}))},this.getClassForDemoState=function(e){var t="";switch(e){case 1:t=" forDemo_Yes";break;case 2:t="forDemo_No";break;case 3:t="forDemo_Undecided"}return"siteDiv "+t}},ko.applyBindings(i),i.loadData(),function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t}),d=o(0),f=(a=function(){function e(){}return e.getInstance=function(t,o){return void 0===o&&(o=null),e.getInstance_Original(t,o)},e.getInstance_Original=function(t,o){void 0===o&&(o=null);var n=null,r=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(r.length>0)r.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+r.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),n=r[0];else switch(t){case"timesheetApp":n={name:t,instance:d.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index_Timesheet":n={name:t,instance:d.module("demoSites_Index_Timesheet",o)},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index":n={name:t,instance:d.module("demoSites_Index",o)},e.ssn_devsite_angular_module.push(n);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return n.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),a.getInstance(e,t)}}),m={doSetup:function(e){f.getInstance(e).factory("dataService",["$http","$q",function(e,t){var o=[];return{devSites:ko.observable(o),getDevSites:function(){var n=t.defer();return e.get("/api/demositesapi").then((function(e){d.copy(e.data,o),n.resolve()}),(function(){n.reject()})),n.promise},addDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},updateDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},insertTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getTimelog:function(o){var n=t.defer();return console.log("DataServices - 20190924-0518 - get_custom"),e.get("/api/timelogapi/get_custom/"+o).then((function(e){console.log("DataServices - 20190924-0518 - then"),console.log(e),n.resolve(e.data)}),(function(e){console.log("DataServices - 20190924-0518 - error"),console.log(e),n.reject({Error:"Failed call to get timelog [20190829-1819]"})})),n.promise},updateTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getJobs:function(o){var n=t.defer(),r=0==o.job_statuses_selected.length?"nothing-201909221117":o.job_statuses_selected.join(",");return console.log(r),e.get("/api/jobapi/list/"+o.currentPageNo+"/"+o.recordsPerPage+"/"+o.columnName+"/"+o.desc+"/"+r).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get jobs [20190917-0057]"})})),n.promise},getJob_Statuses:function(){var o=t.defer();return e.get("/api/job_statusAPI/").then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),o.promise}}}])}},p=function(){var e=f.getInstance("demoSites_Index",["ngRoute"]);e.config(["$routeProvider",function(e){e.when("/",{controller:"demoSiteIndexController_101",templateUrl:"/templates/SitesIndex.html"}),e.otherwise({redirectTo:"/"})}]);e.controller("demoSiteIndexController_101",["$scope","$http","$window","dataService",function(e,t,o,n){e.Title="Title set in Angular controller.",e.data=n,e.isBusy2=!0,n.getDevSites().then((function(t){e.data_local=ko.observable(e.data.devSites())}),(function(e){console.log("20190910-0101"),console.log(e),alert("failed call to api/demositesapi (20180831-0940) - See console.")})).then((function(){e.isBusy2=!1})),e.editCommand101=function(e){alert("editCommand101 - test"),$("#del-confirm").modal({backdrop:"static",keyboard:!1})},e.editablerow="",e.editContent=function(t){e.editablerow=d.copy(t)},e.saveData=function(t){var o=e.data_local().findIndex((function(t){return t.id===e.editablerow.id}));e.data_local()[o]=e.editablerow,e.data.updateDevSite(e.editablerow).then((function(e){console.log("20190908-0628-S - demoSites_Index - updateDevSite Success"),console.log(e)}),(function(e){console.log("20190908-0628-E - demoSites_Index - updateDevSite Error"),console.log(e)})),e.reset()},e.reset=function(){e.editablerow=[]},e.loadTemplate=function(t){return t.id===e.editablerow.id?"editMode":"viewMode"},e.isValidUrl=function(e){if(!e||null==e.siteUrl)return!1;var t=e.siteUrl.toLowerCase().trim(),o=t.substr(0,7),n=t.substr(0,8),r=0;return r+=1=="|http://|https://|".indexOf(o)?1:0,(r+=1=="|http://|https://|".indexOf(n)?1:0)>0},e.setTableRowClass=function(e){return e%2==0?"evenRow":"oddRow"}}]);return{ssn_devsite_angular_module:e}}();m.doSetup("demoSites_Index"),p.ssn_devsite_angular_module}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,