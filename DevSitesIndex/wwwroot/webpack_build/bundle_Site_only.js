!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t){function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(t){return"function"==typeof Symbol&&"symbol"===o(Symbol.iterator)?e.exports=n=function(e){return o(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":o(e)},n(t)}e.exports=n},function(e,t,o){o(3),e.exports=o(2)},function(e,t,o){"use strict";var n;o.r(t),o.d(t,"CodeReference_Page",(function(){return n})),n||(n={}),$((function(){console.log("CodeReference_Pages running doSetup"),$((function(){$("[doRefreshForm]").on("click",(function(e){"0"===$(this).attr("doRefreshForm")&&$("#SearchText").val(""),$("#submitSearchCodeRef").click()}))})),$(window).scroll((function(){$(document).height()>$(window).height()&&($(window).scrollTop()>100?$(".searchOption ").addClass("fixed_101"):$(".searchOption ").removeClass("fixed_101"))}))})),console.log("CodeReference_Pages - top "),console.log(Date())},function(e,t,o){"use strict";o.r(t);var n=o(0),r=o.n(n),i=function(){var e=function(){$("pre").each((function(e){$(this).hide();var t="",o=$(this).attr("title"),n="";void 0!==o?(t=" title='"+o+"' ",n=": "+o):o="",$('<p><a cmd-name="showsibling" '+t+" >Show code"+n+"</a></p>").insertBefore(this)})),document.querySelectorAll("pre").forEach((function(e,t,o){var n=e.innerHTML.replace(/(<)((?!\/?[n|i|h]))(.*?>)/g,"&lt;$3");e.innerHTML=n})),$("[cmd-name]").on("click",(function(e){if("showsibling"===$(this).attr("cmd-name")){var t=$(this).parent().next(),o=$(this),n=$(this).attr("title"),r="";void 0===n?n="":r=": "+n,t.is(":visible")?(o.text("Show code"+r),t.fadeOut()):(t.fadeIn(),o.text("Hide code"+r))}})),$("[ssn-cmd=returnToCallerLink]").click((function(e){e.preventDefault(),e.stopPropagation();var t=$("#returnToCallerKey").val();document.location.href=e.target.href+"&returnToCallerKey="+t}))},t=/(19|20|21)\d\d([-\/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])T(\d\d)([:\/.])(\d\d)([:\/.])(\d\d)/;$((function(){!function(){$("[cmd-name]").on("click",(function(t){var o=$(this).attr("cmd-name"),n=$(this).attr("popup-name"),r=$(this).attr("jQueryObjectName"),i=$(this).attr("jQueryObjectName2");if(console.log("cmd-name",o,"popupName",n,"jQueryObjectName ",r,"jQueryObjectName2",i),"open-popup"===o&&(console.log("exec cmdName ",o),$(n).modal({backdrop:"static",keyboard:!1}),$("#addSite_PageContent").load("/times/start")),"hideObject"===o&&(console.log("exec cmdName ",o,"jQueryObjectName",r),$(r).hide()),"showObject"===o&&(console.log("exec cmdName ",o,"jQueryObjectName",r),$(r).show()),"smooth-scroll"===o&&document.querySelector(r).scrollIntoView({behavior:"smooth"}),"set-default-time"===o){var a=new Date,c=a.getFullYear()+"-"+e(a.getMonth()+1,2,"0")+"-"+e(a.getDate(),2,"0")+"T"+e(a.getHours(),2,"0")+":"+e(a.getMinutes(),2,"0")+":"+e(a.getSeconds(),2,"0");$(r).val(c)}if("set-TotalPeriod"===o){var l=new Date,u=$(r)[0].value,s=new Date(u),f=l.getTime().valueOf()-s.getTime().valueOf(),d=Math.floor(f/1e3);$(i).val(d)}}));var e=function(e,t,o){var n=e.toString();return n.length>t?n:(o.repeat(t)+n).substring(t+(n.length-t))};$(window).on("scroll",(function(){$(window).scrollTop()>0?$(".fixed_anchor").fadeIn("slow"):$(".fixed_anchor").fadeOut("slow")})),$(".modal").on("show",(function(){console.log("site.ts  -  20191102-1930 - Setting draggable."),$(this).draggable({handle:".modal-header"})}))}(),setTimeout(e,2e3)}));return{fnConverDate:function e(o){if("object"!==r()(o))return o;for(var n in o)if(o.hasOwnProperty(n)){var i=o[n],a=r()(i);"string"===a&&i.match(t)?o[n]=new Date(i):"object"===a&&e(i)}},showCollapsedDivs:function(){$("[data-toggle='collapse']").trigger("click")},prefixPreWithShowHideAnchor:e,getBrowserName:function(){var e=window.navigator.userAgent.toLowerCase();switch(!0){case e.indexOf("edge")>-1:return"edge";case e.indexOf("opr")>-1&&!!window.opr:return"opera";case e.indexOf("chrome")>-1&&!!window.chrome:return"chrome";case e.indexOf("trident")>-1:return"ie";case e.indexOf("firefox")>-1:return"firefox";case e.indexOf("safari")>-1:return"safari";default:return"other"}},haveChanges_v03:!1}}();console.log("site - 20191104-1750"),console.log("Browser:",i.getBrowserName());i.getBrowserName();console.log("site - 20191104-1750-ZZZ")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,