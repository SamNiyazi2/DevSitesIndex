!function(e){var t={};function o(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(n,s,function(t){return e[t]}.bind(null,s));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t){e.exports=angular},function(e,t,o){e.exports=o(2)},function(e,t,o){"use strict";o.r(t);var n,s,i,r,c,l,a=o(0),u=(n=function(){function e(){}return e.getInstance=function(t,o){return void 0===o&&(o=null),e.getInstance_Original(t,o)},e.getInstance_Original=function(t,o){void 0===o&&(o=null);var n=null,s=e.ssn_devsite_angular_module.filter((function(e){return e.name===t}));if(s.length>0)s.length>1&&(console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("Globals - 20190923-0543 - 001 - Found application ["+t+"]  Instance count ["+s.length+"]"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************"),console.log("********************************************")),n=s[0];else switch(t){case"timesheetApp":n={name:t,instance:a.module("timesheetApp",["ngRoute","ui.bootstrap"])},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index_Timesheet":n={name:t,instance:a.module("demoSites_Index_Timesheet",o)},e.ssn_devsite_angular_module.push(n);break;case"demoSites_Index":n={name:t,instance:a.module("demoSites_Index",o)},e.ssn_devsite_angular_module.push(n);break;default:console.log("Globals ************* No case for application name ["+t+"]  [20190920-0955] globals.ts")}return n.instance},e.ssn_devsite_angular_module=[],e}(),{getInstance:function(e,t){return void 0===t&&(t=null),n.getInstance(e,t)}}),d=((s=u.getInstance("timesheetApp")).controller("utilityController",["$scope","dataService",function(e,t){}]),s.directive("headerWithSort",(function(){return{restrict:"A",templateUrl:"/js/Util/headerWithSort.html",scope:{columnlist:"=columnlist",sortmethod:"&"},link:function(e,t,o){e.sort=function(){console.log("headerWithSort - 20190921-0613 - "),e.sortmethod()}}}})),(i=u.getInstance("timesheetApp")).controller("utilityController",["$scope","dataService",function(e,t){}]),i.directive("pagingDirective",["$timeout",function(e){return{restrict:"A",templateUrl:"/js/Util/pagingDirective.html",scope:{pagingmethod:"&",databag:"=",sqlstatsrecord:"="},link:function(t,o,n){function s(){return Math.ceil(t.sqlstatsrecord.totalRecordCount/t.sqlstatsrecord.recordsPerPage)}function i(){var o=s();t.previousdisabled=t.sqlstatsrecord.currentPageNo<=1,t.nextdisabled=t.sqlstatsrecord.currentPageNo>=o,t.sayWhatPageWeAreOn=o>0?"Page "+t.sqlstatsrecord.currentPageNo+" of "+o:"No records.",e(t.init101,1e3)}t.sayWhatPageWeAreOn="",t.init101=function(){i()},t.onPrevious=function(){this.sqlstatsrecord.currentPageNo=this.sqlstatsrecord.currentPageNo>1?this.sqlstatsrecord.currentPageNo-1:1,t.pagingmethod(),i()},t.onNext=function(){var e=s();this.sqlstatsrecord.currentPageNo=this.sqlstatsrecord.currentPageNo<e?this.sqlstatsrecord.currentPageNo+1:e,t.pagingmethod(),i()},t.init101()}}}]),{doSetup:function(e){u.getInstance(e).factory("dataService",["$http","$q",function(e,t){var o=[];return{devSites:ko.observable(o),getDevSites:function(){var n=t.defer();return e.get("/api/demositesapi").then((function(e){a.copy(e.data,o),n.resolve()}),(function(){n.reject()})),n.promise},addDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},updateDevSite:function(o){var n=t.defer();return e.post("/api/demositesapi",o).then((function(e){n.resolve(e.data)}),(function(){n.reject()})),n.promise},insertTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getTimelog:function(o){var n=t.defer();return e.get("/api/timelogapi/get_custom/"+o).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get timelog [20190829-1819]"})})),n.promise},updateTimeLog:function(o){var n=t.defer();return e.post("/api/timeLogAPI",o).then((function(e){n.resolve(e.data)}),(function(e){n.reject(e)})),n.promise},getJobs:function(o){var n=t.defer(),s=0==o.job_statuses_selected.length?"nothing-201909221117":o.job_statuses_selected.join(",");return e.get("/api/jobapi/list/"+o.currentPageNo+"/"+o.recordsPerPage+"/"+o.columnName+"/"+o.desc+"/"+s).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get jobs [20190917-0057]"})})),n.promise},getJob_Statuses:function(){var o=t.defer();return e.get("/api/job_statusAPI/").then((function(e){o.resolve(e.data)}),(function(e){o.reject({Error:"Failed call to get job_statuses [20190921-1326"})})),o.promise},getJob:function(o){console.log("DataServices - 20190930-1907 - getJob ["+o+"]");var n=t.defer();return e.get("/api/jobapi/get_custom/"+o).then((function(e){n.resolve(e.data)}),(function(e){n.reject({Error:"Failed call to get job [20190930-1908]"})})),n.promise}}}])}}),g=((r=u.getInstance("timesheetApp")).controller("utilityController",["$scope","dataService",function(e,t){}]),r.directive("jobStatusOption",(function(){return{restrict:"A",templateUrl:"/js/jobs/jobStatus.html",scope:{entry:"=",checkedfunction:"&",jobstatusesselected102:"="},link:function(e,t,o){e.job_status_click=function(e){this.checkedfunction()},e.job_status_checked=function(e){return this.jobstatusesselected102.indexOf(e.id)>-1}}}})),u.getInstance("timesheetApp").directive("jobStatusDisplay",(function(){return{link:function(e,t,o){e.$watch(o.jobStatus,(function(e,o){var n="";n="1"==e?"job_status_open_1":"2"==e?"job_status_Pending_2":"3"==e?"job_status_Completed_3":"job_status_Cancelled_4",t.removeClass("job_status_open_1 job_status_Pending_2 job_status_Completed_3 job_status_Cancelled_4"),t.addClass(n)}))}}})),function(){return(g=Object.assign||function(e){for(var t,o=1,n=arguments.length;o<n;o++)for(var s in t=arguments[o])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)});(c=u.getInstance("timesheetApp")).controller("jobsIndexController",["$scope","$http","$q","dataService","$timeout","$sce","$uibModal",function(e,t,o,n,s,i,r){e.job_statuses_selected=[1];var c={columnName:"dateAdded",columnNameSelected:"dateAdded",currentPageNo:1,desc:!0,recordsPerPage:4,totalRecordCount:0,caption:"Date Added",job_statuses_selected:[e.job_statuses_selected]},l=[g({},c,{columnName:"projectTitle_ForActivity",caption:"Project Title"}),g({},c,{columnName:"jobTitle",caption:"Job Title"}),g({},c,{columnName:"dateAdded",caption:"Date Added"}),g({},c,{columnName:"dateUpdated",caption:"Date Updated"}),g({},c,{columnName:"activityAge",caption:"Activity Age"})];function a(t){n.getJobs(t).then((function(t){e.databag={jobs:t.dataList,column:t.columnName,desc:t.desc},t.sqlStatsRecord.job_statuses_selected=t.sqlStatsRecord.job_statuses_selected.split(","),e.sqlStatsRecord=t.sqlStatsRecord;var o=e.fieldsList.findIndex((function(e){return e.column===t.columnName}));o>-1&&(e.fieldsList[o].desc=t.desc)}),(function(e){})).catch((function(e){}))}e.fieldsList=l,a(c),e.sortMethod101=function(e){e.columnName!=e.columnNameSelected?e.columnNameSelected=e.columnName:e.desc=!e.desc,a(e)},e.pagingmethod101=function(t){a(t),e.sqlStatsRecord=t},e.job_status_changed101=function(t){var o=e.job_statuses_selected.indexOf(t.id);o>-1?e.job_statuses_selected.splice(o,1):e.job_statuses_selected[e.job_statuses_selected.length]=t.id,e.sqlStatsRecord&&(e.sqlStatsRecord.job_statuses_selected=e.job_statuses_selected),c.job_statuses_selected=e.sqlStatsRecord.job_statuses_selected,a(c)},e.job_statuses_checkAll=function(t){e.job_statuses_selected=t?e.job_statuses.map((function(e){return e.id})):[],c.job_statuses_selected=e.job_statuses_selected,a(c)},e.showCreateTimesheetForm=function(e){console.log(""),console.log(""),console.log("JobIndexController - 20190930-1842 - showCreateTimesheetForm"),console.log("jobID ["+e+"]"),isNaN(e)&&(e=0),console.log("jobID ["+e+"]"),r.open({templateUrl:"/js/timesheet/templates/timesheetTemplate.html",controller:"TimesheetController",backdrop:!1,resolve:{jobId:function(){return e}}})},n.getJob_Statuses().then((function(t){e.job_statuses=t}),(function(e){console.log("JobIndexController -  20190922-0758 - Data error ?????????????????????????????"),console.log(e)})).catch((function(e){console.log("JobIndexController -  20190922-0758 - Data error (catch) ?????????????????????????????"),console.log(e)}))}]),(l=u.getInstance("timesheetApp")).controller("TimesheetController",["$scope","$uibModalInstance","$http","$q","dataService","jobId",function(e,t,o,n,s,i){console.log("TimesheetController - 20190930-1836 - Controller top - Look for bottom!!"),console.log(i),s.getJob(i).then((function(t){console.log("TimeshetController - getJobSuccess  -  20190930-2106-A  "),console.log(t),e.editableTimeLog.job={},e.editableTimeLog.job.jobTitle=t.jobTitle,e.editableTimeLog.job.project={},e.editableTimeLog.job.project.projectTitle=t.project.projectTitle}),(function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-B "),console.log(e)})).catch((function(e){console.log("TimeshetController - getJobSuccess  -  20190930-2106-C "),console.log(e)})),e.disciplineSelected={id:0,title:""},e.pageTitle="Clock-in";var r=new Date;r.setMilliseconds(0),e.timeLog={timeLogId:0,id:0,startTime:r,workDetail:"",disciplineId:"2",jobId:i},e.editableTimeLog=a.copy(e.timeLog),console.log("TimesheetController - 20190930-1836 - Controller bottom"),console.log("jobId ["+i+"]"),e.submitForm=function(){e.editableTimeLog;var o=null;e.editableTimeLog.disciplineId=e.disciplineSelected.id,(o=0===e.editableTimeLog.id?s.insertTimeLog(e.editableTimeLog):s.updateTimeLog(e.editableTimeLog))&&o.then((function(t){e.timeLog=a.copy(e.editableTimeLog)}),(function(e){console.log("TimesheetController - 20190921-0640 - promise > error"),console.log(e)})),t.close(),toastr.info("Clocked-in")},e.cancelForm=function(){t.dismiss()},e.getDisciplines=function(e){null===e&&(e="");var t=n.defer();return o({method:"GET",url:"/api/DisciplineAPI"}).then((function(o){var n=[];console.log("angular - forEach - 20190920-0720-o"),a.forEach(o.data,(function(t){t.disciplineShort.toLowerCase().indexOf(e.toLowerCase())>-1&&n.push({id:t.disciplineId,title:t.disciplineShort})})),t.resolve(n)}),(function(e){t.reject(e)})),t.promise}}]);d.doSetup("timesheetApp")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,